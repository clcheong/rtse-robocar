
robocarChatGPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  00001720  000017b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a7  00800228  00800228  000018dc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001930  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015cf  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b4  00000000  00000000  00003047  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a40  00000000  00000000  000038fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  0000433c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c2  00000000  00000000  00004404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028c  00000000  00000000  00004ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e2       	ldi	r30, 0x20	; 32
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3c       	cpi	r26, 0xCF	; 207
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 1c 09 	call	0x1238	; 0x1238 <main>
      9e:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      a8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      b0:	c0 93 ac 02 	sts	0x02AC, r28	; 0x8002ac <myrobot+0x4>
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 b1 08 	call	0x1162	; 0x1162 <OSTimeDlyHMSM>
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      c4:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <myrobot>
      ce:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <myrobot+0x1>
      d2:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <myrobot+0x2>
      d6:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <myrobot+0x3>
      da:	0e 94 8a 02 	call	0x514	; 0x514 <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 250 ms              */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 b1 08 	call	0x1162	; 0x1162 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    OS_ticks_init();                                        /* enable RTOS timer tick        */
      ee:	0e 94 58 03 	call	0x6b0	; 0x6b0 <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /* Task function                 */
      f2:	22 e0       	ldi	r18, 0x02	; 2
      f4:	47 ea       	ldi	r20, 0xA7	; 167
      f6:	52 e0       	ldi	r21, 0x02	; 2
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	83 e5       	ldi	r24, 0x53	; 83
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 60 07 	call	0xec0	; 0xec0 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     104:	23 e0       	ldi	r18, 0x03	; 3
     106:	4a e4       	ldi	r20, 0x4A	; 74
     108:	53 e0       	ldi	r21, 0x03	; 3
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	85 e6       	ldi	r24, 0x65	; 101
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 60 07 	call	0xec0	; 0xec0 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /* stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /* priority of task              */

    OSTaskCreate(Navig,                                     /* Task function                 */
     116:	24 e0       	ldi	r18, 0x04	; 4
     118:	4a e4       	ldi	r20, 0x4A	; 74
     11a:	54 e0       	ldi	r21, 0x04	; 4
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	89 e9       	ldi	r24, 0x99	; 153
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 60 07 	call	0xec0	; 0xec0 <OSTaskCreate>
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	45 e0       	ldi	r20, 0x05	; 5
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 b1 08 	call	0x1162	; 0x1162 <OSTimeDlyHMSM>
     136:	f8 cf       	rjmp	.-16     	; 0x128 <TaskStart+0x3a>

00000138 <constrain>:
    int inRoundabout;
    int turn;
} myrobot;

int constrain(int value, int lowerBound, int upperBound) {
    if (value < lowerBound) {
     138:	86 17       	cp	r24, r22
     13a:	97 07       	cpc	r25, r23
     13c:	2c f0       	brlt	.+10     	; 0x148 <constrain+0x10>
     13e:	bc 01       	movw	r22, r24
     140:	48 17       	cp	r20, r24
     142:	59 07       	cpc	r21, r25
     144:	0c f4       	brge	.+2      	; 0x148 <constrain+0x10>
     146:	ba 01       	movw	r22, r20
        return upperBound;
    }
    else {
        return value;
    }
}
     148:	cb 01       	movw	r24, r22
     14a:	08 95       	ret

0000014c <absoluteValue>:

int absoluteValue(int num) {
     14c:	97 ff       	sbrs	r25, 7
     14e:	03 c0       	rjmp	.+6      	; 0x156 <absoluteValue+0xa>
     150:	91 95       	neg	r25
     152:	81 95       	neg	r24
     154:	91 09       	sbc	r25, r1
    if (num < 0)
        return -num;
    else
        return num;
}
     156:	08 95       	ret

00000158 <pidControl>:

void pidControl(int sense) {
     158:	8f 92       	push	r8
     15a:	9f 92       	push	r9
     15c:	af 92       	push	r10
     15e:	bf 92       	push	r11
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inRoundabout == 1) {
     16c:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <myrobot+0x1f>
     170:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <myrobot+0x20>
     174:	21 30       	cpi	r18, 0x01	; 1
     176:	31 05       	cpc	r19, r1
     178:	09 f0       	breq	.+2      	; 0x17c <pidControl+0x24>
     17a:	cc c0       	rjmp	.+408    	; 0x314 <pidControl+0x1bc>
        motorSpeed = 40;
        myrobot.KP = DEFAULT_KP * 1.3;
     17c:	46 e7       	ldi	r20, 0x76	; 118
     17e:	5e eb       	ldi	r21, 0xBE	; 190
     180:	6f e9       	ldi	r22, 0x9F	; 159
     182:	7d e3       	ldi	r23, 0x3D	; 61
     184:	40 93 ad 02 	sts	0x02AD, r20	; 0x8002ad <myrobot+0x5>
     188:	50 93 ae 02 	sts	0x02AE, r21	; 0x8002ae <myrobot+0x6>
     18c:	60 93 af 02 	sts	0x02AF, r22	; 0x8002af <myrobot+0x7>
     190:	70 93 b0 02 	sts	0x02B0, r23	; 0x8002b0 <myrobot+0x8>
void pidControl(int sense) {

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inRoundabout == 1) {
        motorSpeed = 40;
     194:	c8 e2       	ldi	r28, 0x28	; 40
     196:	d0 e0       	ldi	r29, 0x00	; 0
    } else {
        motorSpeed = DEFAULT_MOTOR_SPEED;
        myrobot.KP = DEFAULT_KP; 
    }

    int error = myrobot.goal - sense;
     198:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <myrobot+0x19>
     19c:	70 91 c2 02 	lds	r23, 0x02C2	; 0x8002c2 <myrobot+0x1a>
     1a0:	68 1b       	sub	r22, r24
     1a2:	79 0b       	sbc	r23, r25

    myrobot.integral = myrobot.integral + error;
     1a4:	07 2e       	mov	r0, r23
     1a6:	00 0c       	add	r0, r0
     1a8:	88 0b       	sbc	r24, r24
     1aa:	99 0b       	sbc	r25, r25
     1ac:	0e 94 95 0a 	call	0x152a	; 0x152a <__floatsisf>
     1b0:	6b 01       	movw	r12, r22
     1b2:	7c 01       	movw	r14, r24
     1b4:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <myrobot+0x15>
     1b8:	30 91 be 02 	lds	r19, 0x02BE	; 0x8002be <myrobot+0x16>
     1bc:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <myrobot+0x17>
     1c0:	50 91 c0 02 	lds	r21, 0x02C0	; 0x8002c0 <myrobot+0x18>
     1c4:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__addsf3>
     1c8:	60 93 bd 02 	sts	0x02BD, r22	; 0x8002bd <myrobot+0x15>
     1cc:	70 93 be 02 	sts	0x02BE, r23	; 0x8002be <myrobot+0x16>
     1d0:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <myrobot+0x17>
     1d4:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <myrobot+0x18>

    if(absoluteValue(myrobot.integral) > 28000){
     1d8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixsfsi>
     1dc:	9b 01       	movw	r18, r22
     1de:	77 ff       	sbrs	r23, 7
     1e0:	04 c0       	rjmp	.+8      	; 0x1ea <pidControl+0x92>
     1e2:	22 27       	eor	r18, r18
     1e4:	33 27       	eor	r19, r19
     1e6:	26 1b       	sub	r18, r22
     1e8:	37 0b       	sbc	r19, r23
     1ea:	21 36       	cpi	r18, 0x61	; 97
     1ec:	3d 46       	sbci	r19, 0x6D	; 109
     1ee:	6c f0       	brlt	.+26     	; 0x20a <pidControl+0xb2>
        robo_LED_toggle();
     1f0:	85 b1       	in	r24, 0x05	; 5
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	89 27       	eor	r24, r25
     1f6:	85 b9       	out	0x05, r24	; 5
        myrobot.turn += 1;
     1f8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <myrobot+0x21>
     1fc:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <myrobot+0x22>
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <myrobot+0x22>
     206:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <myrobot+0x21>
    }


    // Calculate motor adjustments
    int adjustment = (myrobot.KP * error) + (myrobot.KI * (myrobot.integral)) + (myrobot.KD * (error - myrobot.lastError));
     20a:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <myrobot+0x15>
     20e:	30 91 be 02 	lds	r19, 0x02BE	; 0x8002be <myrobot+0x16>
     212:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <myrobot+0x17>
     216:	50 91 c0 02 	lds	r21, 0x02C0	; 0x8002c0 <myrobot+0x18>
     21a:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <myrobot+0xd>
     21e:	70 91 b6 02 	lds	r23, 0x02B6	; 0x8002b6 <myrobot+0xe>
     222:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <myrobot+0xf>
     226:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <myrobot+0x10>
     22a:	0e 94 21 0b 	call	0x1642	; 0x1642 <__mulsf3>
     22e:	4b 01       	movw	r8, r22
     230:	5c 01       	movw	r10, r24
     232:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <myrobot+0x5>
     236:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <myrobot+0x6>
     23a:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <myrobot+0x7>
     23e:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <myrobot+0x8>
     242:	c7 01       	movw	r24, r14
     244:	b6 01       	movw	r22, r12
     246:	0e 94 21 0b 	call	0x1642	; 0x1642 <__mulsf3>
     24a:	9b 01       	movw	r18, r22
     24c:	ac 01       	movw	r20, r24
     24e:	c5 01       	movw	r24, r10
     250:	b4 01       	movw	r22, r8
     252:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__addsf3>
     256:	4b 01       	movw	r8, r22
     258:	5c 01       	movw	r10, r24
     25a:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <myrobot+0x11>
     25e:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <myrobot+0x12>
     262:	40 91 bb 02 	lds	r20, 0x02BB	; 0x8002bb <myrobot+0x13>
     266:	50 91 bc 02 	lds	r21, 0x02BC	; 0x8002bc <myrobot+0x14>
     26a:	c7 01       	movw	r24, r14
     26c:	b6 01       	movw	r22, r12
     26e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__subsf3>
     272:	20 91 b1 02 	lds	r18, 0x02B1	; 0x8002b1 <myrobot+0x9>
     276:	30 91 b2 02 	lds	r19, 0x02B2	; 0x8002b2 <myrobot+0xa>
     27a:	40 91 b3 02 	lds	r20, 0x02B3	; 0x8002b3 <myrobot+0xb>
     27e:	50 91 b4 02 	lds	r21, 0x02B4	; 0x8002b4 <myrobot+0xc>
     282:	0e 94 21 0b 	call	0x1642	; 0x1642 <__mulsf3>
     286:	9b 01       	movw	r18, r22
     288:	ac 01       	movw	r20, r24
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__addsf3>
     292:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixsfsi>

    // Store error for the next iteration
    myrobot.lastError = error;
     296:	c0 92 b9 02 	sts	0x02B9, r12	; 0x8002b9 <myrobot+0x11>
     29a:	d0 92 ba 02 	sts	0x02BA, r13	; 0x8002ba <myrobot+0x12>
     29e:	e0 92 bb 02 	sts	0x02BB, r14	; 0x8002bb <myrobot+0x13>
     2a2:	f0 92 bc 02 	sts	0x02BC, r15	; 0x8002bc <myrobot+0x14>

    // Adjust motors
    myrobot.lspeed = constrain((motorSpeed - adjustment), -100 , 100);
     2a6:	9e 01       	movw	r18, r28
     2a8:	26 1b       	sub	r18, r22
     2aa:	37 0b       	sbc	r19, r23
     2ac:	25 36       	cpi	r18, 0x65	; 101
     2ae:	31 05       	cpc	r19, r1
     2b0:	14 f0       	brlt	.+4      	; 0x2b6 <pidControl+0x15e>
     2b2:	24 e6       	ldi	r18, 0x64	; 100
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	2c 39       	cpi	r18, 0x9C	; 156
     2b8:	4f ef       	ldi	r20, 0xFF	; 255
     2ba:	34 07       	cpc	r19, r20
     2bc:	14 f4       	brge	.+4      	; 0x2c2 <pidControl+0x16a>
     2be:	2c e9       	ldi	r18, 0x9C	; 156
     2c0:	3f ef       	ldi	r19, 0xFF	; 255
     2c2:	30 93 ab 02 	sts	0x02AB, r19	; 0x8002ab <myrobot+0x3>
     2c6:	20 93 aa 02 	sts	0x02AA, r18	; 0x8002aa <myrobot+0x2>
    myrobot.rspeed = constrain((motorSpeed + adjustment), -100 , 100);
     2ca:	ae 01       	movw	r20, r28
     2cc:	46 0f       	add	r20, r22
     2ce:	57 1f       	adc	r21, r23
     2d0:	45 36       	cpi	r20, 0x65	; 101
     2d2:	51 05       	cpc	r21, r1
     2d4:	14 f0       	brlt	.+4      	; 0x2da <pidControl+0x182>
     2d6:	44 e6       	ldi	r20, 0x64	; 100
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	4c 39       	cpi	r20, 0x9C	; 156
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	58 07       	cpc	r21, r24
     2e0:	14 f4       	brge	.+4      	; 0x2e6 <pidControl+0x18e>
     2e2:	4c e9       	ldi	r20, 0x9C	; 156
     2e4:	5f ef       	ldi	r21, 0xFF	; 255
     2e6:	50 93 a9 02 	sts	0x02A9, r21	; 0x8002a9 <myrobot+0x1>
     2ea:	40 93 a8 02 	sts	0x02A8, r20	; 0x8002a8 <myrobot>
    

    myrobot.prevLeftSpeed = myrobot.lspeed;
     2ee:	30 93 c4 02 	sts	0x02C4, r19	; 0x8002c4 <myrobot+0x1c>
     2f2:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <myrobot+0x1b>
    myrobot.prevRightSpeed = myrobot.rspeed;
     2f6:	50 93 c6 02 	sts	0x02C6, r21	; 0x8002c6 <myrobot+0x1e>
     2fa:	40 93 c5 02 	sts	0x02C5, r20	; 0x8002c5 <myrobot+0x1d>
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	bf 90       	pop	r11
     30c:	af 90       	pop	r10
     30e:	9f 90       	pop	r9
     310:	8f 90       	pop	r8
     312:	08 95       	ret
    if (myrobot.inRoundabout == 1) {
        motorSpeed = 40;
        myrobot.KP = DEFAULT_KP * 1.3;
    } else {
        motorSpeed = DEFAULT_MOTOR_SPEED;
        myrobot.KP = DEFAULT_KP; 
     314:	4f e8       	ldi	r20, 0x8F	; 143
     316:	52 ec       	ldi	r21, 0xC2	; 194
     318:	65 e7       	ldi	r22, 0x75	; 117
     31a:	7d e3       	ldi	r23, 0x3D	; 61
     31c:	40 93 ad 02 	sts	0x02AD, r20	; 0x8002ad <myrobot+0x5>
     320:	50 93 ae 02 	sts	0x02AE, r21	; 0x8002ae <myrobot+0x6>
     324:	60 93 af 02 	sts	0x02AF, r22	; 0x8002af <myrobot+0x7>
     328:	70 93 b0 02 	sts	0x02B0, r23	; 0x8002b0 <myrobot+0x8>

    if (myrobot.inRoundabout == 1) {
        motorSpeed = 40;
        myrobot.KP = DEFAULT_KP * 1.3;
    } else {
        motorSpeed = DEFAULT_MOTOR_SPEED;
     32c:	c2 e3       	ldi	r28, 0x32	; 50
     32e:	d0 e0       	ldi	r29, 0x00	; 0
     330:	33 cf       	rjmp	.-410    	; 0x198 <pidControl+0x40>

00000332 <Navig>:
		// 	myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
        //     myrobot.lspeed   =  LOW_SPEED;
		// }


        if (myrobot.obstacle == 1) {
     332:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <myrobot+0x4>
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	49 f4       	brne	.+18     	; 0x34c <Navig+0x1a>
            myrobot.lspeed = STOP_SPEED;
     33a:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <myrobot+0x3>
     33e:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <myrobot+0x2>
            myrobot.rspeed = STOP_SPEED;
     342:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <myrobot+0x1>
     346:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <myrobot>
     34a:	f3 cf       	rjmp	.-26     	; 0x332 <Navig>
        } else {

            int sense = myrobot.goal;

            int sensorValue = robo_lineSensor();
     34c:	0e 94 08 03 	call	0x610	; 0x610 <robo_lineSensor>

            if(sensorValue == 100) {
     350:	84 36       	cpi	r24, 0x64	; 100
     352:	91 05       	cpc	r25, r1
     354:	61 f0       	breq	.+24     	; 0x36e <Navig+0x3c>
     356:	87 30       	cpi	r24, 0x07	; 7
     358:	91 05       	cpc	r25, r1
     35a:	88 f4       	brcc	.+34     	; 0x37e <Navig+0x4c>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	fc 01       	movw	r30, r24
     362:	e8 5f       	subi	r30, 0xF8	; 248
     364:	fd 4f       	sbci	r31, 0xFD	; 253
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01

                    default: sense = 1000;
                            break;
                }

                pidControl(sense);
     36a:	0e 94 ac 00 	call	0x158	; 0x158 <pidControl>

            }

            OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
     36e:	2a e0       	ldi	r18, 0x0A	; 10
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	0e 94 b1 08 	call	0x1162	; 0x1162 <OSTimeDlyHMSM>
     37c:	da cf       	rjmp	.-76     	; 0x332 <Navig>

            int sense = myrobot.goal;

            int sensorValue = robo_lineSensor();

            if(sensorValue == 100) {
     37e:	88 ee       	ldi	r24, 0xE8	; 232
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	f3 cf       	rjmp	.-26     	; 0x36a <Navig+0x38>

00000384 <ADC_init>:
     384:	80 e4       	ldi	r24, 0x40	; 64
     386:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     38a:	86 e8       	ldi	r24, 0x86	; 134
     38c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     390:	08 95       	ret

00000392 <ADC_read>:
     392:	f8 94       	cli
     394:	80 64       	ori	r24, 0x40	; 64
     396:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     39a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     39e:	80 64       	ori	r24, 0x40	; 64
     3a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3a8:	84 ff       	sbrs	r24, 4
     3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <ADC_read+0x12>
     3ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3b0:	80 61       	ori	r24, 0x10	; 16
     3b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3b6:	78 94       	sei
     3b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     3bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     3c0:	93 70       	andi	r25, 0x03	; 3
     3c2:	08 95       	ret

000003c4 <PWM8_write>:
     3c4:	81 11       	cpse	r24, r1
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <PWM8_write+0xe>
     3c8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3cc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     3d0:	08 95       	ret
     3d2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     3d6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     3da:	08 95       	ret

000003dc <motor_init>:
     3dc:	8a b1       	in	r24, 0x0a	; 10
     3de:	80 6f       	ori	r24, 0xF0	; 240
     3e0:	8a b9       	out	0x0a, r24	; 10
     3e2:	8b b1       	in	r24, 0x0b	; 11
     3e4:	8f 70       	andi	r24, 0x0F	; 15
     3e6:	8b b9       	out	0x0b, r24	; 11
     3e8:	81 ea       	ldi	r24, 0xA1	; 161
     3ea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     3f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     3f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     3fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     400:	a8 e8       	ldi	r26, 0x88	; 136
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	1c 92       	st	X, r1
     406:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     40a:	ea e8       	ldi	r30, 0x8A	; 138
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	10 82       	st	Z, r1
     410:	84 b1       	in	r24, 0x04	; 4
     412:	86 60       	ori	r24, 0x06	; 6
     414:	84 b9       	out	0x04, r24	; 4
     416:	11 96       	adiw	r26, 0x01	; 1
     418:	1c 92       	st	X, r1
     41a:	1e 92       	st	-X, r1
     41c:	11 82       	std	Z+1, r1	; 0x01
     41e:	10 82       	st	Z, r1
     420:	08 95       	ret

00000422 <motor_set_speed>:
     422:	77 ff       	sbrs	r23, 7
     424:	02 c0       	rjmp	.+4      	; 0x42a <motor_set_speed+0x8>
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	65 36       	cpi	r22, 0x65	; 101
     42c:	71 05       	cpc	r23, r1
     42e:	14 f0       	brlt	.+4      	; 0x434 <motor_set_speed+0x12>
     430:	64 e6       	ldi	r22, 0x64	; 100
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	9b 01       	movw	r18, r22
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	75 95       	asr	r23
     43c:	67 95       	ror	r22
     43e:	62 0f       	add	r22, r18
     440:	73 1f       	adc	r23, r19
     442:	81 11       	cpse	r24, r1
     444:	09 c0       	rjmp	.+18     	; 0x458 <motor_set_speed+0x36>
     446:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     44a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     44e:	70 93 4c 04 	sts	0x044C, r23	; 0x80044c <rightWst+0x1>
     452:	60 93 4b 04 	sts	0x044B, r22	; 0x80044b <rightWst>
     456:	08 95       	ret
     458:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     45c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     460:	70 93 50 04 	sts	0x0450, r23	; 0x800450 <leftWst+0x1>
     464:	60 93 4f 04 	sts	0x044F, r22	; 0x80044f <leftWst>
     468:	08 95       	ret

0000046a <motor_set_dir>:
     46a:	cf 93       	push	r28
     46c:	c6 2f       	mov	r28, r22
     46e:	26 2f       	mov	r18, r22
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	81 11       	cpse	r24, r1
     474:	2b c0       	rjmp	.+86     	; 0x4cc <motor_set_dir+0x62>
     476:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <rightWst+0x2>
     47a:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <rightWst+0x3>
     47e:	82 17       	cp	r24, r18
     480:	93 07       	cpc	r25, r19
     482:	59 f0       	breq	.+22     	; 0x49a <motor_set_dir+0x30>
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 11 02 	call	0x422	; 0x422 <motor_set_speed>
     48e:	8f e9       	ldi	r24, 0x9F	; 159
     490:	9f e0       	ldi	r25, 0x0F	; 15
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <motor_set_dir+0x28>
     496:	00 c0       	rjmp	.+0      	; 0x498 <motor_set_dir+0x2e>
     498:	00 00       	nop
     49a:	c1 11       	cpse	r28, r1
     49c:	0e c0       	rjmp	.+28     	; 0x4ba <motor_set_dir+0x50>
     49e:	5e 98       	cbi	0x0b, 6	; 11
     4a0:	5f 9a       	sbi	0x0b, 7	; 11
     4a2:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <rightWst+0x3>
     4a6:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <rightWst+0x2>
     4aa:	8f e3       	ldi	r24, 0x3F	; 63
     4ac:	9c e9       	ldi	r25, 0x9C	; 156
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <motor_set_dir+0x44>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <motor_set_dir+0x4a>
     4b4:	00 00       	nop
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret
     4ba:	5e 9a       	sbi	0x0b, 6	; 11
     4bc:	5f 98       	cbi	0x0b, 7	; 11
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <rightWst+0x3>
     4c6:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <rightWst+0x2>
     4ca:	ef cf       	rjmp	.-34     	; 0x4aa <motor_set_dir+0x40>
     4cc:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <leftWst+0x2>
     4d0:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <leftWst+0x3>
     4d4:	82 17       	cp	r24, r18
     4d6:	93 07       	cpc	r25, r19
     4d8:	59 f0       	breq	.+22     	; 0x4f0 <motor_set_dir+0x86>
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 11 02 	call	0x422	; 0x422 <motor_set_speed>
     4e4:	8f e9       	ldi	r24, 0x9F	; 159
     4e6:	9f e0       	ldi	r25, 0x0F	; 15
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <motor_set_dir+0x7e>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <motor_set_dir+0x84>
     4ee:	00 00       	nop
     4f0:	c1 11       	cpse	r28, r1
     4f2:	07 c0       	rjmp	.+14     	; 0x502 <motor_set_dir+0x98>
     4f4:	5c 9a       	sbi	0x0b, 4	; 11
     4f6:	5d 98       	cbi	0x0b, 5	; 11
     4f8:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <leftWst+0x3>
     4fc:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <leftWst+0x2>
     500:	d4 cf       	rjmp	.-88     	; 0x4aa <motor_set_dir+0x40>
     502:	5c 98       	cbi	0x0b, 4	; 11
     504:	5d 9a       	sbi	0x0b, 5	; 11
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <leftWst+0x3>
     50e:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <leftWst+0x2>
     512:	cb cf       	rjmp	.-106    	; 0x4aa <motor_set_dir+0x40>

00000514 <robo_motorSpeed>:
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	8b 01       	movw	r16, r22
     520:	97 ff       	sbrs	r25, 7
     522:	1c c0       	rjmp	.+56     	; 0x55c <robo_motorSpeed+0x48>
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	0e 94 35 02 	call	0x46a	; 0x46a <motor_set_dir>
     52c:	d1 95       	neg	r29
     52e:	c1 95       	neg	r28
     530:	d1 09       	sbc	r29, r1
     532:	17 ff       	sbrs	r17, 7
     534:	18 c0       	rjmp	.+48     	; 0x566 <robo_motorSpeed+0x52>
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 35 02 	call	0x46a	; 0x46a <motor_set_dir>
     53e:	11 95       	neg	r17
     540:	01 95       	neg	r16
     542:	11 09       	sbc	r17, r1
     544:	b8 01       	movw	r22, r16
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 11 02 	call	0x422	; 0x422 <motor_set_speed>
     54c:	be 01       	movw	r22, r28
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	0c 94 11 02 	jmp	0x422	; 0x422 <motor_set_speed>
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 35 02 	call	0x46a	; 0x46a <motor_set_dir>
     564:	e6 cf       	rjmp	.-52     	; 0x532 <robo_motorSpeed+0x1e>
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 35 02 	call	0x46a	; 0x46a <motor_set_dir>
     56e:	ea cf       	rjmp	.-44     	; 0x544 <robo_motorSpeed+0x30>

00000570 <USART0_init>:
     570:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     574:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     578:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     57c:	88 e1       	ldi	r24, 0x18	; 24
     57e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     582:	86 e0       	ldi	r24, 0x06	; 6
     584:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     588:	08 95       	ret

0000058a <cputchar>:
     58a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     58e:	95 ff       	sbrs	r25, 5
     590:	fc cf       	rjmp	.-8      	; 0x58a <cputchar>
     592:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     596:	08 95       	ret

00000598 <cgetchar>:
     598:	cf 93       	push	r28
     59a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     59e:	87 ff       	sbrs	r24, 7
     5a0:	fc cf       	rjmp	.-8      	; 0x59a <cgetchar+0x2>
     5a2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     5a6:	8c 2f       	mov	r24, r28
     5a8:	0e 94 c5 02 	call	0x58a	; 0x58a <cputchar>
     5ac:	8c 2f       	mov	r24, r28
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <cputs>:
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
     5b8:	89 91       	ld	r24, Y+
     5ba:	81 11       	cpse	r24, r1
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <cputs+0x12>
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret
     5c4:	0e 94 c5 02 	call	0x58a	; 0x58a <cputchar>
     5c8:	f7 cf       	rjmp	.-18     	; 0x5b8 <cputs+0x6>

000005ca <robo_proxSensor>:
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_read>
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	84 36       	cpi	r24, 0x64	; 100
     5d6:	91 05       	cpc	r25, r1
     5d8:	10 f0       	brcs	.+4      	; 0x5de <robo_proxSensor+0x14>
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	c9 01       	movw	r24, r18
     5e0:	08 95       	ret

000005e2 <robo_lightSensor>:
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_read>
     5e8:	2b ef       	ldi	r18, 0xFB	; 251
     5ea:	ac 01       	movw	r20, r24
     5ec:	24 03       	mulsu	r18, r20
     5ee:	c0 01       	movw	r24, r0
     5f0:	25 9f       	mul	r18, r21
     5f2:	90 0d       	add	r25, r0
     5f4:	11 24       	eor	r1, r1
     5f6:	85 50       	subi	r24, 0x05	; 5
     5f8:	9c 4e       	sbci	r25, 0xEC	; 236
     5fa:	63 e3       	ldi	r22, 0x33	; 51
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	0e 94 a0 09 	call	0x1340	; 0x1340 <__divmodhi4>
     602:	cb 01       	movw	r24, r22
     604:	65 36       	cpi	r22, 0x65	; 101
     606:	71 05       	cpc	r23, r1
     608:	14 f0       	brlt	.+4      	; 0x60e <robo_lightSensor+0x2c>
     60a:	84 e6       	ldi	r24, 0x64	; 100
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	08 95       	ret

00000610 <robo_lineSensor>:
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	c0 e0       	ldi	r28, 0x00	; 0
     616:	d1 e0       	ldi	r29, 0x01	; 1
     618:	cc 0f       	add	r28, r28
     61a:	8d 2f       	mov	r24, r29
     61c:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_read>
     620:	8c 32       	cpi	r24, 0x2C	; 44
     622:	91 40       	sbci	r25, 0x01	; 1
     624:	0c f4       	brge	.+2      	; 0x628 <robo_lineSensor+0x18>
     626:	c1 60       	ori	r28, 0x01	; 1
     628:	df 5f       	subi	r29, 0xFF	; 255
     62a:	d4 30       	cpi	r29, 0x04	; 4
     62c:	a9 f7       	brne	.-22     	; 0x618 <robo_lineSensor+0x8>
     62e:	8c 2f       	mov	r24, r28
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <robo_bumpSensorR>:
     638:	83 b1       	in	r24, 0x03	; 3
     63a:	82 95       	swap	r24
     63c:	8f 70       	andi	r24, 0x0F	; 15
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	89 27       	eor	r24, r25
     642:	81 70       	andi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	08 95       	ret

00000648 <robo_bumpSensorL>:
     648:	83 b1       	in	r24, 0x03	; 3
     64a:	86 95       	lsr	r24
     64c:	86 95       	lsr	r24
     64e:	86 95       	lsr	r24
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	89 27       	eor	r24, r25
     654:	81 70       	andi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	08 95       	ret

0000065a <robo_Honk>:
     65a:	5b 9a       	sbi	0x0b, 3	; 11
     65c:	2f ef       	ldi	r18, 0xFF	; 255
     65e:	85 ea       	ldi	r24, 0xA5	; 165
     660:	9e e0       	ldi	r25, 0x0E	; 14
     662:	21 50       	subi	r18, 0x01	; 1
     664:	80 40       	sbci	r24, 0x00	; 0
     666:	90 40       	sbci	r25, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <robo_Honk+0x8>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <robo_Honk+0x12>
     66c:	00 00       	nop
     66e:	5b 98       	cbi	0x0b, 3	; 11
     670:	2f ef       	ldi	r18, 0xFF	; 255
     672:	85 ea       	ldi	r24, 0xA5	; 165
     674:	9e e0       	ldi	r25, 0x0E	; 14
     676:	21 50       	subi	r18, 0x01	; 1
     678:	80 40       	sbci	r24, 0x00	; 0
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <robo_Honk+0x1c>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <robo_Honk+0x26>
     680:	00 00       	nop
     682:	08 95       	ret

00000684 <robo_checkBattery>:
     684:	85 e0       	ldi	r24, 0x05	; 5
     686:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_read>
     68a:	84 3f       	cpi	r24, 0xF4	; 244
     68c:	91 40       	sbci	r25, 0x01	; 1
     68e:	10 f4       	brcc	.+4      	; 0x694 <robo_checkBattery+0x10>
     690:	28 9a       	sbi	0x05, 0	; 5
     692:	08 95       	ret
     694:	28 98       	cbi	0x05, 0	; 5
     696:	08 95       	ret

00000698 <robo_goPressed>:
     698:	89 b1       	in	r24, 0x09	; 9
     69a:	82 fb       	bst	r24, 2
     69c:	88 27       	eor	r24, r24
     69e:	80 f9       	bld	r24, 0
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	89 27       	eor	r24, r25
     6a4:	08 95       	ret

000006a6 <robo_wait4goPress>:
     6a6:	0e 94 4c 03 	call	0x698	; 0x698 <robo_goPressed>
     6aa:	88 23       	and	r24, r24
     6ac:	e1 f3       	breq	.-8      	; 0x6a6 <robo_wait4goPress>
     6ae:	08 95       	ret

000006b0 <OS_ticks_init>:
     6b0:	f8 94       	cli
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	85 bd       	out	0x25, r24	; 37
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     6bc:	84 e6       	ldi	r24, 0x64	; 100
     6be:	86 bd       	out	0x26, r24	; 38
     6c0:	78 94       	sei
     6c2:	08 95       	ret

000006c4 <HAL_init>:
     6c4:	87 e6       	ldi	r24, 0x67	; 103
     6c6:	0e 94 b8 02 	call	0x570	; 0x570 <USART0_init>
     6ca:	0c 94 c2 01 	jmp	0x384	; 0x384 <ADC_init>

000006ce <robo_Setup>:
     6ce:	0e 94 62 03 	call	0x6c4	; 0x6c4 <HAL_init>
     6d2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <motor_init>
     6d6:	53 9a       	sbi	0x0a, 3	; 10
     6d8:	5b 98       	cbi	0x0b, 3	; 11
     6da:	20 9a       	sbi	0x04, 0	; 4
     6dc:	52 98       	cbi	0x0a, 2	; 10
     6de:	5a 9a       	sbi	0x0b, 2	; 11
     6e0:	24 98       	cbi	0x04, 4	; 4
     6e2:	23 98       	cbi	0x04, 3	; 4
     6e4:	85 b1       	in	r24, 0x05	; 5
     6e6:	88 61       	ori	r24, 0x18	; 24
     6e8:	85 b9       	out	0x05, r24	; 5
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 35 02 	call	0x46a	; 0x46a <motor_set_dir>
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 35 02 	call	0x46a	; 0x46a <motor_set_dir>
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	0c 94 8a 02 	jmp	0x514	; 0x514 <robo_motorSpeed>

00000706 <cprintf>:
     706:	4f 92       	push	r4
     708:	5f 92       	push	r5
     70a:	6f 92       	push	r6
     70c:	7f 92       	push	r7
     70e:	8f 92       	push	r8
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	de 01       	movw	r26, r28
     72c:	53 96       	adiw	r26, 0x13	; 19
     72e:	ed 91       	ld	r30, X+
     730:	fd 91       	ld	r31, X+
     732:	8d 01       	movw	r16, r26
     734:	5a e0       	ldi	r21, 0x0A	; 10
     736:	65 2e       	mov	r6, r21
     738:	71 2c       	mov	r7, r1
     73a:	80 81       	ld	r24, Z
     73c:	85 32       	cpi	r24, 0x25	; 37
     73e:	81 f4       	brne	.+32     	; 0x760 <cprintf+0x5a>
     740:	5f 01       	movw	r10, r30
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	a8 0e       	add	r10, r24
     746:	b1 1c       	adc	r11, r1
     748:	81 81       	ldd	r24, Z+1	; 0x01
     74a:	84 36       	cpi	r24, 0x64	; 100
     74c:	09 f4       	brne	.+2      	; 0x750 <cprintf+0x4a>
     74e:	50 c0       	rjmp	.+160    	; 0x7f0 <cprintf+0xea>
     750:	90 f4       	brcc	.+36     	; 0x776 <cprintf+0x70>
     752:	83 36       	cpi	r24, 0x63	; 99
     754:	61 f4       	brne	.+24     	; 0x76e <cprintf+0x68>
     756:	f8 01       	movw	r30, r16
     758:	80 81       	ld	r24, Z
     75a:	0e 5f       	subi	r16, 0xFE	; 254
     75c:	1f 4f       	sbci	r17, 0xFF	; 255
     75e:	07 c0       	rjmp	.+14     	; 0x76e <cprintf+0x68>
     760:	88 23       	and	r24, r24
     762:	09 f4       	brne	.+2      	; 0x766 <cprintf+0x60>
     764:	5d c0       	rjmp	.+186    	; 0x820 <cprintf+0x11a>
     766:	5f 01       	movw	r10, r30
     768:	9f ef       	ldi	r25, 0xFF	; 255
     76a:	a9 1a       	sub	r10, r25
     76c:	b9 0a       	sbc	r11, r25
     76e:	0e 94 c5 02 	call	0x58a	; 0x58a <cputchar>
     772:	f5 01       	movw	r30, r10
     774:	e2 cf       	rjmp	.-60     	; 0x73a <cprintf+0x34>
     776:	83 37       	cpi	r24, 0x73	; 115
     778:	71 f1       	breq	.+92     	; 0x7d6 <cprintf+0xd0>
     77a:	30 e1       	ldi	r19, 0x10	; 16
     77c:	83 2e       	mov	r8, r19
     77e:	91 2c       	mov	r9, r1
     780:	e1 2c       	mov	r14, r1
     782:	40 e1       	ldi	r20, 0x10	; 16
     784:	f4 2e       	mov	r15, r20
     786:	88 37       	cpi	r24, 0x78	; 120
     788:	91 f7       	brne	.-28     	; 0x76e <cprintf+0x68>
     78a:	f8 01       	movw	r30, r16
     78c:	c0 80       	ld	r12, Z
     78e:	d1 80       	ldd	r13, Z+1	; 0x01
     790:	0e 5f       	subi	r16, 0xFE	; 254
     792:	1f 4f       	sbci	r17, 0xFF	; 255
     794:	84 36       	cpi	r24, 0x64	; 100
     796:	59 f4       	brne	.+22     	; 0x7ae <cprintf+0xa8>
     798:	d7 fe       	sbrs	r13, 7
     79a:	06 c0       	rjmp	.+12     	; 0x7a8 <cprintf+0xa2>
     79c:	d1 94       	neg	r13
     79e:	c1 94       	neg	r12
     7a0:	d1 08       	sbc	r13, r1
     7a2:	8d e2       	ldi	r24, 0x2D	; 45
     7a4:	0e 94 c5 02 	call	0x58a	; 0x58a <cputchar>
     7a8:	ce 14       	cp	r12, r14
     7aa:	df 04       	cpc	r13, r15
     7ac:	48 f1       	brcs	.+82     	; 0x800 <cprintf+0xfa>
     7ae:	c6 01       	movw	r24, r12
     7b0:	b7 01       	movw	r22, r14
     7b2:	0e 94 8c 09 	call	0x1318	; 0x1318 <__udivmodhi4>
     7b6:	2c 01       	movw	r4, r24
     7b8:	6a 5e       	subi	r22, 0xEA	; 234
     7ba:	7d 4f       	sbci	r23, 0xFD	; 253
     7bc:	fb 01       	movw	r30, r22
     7be:	80 81       	ld	r24, Z
     7c0:	0e 94 c5 02 	call	0x58a	; 0x58a <cputchar>
     7c4:	62 01       	movw	r12, r4
     7c6:	c7 01       	movw	r24, r14
     7c8:	b4 01       	movw	r22, r8
     7ca:	0e 94 8c 09 	call	0x1318	; 0x1318 <__udivmodhi4>
     7ce:	7b 01       	movw	r14, r22
     7d0:	67 2b       	or	r22, r23
     7d2:	69 f7       	brne	.-38     	; 0x7ae <cprintf+0xa8>
     7d4:	ce cf       	rjmp	.-100    	; 0x772 <cprintf+0x6c>
     7d6:	f8 01       	movw	r30, r16
     7d8:	e0 80       	ld	r14, Z
     7da:	f1 80       	ldd	r15, Z+1	; 0x01
     7dc:	0e 5f       	subi	r16, 0xFE	; 254
     7de:	1f 4f       	sbci	r17, 0xFF	; 255
     7e0:	f7 01       	movw	r30, r14
     7e2:	81 91       	ld	r24, Z+
     7e4:	7f 01       	movw	r14, r30
     7e6:	88 23       	and	r24, r24
     7e8:	21 f2       	breq	.-120    	; 0x772 <cprintf+0x6c>
     7ea:	0e 94 c5 02 	call	0x58a	; 0x58a <cputchar>
     7ee:	f8 cf       	rjmp	.-16     	; 0x7e0 <cprintf+0xda>
     7f0:	9a e0       	ldi	r25, 0x0A	; 10
     7f2:	89 2e       	mov	r8, r25
     7f4:	91 2c       	mov	r9, r1
     7f6:	20 e1       	ldi	r18, 0x10	; 16
     7f8:	e2 2e       	mov	r14, r18
     7fa:	27 e2       	ldi	r18, 0x27	; 39
     7fc:	f2 2e       	mov	r15, r18
     7fe:	c5 cf       	rjmp	.-118    	; 0x78a <cprintf+0x84>
     800:	c7 01       	movw	r24, r14
     802:	b3 01       	movw	r22, r6
     804:	0e 94 8c 09 	call	0x1318	; 0x1318 <__udivmodhi4>
     808:	7b 01       	movw	r14, r22
     80a:	62 30       	cpi	r22, 0x02	; 2
     80c:	71 05       	cpc	r23, r1
     80e:	60 f6       	brcc	.-104    	; 0x7a8 <cprintf+0xa2>
     810:	c6 01       	movw	r24, r12
     812:	0e 94 8c 09 	call	0x1318	; 0x1318 <__udivmodhi4>
     816:	fb 01       	movw	r30, r22
     818:	ea 5e       	subi	r30, 0xEA	; 234
     81a:	fd 4f       	sbci	r31, 0xFD	; 253
     81c:	80 81       	ld	r24, Z
     81e:	a7 cf       	rjmp	.-178    	; 0x76e <cprintf+0x68>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	bf 90       	pop	r11
     836:	af 90       	pop	r10
     838:	9f 90       	pop	r9
     83a:	8f 90       	pop	r8
     83c:	7f 90       	pop	r7
     83e:	6f 90       	pop	r6
     840:	5f 90       	pop	r5
     842:	4f 90       	pop	r4
     844:	08 95       	ret

00000846 <OSStartHighRdy>:
     846:	00 91 54 04 	lds	r16, 0x0454	; 0x800454 <OSRunning>
     84a:	03 95       	inc	r16
     84c:	00 93 54 04 	sts	0x0454, r16	; 0x800454 <OSRunning>
     850:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <OSTCBHighRdy>
     854:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <OSTCBHighRdy+0x1>
     858:	c1 91       	ld	r28, Z+
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	d1 91       	ld	r29, Z+
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f 91       	pop	r16
     862:	0f bf       	out	0x3f, r16	; 63
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	bf 91       	pop	r27
     86e:	af 91       	pop	r26
     870:	9f 91       	pop	r25
     872:	8f 91       	pop	r24
     874:	7f 91       	pop	r23
     876:	6f 91       	pop	r22
     878:	5f 91       	pop	r21
     87a:	4f 91       	pop	r20
     87c:	3f 91       	pop	r19
     87e:	2f 91       	pop	r18
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	9f 90       	pop	r9
     892:	8f 90       	pop	r8
     894:	7f 90       	pop	r7
     896:	6f 90       	pop	r6
     898:	5f 90       	pop	r5
     89a:	4f 90       	pop	r4
     89c:	3f 90       	pop	r3
     89e:	2f 90       	pop	r2
     8a0:	1f 90       	pop	r1
     8a2:	0f 90       	pop	r0
     8a4:	08 95       	ret

000008a6 <OSCtxSw>:
     8a6:	0f 92       	push	r0
     8a8:	1f 92       	push	r1
     8aa:	2f 92       	push	r2
     8ac:	3f 92       	push	r3
     8ae:	4f 92       	push	r4
     8b0:	5f 92       	push	r5
     8b2:	6f 92       	push	r6
     8b4:	7f 92       	push	r7
     8b6:	8f 92       	push	r8
     8b8:	9f 92       	push	r9
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
     8e6:	0f b7       	in	r16, 0x3f	; 63
     8e8:	0f 93       	push	r16
     8ea:	e0 91 6c 04 	lds	r30, 0x046C	; 0x80046c <OSTCBCur>
     8ee:	f0 91 6d 04 	lds	r31, 0x046D	; 0x80046d <OSTCBCur+0x1>
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	c1 93       	st	Z+, r28
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	d1 93       	st	Z+, r29
     8fa:	00 91 59 04 	lds	r16, 0x0459	; 0x800459 <OSPrioHighRdy>
     8fe:	00 93 5a 04 	sts	0x045A, r16	; 0x80045a <OSPrioCur>
     902:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <OSTCBHighRdy>
     906:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <OSTCBHighRdy+0x1>
     90a:	e0 93 6c 04 	sts	0x046C, r30	; 0x80046c <OSTCBCur>
     90e:	f0 93 6d 04 	sts	0x046D, r31	; 0x80046d <OSTCBCur+0x1>
     912:	c1 91       	ld	r28, Z+
     914:	cd bf       	out	0x3d, r28	; 61
     916:	d1 91       	ld	r29, Z+
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f 91       	pop	r16
     91c:	0f bf       	out	0x3f, r16	; 63
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	9f 90       	pop	r9
     94c:	8f 90       	pop	r8
     94e:	7f 90       	pop	r7
     950:	6f 90       	pop	r6
     952:	5f 90       	pop	r5
     954:	4f 90       	pop	r4
     956:	3f 90       	pop	r3
     958:	2f 90       	pop	r2
     95a:	1f 90       	pop	r1
     95c:	0f 90       	pop	r0
     95e:	08 95       	ret

00000960 <OSIntCtxSw>:
     960:	00 91 59 04 	lds	r16, 0x0459	; 0x800459 <OSPrioHighRdy>
     964:	00 93 5a 04 	sts	0x045A, r16	; 0x80045a <OSPrioCur>
     968:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <OSTCBHighRdy>
     96c:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <OSTCBHighRdy+0x1>
     970:	e0 93 6c 04 	sts	0x046C, r30	; 0x80046c <OSTCBCur>
     974:	f0 93 6d 04 	sts	0x046D, r31	; 0x80046d <OSTCBCur+0x1>
     978:	c1 91       	ld	r28, Z+
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	d1 91       	ld	r29, Z+
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f 91       	pop	r16
     982:	0f bf       	out	0x3f, r16	; 63
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	bf 90       	pop	r11
     9ae:	af 90       	pop	r10
     9b0:	9f 90       	pop	r9
     9b2:	8f 90       	pop	r8
     9b4:	7f 90       	pop	r7
     9b6:	6f 90       	pop	r6
     9b8:	5f 90       	pop	r5
     9ba:	4f 90       	pop	r4
     9bc:	3f 90       	pop	r3
     9be:	2f 90       	pop	r2
     9c0:	1f 90       	pop	r1
     9c2:	0f 90       	pop	r0
     9c4:	08 95       	ret

000009c6 <OSTickISR>:
     9c6:	0f 92       	push	r0
     9c8:	1f 92       	push	r1
     9ca:	2f 92       	push	r2
     9cc:	3f 92       	push	r3
     9ce:	4f 92       	push	r4
     9d0:	5f 92       	push	r5
     9d2:	6f 92       	push	r6
     9d4:	7f 92       	push	r7
     9d6:	8f 92       	push	r8
     9d8:	9f 92       	push	r9
     9da:	af 92       	push	r10
     9dc:	bf 92       	push	r11
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
     a06:	0f b7       	in	r16, 0x3f	; 63
     a08:	00 68       	ori	r16, 0x80	; 128
     a0a:	0f 93       	push	r16
     a0c:	00 91 6b 04 	lds	r16, 0x046B	; 0x80046b <OSIntNesting>
     a10:	03 95       	inc	r16
     a12:	00 93 6b 04 	sts	0x046B, r16	; 0x80046b <OSIntNesting>
     a16:	01 30       	cpi	r16, 0x01	; 1
     a18:	41 f4       	brne	.+16     	; 0xa2a <_not_first_int>
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	e0 91 6c 04 	lds	r30, 0x046C	; 0x80046c <OSTCBCur>
     a22:	f0 91 6d 04 	lds	r31, 0x046D	; 0x80046d <OSTCBCur+0x1>
     a26:	c1 93       	st	Z+, r28
     a28:	d1 93       	st	Z+, r29

00000a2a <_not_first_int>:
     a2a:	04 e6       	ldi	r16, 0x64	; 100
     a2c:	06 bd       	out	0x26, r16	; 38
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	1f 2e       	mov	r1, r31
     a32:	78 94       	sei
     a34:	0e 94 46 06 	call	0xc8c	; 0xc8c <OSTimeTick>
     a38:	00 00       	nop
     a3a:	0e 94 b9 05 	call	0xb72	; 0xb72 <OSIntExit>
     a3e:	0f 91       	pop	r16
     a40:	0f bf       	out	0x3f, r16	; 63
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	bf 91       	pop	r27
     a4c:	af 91       	pop	r26
     a4e:	9f 91       	pop	r25
     a50:	8f 91       	pop	r24
     a52:	7f 91       	pop	r23
     a54:	6f 91       	pop	r22
     a56:	5f 91       	pop	r21
     a58:	4f 91       	pop	r20
     a5a:	3f 91       	pop	r19
     a5c:	2f 91       	pop	r18
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	ff 90       	pop	r15
     a64:	ef 90       	pop	r14
     a66:	df 90       	pop	r13
     a68:	cf 90       	pop	r12
     a6a:	bf 90       	pop	r11
     a6c:	af 90       	pop	r10
     a6e:	9f 90       	pop	r9
     a70:	8f 90       	pop	r8
     a72:	7f 90       	pop	r7
     a74:	6f 90       	pop	r6
     a76:	5f 90       	pop	r5
     a78:	4f 90       	pop	r4
     a7a:	3f 90       	pop	r3
     a7c:	2f 90       	pop	r2
     a7e:	1f 90       	pop	r1
     a80:	0f 90       	pop	r0
     a82:	08 95       	ret

00000a84 <OSTaskStkInit>:
     a84:	fa 01       	movw	r30, r20
     a86:	80 83       	st	Z, r24
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	90 83       	st	Z, r25
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	10 82       	st	Z, r1
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	10 82       	st	Z, r1
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	10 82       	st	Z, r1
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	10 82       	st	Z, r1
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	10 82       	st	Z, r1
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	10 82       	st	Z, r1
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	10 82       	st	Z, r1
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	10 82       	st	Z, r1
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	10 82       	st	Z, r1
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	10 82       	st	Z, r1
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	10 82       	st	Z, r1
     ab8:	31 97       	sbiw	r30, 0x01	; 1
     aba:	10 82       	st	Z, r1
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	10 82       	st	Z, r1
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	10 82       	st	Z, r1
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	10 82       	st	Z, r1
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	10 82       	st	Z, r1
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	10 82       	st	Z, r1
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	10 82       	st	Z, r1
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	10 82       	st	Z, r1
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	10 82       	st	Z, r1
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	10 82       	st	Z, r1
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	10 82       	st	Z, r1
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	10 82       	st	Z, r1
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	10 82       	st	Z, r1
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	60 83       	st	Z, r22
     af0:	31 97       	sbiw	r30, 0x01	; 1
     af2:	70 83       	st	Z, r23
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	10 82       	st	Z, r1
     af8:	31 97       	sbiw	r30, 0x01	; 1
     afa:	10 82       	st	Z, r1
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	10 82       	st	Z, r1
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	10 82       	st	Z, r1
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	10 82       	st	Z, r1
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	10 82       	st	Z, r1
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	80 e8       	ldi	r24, 0x80	; 128
     b10:	80 83       	st	Z, r24
     b12:	ca 01       	movw	r24, r20
     b14:	83 97       	sbiw	r24, 0x23	; 35
     b16:	08 95       	ret

00000b18 <OSTaskCreateHook>:
     b18:	08 95       	ret

00000b1a <OSTaskDelHook>:
     b1a:	08 95       	ret

00000b1c <OSTaskSwHook>:
     b1c:	08 95       	ret

00000b1e <OSTaskStatHook>:
     b1e:	08 95       	ret

00000b20 <OSTimeTickHook>:
     b20:	08 95       	ret

00000b22 <OSInitHookBegin>:
     b22:	08 95       	ret

00000b24 <OSInitHookEnd>:
     b24:	08 95       	ret

00000b26 <OSTaskIdleHook>:
     b26:	08 95       	ret

00000b28 <OSTCBInitHook>:
     b28:	08 95       	ret

00000b2a <OS_TaskIdle>:
     b2a:	f8 94       	cli
     b2c:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <OSIdleCtr>
     b30:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <OSIdleCtr+0x1>
     b34:	a0 91 57 04 	lds	r26, 0x0457	; 0x800457 <OSIdleCtr+0x2>
     b38:	b0 91 58 04 	lds	r27, 0x0458	; 0x800458 <OSIdleCtr+0x3>
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	a1 1d       	adc	r26, r1
     b40:	b1 1d       	adc	r27, r1
     b42:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <OSIdleCtr>
     b46:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <OSIdleCtr+0x1>
     b4a:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <OSIdleCtr+0x2>
     b4e:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <OSIdleCtr+0x3>
     b52:	78 94       	sei
     b54:	0e 94 93 05 	call	0xb26	; 0xb26 <OSTaskIdleHook>
     b58:	e8 cf       	rjmp	.-48     	; 0xb2a <OS_TaskIdle>

00000b5a <OSIntEnter>:
     b5a:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <OSRunning>
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	39 f4       	brne	.+14     	; 0xb70 <OSIntEnter+0x16>
     b62:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <OSIntNesting>
     b66:	8f 3f       	cpi	r24, 0xFF	; 255
     b68:	19 f0       	breq	.+6      	; 0xb70 <OSIntEnter+0x16>
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <OSIntNesting>
     b70:	08 95       	ret

00000b72 <OSIntExit>:
     b72:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <OSRunning>
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <OSIntExit+0xa>
     b7a:	4c c0       	rjmp	.+152    	; 0xc14 <OSIntExit+0xa2>
     b7c:	f8 94       	cli
     b7e:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <OSIntNesting>
     b82:	88 23       	and	r24, r24
     b84:	19 f0       	breq	.+6      	; 0xb8c <OSIntExit+0x1a>
     b86:	81 50       	subi	r24, 0x01	; 1
     b88:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <OSIntNesting>
     b8c:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <OSIntNesting>
     b90:	81 11       	cpse	r24, r1
     b92:	3f c0       	rjmp	.+126    	; 0xc12 <OSIntExit+0xa0>
     b94:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <OSLockNesting>
     b98:	81 11       	cpse	r24, r1
     b9a:	3b c0       	rjmp	.+118    	; 0xc12 <OSIntExit+0xa0>
     b9c:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <OSRdyGrp>
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	e0 50       	subi	r30, 0x00	; 0
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	e0 81       	ld	r30, Z
     ba8:	e0 93 6a 04 	sts	0x046A, r30	; 0x80046a <OSIntExitY>
     bac:	ae 2f       	mov	r26, r30
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	a9 59       	subi	r26, 0x99	; 153
     bb2:	bb 4f       	sbci	r27, 0xFB	; 251
     bb4:	ac 91       	ld	r26, X
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	a0 50       	subi	r26, 0x00	; 0
     bba:	bf 4f       	sbci	r27, 0xFF	; 255
     bbc:	ee 0f       	add	r30, r30
     bbe:	ee 0f       	add	r30, r30
     bc0:	ee 0f       	add	r30, r30
     bc2:	8c 91       	ld	r24, X
     bc4:	e8 0f       	add	r30, r24
     bc6:	e0 93 59 04 	sts	0x0459, r30	; 0x800459 <OSPrioHighRdy>
     bca:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <OSPrioCur>
     bce:	e8 17       	cp	r30, r24
     bd0:	01 f1       	breq	.+64     	; 0xc12 <OSIntExit+0xa0>
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	e3 55       	subi	r30, 0x53	; 83
     bda:	fa 4f       	sbci	r31, 0xFA	; 250
     bdc:	80 81       	ld	r24, Z
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <OSTCBHighRdy+0x1>
     be4:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <OSTCBHighRdy>
     be8:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <OSCtxSwCtr>
     bec:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <OSCtxSwCtr+0x1>
     bf0:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <OSCtxSwCtr+0x2>
     bf4:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <OSCtxSwCtr+0x3>
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	a1 1d       	adc	r26, r1
     bfc:	b1 1d       	adc	r27, r1
     bfe:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <OSCtxSwCtr>
     c02:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <OSCtxSwCtr+0x1>
     c06:	a0 93 5f 04 	sts	0x045F, r26	; 0x80045f <OSCtxSwCtr+0x2>
     c0a:	b0 93 60 04 	sts	0x0460, r27	; 0x800460 <OSCtxSwCtr+0x3>
     c0e:	0e 94 b0 04 	call	0x960	; 0x960 <OSIntCtxSw>
     c12:	78 94       	sei
     c14:	08 95       	ret

00000c16 <OSSchedLock>:
     c16:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <OSRunning>
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	49 f4       	brne	.+18     	; 0xc30 <OSSchedLock+0x1a>
     c1e:	f8 94       	cli
     c20:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <OSLockNesting>
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	19 f0       	breq	.+6      	; 0xc2e <OSSchedLock+0x18>
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <OSLockNesting>
     c2e:	78 94       	sei
     c30:	08 95       	ret

00000c32 <OSStart>:
     c32:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <OSRunning>
     c36:	81 11       	cpse	r24, r1
     c38:	28 c0       	rjmp	.+80     	; 0xc8a <OSStart+0x58>
     c3a:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <OSRdyGrp>
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	e0 50       	subi	r30, 0x00	; 0
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	e0 81       	ld	r30, Z
     c46:	ae 2f       	mov	r26, r30
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	a9 59       	subi	r26, 0x99	; 153
     c4c:	bb 4f       	sbci	r27, 0xFB	; 251
     c4e:	ac 91       	ld	r26, X
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	a0 50       	subi	r26, 0x00	; 0
     c54:	bf 4f       	sbci	r27, 0xFF	; 255
     c56:	ee 0f       	add	r30, r30
     c58:	ee 0f       	add	r30, r30
     c5a:	ee 0f       	add	r30, r30
     c5c:	8c 91       	ld	r24, X
     c5e:	e8 0f       	add	r30, r24
     c60:	e0 93 59 04 	sts	0x0459, r30	; 0x800459 <OSPrioHighRdy>
     c64:	e0 93 5a 04 	sts	0x045A, r30	; 0x80045a <OSPrioCur>
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	e3 55       	subi	r30, 0x53	; 83
     c70:	fa 4f       	sbci	r31, 0xFA	; 250
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <OSTCBHighRdy+0x1>
     c7a:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <OSTCBHighRdy>
     c7e:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <OSTCBCur+0x1>
     c82:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <OSTCBCur>
     c86:	0c 94 23 04 	jmp	0x846	; 0x846 <OSStartHighRdy>
     c8a:	08 95       	ret

00000c8c <OSTimeTick>:
     c8c:	0e 94 90 05 	call	0xb20	; 0xb20 <OSTimeTickHook>
     c90:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <OSRunning>
     c94:	e0 91 5b 04 	lds	r30, 0x045B	; 0x80045b <OSTCBList>
     c98:	f0 91 5c 04 	lds	r31, 0x045C	; 0x80045c <OSTCBList+0x1>
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	01 f1       	breq	.+64     	; 0xce4 <OSTimeTick+0x58>
     ca4:	08 95       	ret
     ca6:	f8 94       	cli
     ca8:	86 81       	ldd	r24, Z+6	; 0x06
     caa:	97 81       	ldd	r25, Z+7	; 0x07
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	b1 f0       	breq	.+44     	; 0xcdc <OSTimeTick+0x50>
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	97 83       	std	Z+7, r25	; 0x07
     cb4:	86 83       	std	Z+6, r24	; 0x06
     cb6:	89 2b       	or	r24, r25
     cb8:	89 f4       	brne	.+34     	; 0xcdc <OSTimeTick+0x50>
     cba:	80 85       	ldd	r24, Z+8	; 0x08
     cbc:	83 fd       	sbrc	r24, 3
     cbe:	16 c0       	rjmp	.+44     	; 0xcec <OSTimeTick+0x60>
     cc0:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <OSRdyGrp>
     cc4:	95 85       	ldd	r25, Z+13	; 0x0d
     cc6:	89 2b       	or	r24, r25
     cc8:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <OSRdyGrp>
     ccc:	a3 85       	ldd	r26, Z+11	; 0x0b
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	a9 59       	subi	r26, 0x99	; 153
     cd2:	bb 4f       	sbci	r27, 0xFB	; 251
     cd4:	8c 91       	ld	r24, X
     cd6:	94 85       	ldd	r25, Z+12	; 0x0c
     cd8:	89 2b       	or	r24, r25
     cda:	8c 93       	st	X, r24
     cdc:	02 80       	ldd	r0, Z+2	; 0x02
     cde:	f3 81       	ldd	r31, Z+3	; 0x03
     ce0:	e0 2d       	mov	r30, r0
     ce2:	78 94       	sei
     ce4:	81 85       	ldd	r24, Z+9	; 0x09
     ce6:	80 31       	cpi	r24, 0x10	; 16
     ce8:	f1 f6       	brne	.-68     	; 0xca6 <OSTimeTick+0x1a>
     cea:	dc cf       	rjmp	.-72     	; 0xca4 <OSTimeTick+0x18>
     cec:	37 83       	std	Z+7, r19	; 0x07
     cee:	26 83       	std	Z+6, r18	; 0x06
     cf0:	f5 cf       	rjmp	.-22     	; 0xcdc <OSTimeTick+0x50>

00000cf2 <OSVersion>:
     cf2:	8c ef       	ldi	r24, 0xFC	; 252
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	08 95       	ret

00000cf8 <OS_Dummy>:
     cf8:	08 95       	ret

00000cfa <OS_Sched>:
     cfa:	f8 94       	cli
     cfc:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <OSIntNesting>
     d00:	81 11       	cpse	r24, r1
     d02:	3d c0       	rjmp	.+122    	; 0xd7e <OS_Sched+0x84>
     d04:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <OSLockNesting>
     d08:	81 11       	cpse	r24, r1
     d0a:	39 c0       	rjmp	.+114    	; 0xd7e <OS_Sched+0x84>
     d0c:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <OSRdyGrp>
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	e0 50       	subi	r30, 0x00	; 0
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	e0 81       	ld	r30, Z
     d18:	ae 2f       	mov	r26, r30
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	a9 59       	subi	r26, 0x99	; 153
     d1e:	bb 4f       	sbci	r27, 0xFB	; 251
     d20:	ac 91       	ld	r26, X
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	a0 50       	subi	r26, 0x00	; 0
     d26:	bf 4f       	sbci	r27, 0xFF	; 255
     d28:	ee 0f       	add	r30, r30
     d2a:	ee 0f       	add	r30, r30
     d2c:	ee 0f       	add	r30, r30
     d2e:	8c 91       	ld	r24, X
     d30:	e8 0f       	add	r30, r24
     d32:	e0 93 59 04 	sts	0x0459, r30	; 0x800459 <OSPrioHighRdy>
     d36:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <OSPrioCur>
     d3a:	e8 17       	cp	r30, r24
     d3c:	01 f1       	breq	.+64     	; 0xd7e <OS_Sched+0x84>
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	e3 55       	subi	r30, 0x53	; 83
     d46:	fa 4f       	sbci	r31, 0xFA	; 250
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <OSTCBHighRdy+0x1>
     d50:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <OSTCBHighRdy>
     d54:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <OSCtxSwCtr>
     d58:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <OSCtxSwCtr+0x1>
     d5c:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <OSCtxSwCtr+0x2>
     d60:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <OSCtxSwCtr+0x3>
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	a1 1d       	adc	r26, r1
     d68:	b1 1d       	adc	r27, r1
     d6a:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <OSCtxSwCtr>
     d6e:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <OSCtxSwCtr+0x1>
     d72:	a0 93 5f 04 	sts	0x045F, r26	; 0x80045f <OSCtxSwCtr+0x2>
     d76:	b0 93 60 04 	sts	0x0460, r27	; 0x800460 <OSCtxSwCtr+0x3>
     d7a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <OSCtxSw>
     d7e:	78 94       	sei
     d80:	08 95       	ret

00000d82 <OSSchedUnlock>:
     d82:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <OSRunning>
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 f4       	brne	.+36     	; 0xdae <OSSchedUnlock+0x2c>
     d8a:	f8 94       	cli
     d8c:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <OSLockNesting>
     d90:	88 23       	and	r24, r24
     d92:	61 f0       	breq	.+24     	; 0xdac <OSSchedUnlock+0x2a>
     d94:	81 50       	subi	r24, 0x01	; 1
     d96:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <OSLockNesting>
     d9a:	81 11       	cpse	r24, r1
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <OSSchedUnlock+0x2a>
     d9e:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <OSIntNesting>
     da2:	81 11       	cpse	r24, r1
     da4:	03 c0       	rjmp	.+6      	; 0xdac <OSSchedUnlock+0x2a>
     da6:	78 94       	sei
     da8:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <OS_Sched>
     dac:	78 94       	sei
     dae:	08 95       	ret

00000db0 <OSTimeDly.part.0>:
     db0:	ac 01       	movw	r20, r24
     db2:	f8 94       	cli
     db4:	a0 91 6c 04 	lds	r26, 0x046C	; 0x80046c <OSTCBCur>
     db8:	b0 91 6d 04 	lds	r27, 0x046D	; 0x80046d <OSTCBCur+0x1>
     dbc:	1b 96       	adiw	r26, 0x0b	; 11
     dbe:	ec 91       	ld	r30, X
     dc0:	1b 97       	sbiw	r26, 0x0b	; 11
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	1c 96       	adiw	r26, 0x0c	; 12
     dc6:	9c 91       	ld	r25, X
     dc8:	1c 97       	sbiw	r26, 0x0c	; 12
     dca:	90 95       	com	r25
     dcc:	e9 59       	subi	r30, 0x99	; 153
     dce:	fb 4f       	sbci	r31, 0xFB	; 251
     dd0:	80 81       	ld	r24, Z
     dd2:	98 23       	and	r25, r24
     dd4:	90 83       	st	Z, r25
     dd6:	91 11       	cpse	r25, r1
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <OSTimeDly.part.0+0x3e>
     dda:	1d 96       	adiw	r26, 0x0d	; 13
     ddc:	9c 91       	ld	r25, X
     dde:	1d 97       	sbiw	r26, 0x0d	; 13
     de0:	29 2f       	mov	r18, r25
     de2:	20 95       	com	r18
     de4:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <OSRdyGrp>
     de8:	92 23       	and	r25, r18
     dea:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <OSRdyGrp>
     dee:	17 96       	adiw	r26, 0x07	; 7
     df0:	5c 93       	st	X, r21
     df2:	4e 93       	st	-X, r20
     df4:	16 97       	sbiw	r26, 0x06	; 6
     df6:	78 94       	sei
     df8:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <OS_Sched>

00000dfc <OS_TCBInit>:
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	f8 94       	cli
     e04:	c0 91 61 04 	lds	r28, 0x0461	; 0x800461 <OSTCBFreeList>
     e08:	d0 91 62 04 	lds	r29, 0x0462	; 0x800462 <OSTCBFreeList+0x1>
     e0c:	20 97       	sbiw	r28, 0x00	; 0
     e0e:	09 f4       	brne	.+2      	; 0xe12 <OS_TCBInit+0x16>
     e10:	54 c0       	rjmp	.+168    	; 0xeba <OS_TCBInit+0xbe>
     e12:	18 2f       	mov	r17, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	9b 81       	ldd	r25, Y+3	; 0x03
     e18:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <OSTCBFreeList+0x1>
     e1c:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <OSTCBFreeList>
     e20:	78 94       	sei
     e22:	79 83       	std	Y+1, r23	; 0x01
     e24:	68 83       	st	Y, r22
     e26:	19 87       	std	Y+9, r17	; 0x09
     e28:	18 86       	std	Y+8, r1	; 0x08
     e2a:	1f 82       	std	Y+7, r1	; 0x07
     e2c:	1e 82       	std	Y+6, r1	; 0x06
     e2e:	1e 86       	std	Y+14, r1	; 0x0e
     e30:	e1 2f       	mov	r30, r17
     e32:	e6 95       	lsr	r30
     e34:	e6 95       	lsr	r30
     e36:	e6 95       	lsr	r30
     e38:	eb 87       	std	Y+11, r30	; 0x0b
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	e0 50       	subi	r30, 0x00	; 0
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 81       	ld	r24, Z
     e42:	8d 87       	std	Y+13, r24	; 0x0d
     e44:	e1 2f       	mov	r30, r17
     e46:	e7 70       	andi	r30, 0x07	; 7
     e48:	ea 87       	std	Y+10, r30	; 0x0a
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	e0 50       	subi	r30, 0x00	; 0
     e4e:	fe 4f       	sbci	r31, 0xFE	; 254
     e50:	80 81       	ld	r24, Z
     e52:	8c 87       	std	Y+12, r24	; 0x0c
     e54:	ce 01       	movw	r24, r28
     e56:	0e 94 94 05 	call	0xb28	; 0xb28 <OSTCBInitHook>
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 8c 05 	call	0xb18	; 0xb18 <OSTaskCreateHook>
     e60:	f8 94       	cli
     e62:	e1 2f       	mov	r30, r17
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	e3 55       	subi	r30, 0x53	; 83
     e6c:	fa 4f       	sbci	r31, 0xFA	; 250
     e6e:	d1 83       	std	Z+1, r29	; 0x01
     e70:	c0 83       	st	Z, r28
     e72:	e0 91 5b 04 	lds	r30, 0x045B	; 0x80045b <OSTCBList>
     e76:	f0 91 5c 04 	lds	r31, 0x045C	; 0x80045c <OSTCBList+0x1>
     e7a:	fb 83       	std	Y+3, r31	; 0x03
     e7c:	ea 83       	std	Y+2, r30	; 0x02
     e7e:	1d 82       	std	Y+5, r1	; 0x05
     e80:	1c 82       	std	Y+4, r1	; 0x04
     e82:	30 97       	sbiw	r30, 0x00	; 0
     e84:	11 f0       	breq	.+4      	; 0xe8a <OS_TCBInit+0x8e>
     e86:	d5 83       	std	Z+5, r29	; 0x05
     e88:	c4 83       	std	Z+4, r28	; 0x04
     e8a:	d0 93 5c 04 	sts	0x045C, r29	; 0x80045c <OSTCBList+0x1>
     e8e:	c0 93 5b 04 	sts	0x045B, r28	; 0x80045b <OSTCBList>
     e92:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <OSRdyGrp>
     e96:	9d 85       	ldd	r25, Y+13	; 0x0d
     e98:	89 2b       	or	r24, r25
     e9a:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <OSRdyGrp>
     e9e:	eb 85       	ldd	r30, Y+11	; 0x0b
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	e9 59       	subi	r30, 0x99	; 153
     ea4:	fb 4f       	sbci	r31, 0xFB	; 251
     ea6:	80 81       	ld	r24, Z
     ea8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eaa:	89 2b       	or	r24, r25
     eac:	80 83       	st	Z, r24
     eae:	78 94       	sei
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	08 95       	ret
     eba:	78 94       	sei
     ebc:	86 e4       	ldi	r24, 0x46	; 70
     ebe:	f9 cf       	rjmp	.-14     	; 0xeb2 <OS_TCBInit+0xb6>

00000ec0 <OSTaskCreate>:
     ec0:	9f 92       	push	r9
     ec2:	af 92       	push	r10
     ec4:	bf 92       	push	r11
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	f8 94       	cli
     ed8:	c2 2f       	mov	r28, r18
     eda:	d0 e0       	ldi	r29, 0x00	; 0
     edc:	cc 0f       	add	r28, r28
     ede:	dd 1f       	adc	r29, r29
     ee0:	c3 55       	subi	r28, 0x53	; 83
     ee2:	da 4f       	sbci	r29, 0xFA	; 250
     ee4:	e8 81       	ld	r30, Y
     ee6:	f9 81       	ldd	r31, Y+1	; 0x01
     ee8:	ef 2b       	or	r30, r31
     eea:	09 f0       	breq	.+2      	; 0xeee <OSTaskCreate+0x2e>
     eec:	3b c0       	rjmp	.+118    	; 0xf64 <OSTaskCreate+0xa4>
     eee:	92 2e       	mov	r9, r18
     ef0:	21 e0       	ldi	r18, 0x01	; 1
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	39 83       	std	Y+1, r19	; 0x01
     ef6:	28 83       	st	Y, r18
     ef8:	78 94       	sei
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	0e 94 42 05 	call	0xa84	; 0xa84 <OSTaskStkInit>
     f02:	b1 2c       	mov	r11, r1
     f04:	a1 2c       	mov	r10, r1
     f06:	d1 2c       	mov	r13, r1
     f08:	c1 2c       	mov	r12, r1
     f0a:	e1 2c       	mov	r14, r1
     f0c:	f1 2c       	mov	r15, r1
     f0e:	87 01       	movw	r16, r14
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	89 2d       	mov	r24, r9
     f1c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <OS_TCBInit>
     f20:	18 2f       	mov	r17, r24
     f22:	81 11       	cpse	r24, r1
     f24:	1a c0       	rjmp	.+52     	; 0xf5a <OSTaskCreate+0x9a>
     f26:	f8 94       	cli
     f28:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <OSTaskCtr>
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <OSTaskCtr>
     f32:	78 94       	sei
     f34:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <OSRunning>
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	11 f4       	brne	.+4      	; 0xf40 <OSTaskCreate+0x80>
     f3c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <OS_Sched>
     f40:	81 2f       	mov	r24, r17
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	08 95       	ret
     f5a:	f8 94       	cli
     f5c:	19 82       	std	Y+1, r1	; 0x01
     f5e:	18 82       	st	Y, r1
     f60:	78 94       	sei
     f62:	ee cf       	rjmp	.-36     	; 0xf40 <OSTaskCreate+0x80>
     f64:	78 94       	sei
     f66:	18 e2       	ldi	r17, 0x28	; 40
     f68:	eb cf       	rjmp	.-42     	; 0xf40 <OSTaskCreate+0x80>

00000f6a <OSInit>:
     f6a:	0e 94 91 05 	call	0xb22	; 0xb22 <OSInitHookBegin>
     f6e:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <OSIntNesting>
     f72:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <OSLockNesting>
     f76:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <OSTaskCtr>
     f7a:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <OSRunning>
     f7e:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <OSCtxSwCtr>
     f82:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <OSCtxSwCtr+0x1>
     f86:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <OSCtxSwCtr+0x2>
     f8a:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <OSCtxSwCtr+0x3>
     f8e:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <OSIdleCtr>
     f92:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <OSIdleCtr+0x1>
     f96:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <OSIdleCtr+0x2>
     f9a:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <OSIdleCtr+0x3>
     f9e:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <OSRdyGrp>
     fa2:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <OSRdyTbl>
     fa6:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <OSRdyTbl+0x1>
     faa:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <OSRdyTbl+0x2>
     fae:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <OSPrioCur>
     fb2:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <OSPrioHighRdy>
     fb6:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <OSTCBHighRdy+0x1>
     fba:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <OSTCBHighRdy>
     fbe:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <OSTCBCur+0x1>
     fc2:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <OSTCBCur>
     fc6:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <OSTCBList+0x1>
     fca:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <OSTCBList>
     fce:	ed ea       	ldi	r30, 0xAD	; 173
     fd0:	f5 e0       	ldi	r31, 0x05	; 5
     fd2:	11 92       	st	Z+, r1
     fd4:	11 92       	st	Z+, r1
     fd6:	85 e0       	ldi	r24, 0x05	; 5
     fd8:	ef 3c       	cpi	r30, 0xCF	; 207
     fda:	f8 07       	cpc	r31, r24
     fdc:	d1 f7       	brne	.-12     	; 0xfd2 <OSInit+0x68>
     fde:	ee ea       	ldi	r30, 0xAE	; 174
     fe0:	f4 e0       	ldi	r31, 0x04	; 4
     fe2:	cf 01       	movw	r24, r30
     fe4:	0f 96       	adiw	r24, 0x0f	; 15
     fe6:	93 83       	std	Z+3, r25	; 0x03
     fe8:	82 83       	std	Z+2, r24	; 0x02
     fea:	fc 01       	movw	r30, r24
     fec:	85 e0       	ldi	r24, 0x05	; 5
     fee:	ee 39       	cpi	r30, 0x9E	; 158
     ff0:	f8 07       	cpc	r31, r24
     ff2:	b9 f7       	brne	.-18     	; 0xfe2 <OSInit+0x78>
     ff4:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <OSTCBTbl+0xf3>
     ff8:	10 92 a0 05 	sts	0x05A0, r1	; 0x8005a0 <OSTCBTbl+0xf2>
     ffc:	8e ea       	ldi	r24, 0xAE	; 174
     ffe:	94 e0       	ldi	r25, 0x04	; 4
    1000:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <OSTCBFreeList+0x1>
    1004:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <OSTCBFreeList>
    1008:	20 e1       	ldi	r18, 0x10	; 16
    100a:	4d ea       	ldi	r20, 0xAD	; 173
    100c:	54 e0       	ldi	r21, 0x04	; 4
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	85 e9       	ldi	r24, 0x95	; 149
    1014:	95 e0       	ldi	r25, 0x05	; 5
    1016:	0e 94 60 07 	call	0xec0	; 0xec0 <OSTaskCreate>
    101a:	0c 94 92 05 	jmp	0xb24	; 0xb24 <OSInitHookEnd>

0000101e <OSTaskDel>:
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	f0 90 6b 04 	lds	r15, 0x046B	; 0x80046b <OSIntNesting>
    102c:	f1 10       	cpse	r15, r1
    102e:	76 c0       	rjmp	.+236    	; 0x111c <OSTaskDel+0xfe>
    1030:	f8 94       	cli
    1032:	8f 3f       	cpi	r24, 0xFF	; 255
    1034:	29 f4       	brne	.+10     	; 0x1040 <OSTaskDel+0x22>
    1036:	e0 91 6c 04 	lds	r30, 0x046C	; 0x80046c <OSTCBCur>
    103a:	f0 91 6d 04 	lds	r31, 0x046D	; 0x80046d <OSTCBCur+0x1>
    103e:	81 85       	ldd	r24, Z+9	; 0x09
    1040:	08 2f       	mov	r16, r24
    1042:	10 e0       	ldi	r17, 0x00	; 0
    1044:	00 0f       	add	r16, r16
    1046:	11 1f       	adc	r17, r17
    1048:	f8 01       	movw	r30, r16
    104a:	e3 55       	subi	r30, 0x53	; 83
    104c:	fa 4f       	sbci	r31, 0xFA	; 250
    104e:	c0 81       	ld	r28, Z
    1050:	d1 81       	ldd	r29, Z+1	; 0x01
    1052:	20 97       	sbiw	r28, 0x00	; 0
    1054:	09 f4       	brne	.+2      	; 0x1058 <OSTaskDel+0x3a>
    1056:	5e c0       	rjmp	.+188    	; 0x1114 <OSTaskDel+0xf6>
    1058:	eb 85       	ldd	r30, Y+11	; 0x0b
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	8c 85       	ldd	r24, Y+12	; 0x0c
    105e:	80 95       	com	r24
    1060:	e9 59       	subi	r30, 0x99	; 153
    1062:	fb 4f       	sbci	r31, 0xFB	; 251
    1064:	90 81       	ld	r25, Z
    1066:	89 23       	and	r24, r25
    1068:	80 83       	st	Z, r24
    106a:	81 11       	cpse	r24, r1
    106c:	08 c0       	rjmp	.+16     	; 0x107e <OSTaskDel+0x60>
    106e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1070:	98 2f       	mov	r25, r24
    1072:	90 95       	com	r25
    1074:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <OSRdyGrp>
    1078:	89 23       	and	r24, r25
    107a:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <OSRdyGrp>
    107e:	1f 82       	std	Y+7, r1	; 0x07
    1080:	1e 82       	std	Y+6, r1	; 0x06
    1082:	18 86       	std	Y+8, r1	; 0x08
    1084:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <OSLockNesting>
    1088:	8f 3f       	cpi	r24, 0xFF	; 255
    108a:	19 f0       	breq	.+6      	; 0x1092 <OSTaskDel+0x74>
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <OSLockNesting>
    1092:	78 94       	sei
    1094:	f8 94       	cli
    1096:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <OSLockNesting>
    109a:	88 23       	and	r24, r24
    109c:	19 f0       	breq	.+6      	; 0x10a4 <OSTaskDel+0x86>
    109e:	81 50       	subi	r24, 0x01	; 1
    10a0:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <OSLockNesting>
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <OSTaskDelHook>
    10aa:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <OSTaskCtr>
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <OSTaskCtr>
    10b4:	f8 01       	movw	r30, r16
    10b6:	e3 55       	subi	r30, 0x53	; 83
    10b8:	fa 4f       	sbci	r31, 0xFA	; 250
    10ba:	11 82       	std	Z+1, r1	; 0x01
    10bc:	10 82       	st	Z, r1
    10be:	ec 81       	ldd	r30, Y+4	; 0x04
    10c0:	fd 81       	ldd	r31, Y+5	; 0x05
    10c2:	aa 81       	ldd	r26, Y+2	; 0x02
    10c4:	bb 81       	ldd	r27, Y+3	; 0x03
    10c6:	30 97       	sbiw	r30, 0x00	; 0
    10c8:	e1 f4       	brne	.+56     	; 0x1102 <OSTaskDel+0xe4>
    10ca:	15 96       	adiw	r26, 0x05	; 5
    10cc:	1c 92       	st	X, r1
    10ce:	1e 92       	st	-X, r1
    10d0:	14 97       	sbiw	r26, 0x04	; 4
    10d2:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <OSTCBList+0x1>
    10d6:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <OSTCBList>
    10da:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <OSTCBFreeList>
    10de:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <OSTCBFreeList+0x1>
    10e2:	9b 83       	std	Y+3, r25	; 0x03
    10e4:	8a 83       	std	Y+2, r24	; 0x02
    10e6:	d0 93 62 04 	sts	0x0462, r29	; 0x800462 <OSTCBFreeList+0x1>
    10ea:	c0 93 61 04 	sts	0x0461, r28	; 0x800461 <OSTCBFreeList>
    10ee:	78 94       	sei
    10f0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <OS_Sched>
    10f4:	8f 2d       	mov	r24, r15
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	08 95       	ret
    1102:	b3 83       	std	Z+3, r27	; 0x03
    1104:	a2 83       	std	Z+2, r26	; 0x02
    1106:	aa 81       	ldd	r26, Y+2	; 0x02
    1108:	bb 81       	ldd	r27, Y+3	; 0x03
    110a:	15 96       	adiw	r26, 0x05	; 5
    110c:	fc 93       	st	X, r31
    110e:	ee 93       	st	-X, r30
    1110:	14 97       	sbiw	r26, 0x04	; 4
    1112:	e3 cf       	rjmp	.-58     	; 0x10da <OSTaskDel+0xbc>
    1114:	78 94       	sei
    1116:	9c e3       	ldi	r25, 0x3C	; 60
    1118:	f9 2e       	mov	r15, r25
    111a:	ec cf       	rjmp	.-40     	; 0x10f4 <OSTaskDel+0xd6>
    111c:	8f e3       	ldi	r24, 0x3F	; 63
    111e:	f8 2e       	mov	r15, r24
    1120:	e9 cf       	rjmp	.-46     	; 0x10f4 <OSTaskDel+0xd6>

00001122 <OSTaskDelReq>:
    1122:	8f 3f       	cpi	r24, 0xFF	; 255
    1124:	41 f4       	brne	.+16     	; 0x1136 <OSTaskDelReq+0x14>
    1126:	f8 94       	cli
    1128:	e0 91 6c 04 	lds	r30, 0x046C	; 0x80046c <OSTCBCur>
    112c:	f0 91 6d 04 	lds	r31, 0x046D	; 0x80046d <OSTCBCur+0x1>
    1130:	86 85       	ldd	r24, Z+14	; 0x0e
    1132:	78 94       	sei
    1134:	08 95       	ret
    1136:	f8 94       	cli
    1138:	e8 2f       	mov	r30, r24
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	e3 55       	subi	r30, 0x53	; 83
    1142:	fa 4f       	sbci	r31, 0xFA	; 250
    1144:	01 90       	ld	r0, Z+
    1146:	f0 81       	ld	r31, Z
    1148:	e0 2d       	mov	r30, r0
    114a:	8b e0       	ldi	r24, 0x0B	; 11
    114c:	30 97       	sbiw	r30, 0x00	; 0
    114e:	89 f3       	breq	.-30     	; 0x1132 <OSTaskDelReq+0x10>
    1150:	8e e3       	ldi	r24, 0x3E	; 62
    1152:	86 87       	std	Z+14, r24	; 0x0e
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	ed cf       	rjmp	.-38     	; 0x1132 <OSTaskDelReq+0x10>

00001158 <OSTimeDly>:
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	11 f0       	breq	.+4      	; 0x1160 <OSTimeDly+0x8>
    115c:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <OSTimeDly.part.0>
    1160:	08 95       	ret

00001162 <OSTimeDlyHMSM>:
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	81 11       	cpse	r24, r1
    116c:	0d c0       	rjmp	.+26     	; 0x1188 <OSTimeDlyHMSM+0x26>
    116e:	61 11       	cpse	r22, r1
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <OSTimeDlyHMSM+0x26>
    1172:	41 11       	cpse	r20, r1
    1174:	0c c0       	rjmp	.+24     	; 0x118e <OSTimeDlyHMSM+0x2c>
    1176:	21 15       	cp	r18, r1
    1178:	31 05       	cpc	r19, r1
    117a:	61 f4       	brne	.+24     	; 0x1194 <OSTimeDlyHMSM+0x32>
    117c:	84 e5       	ldi	r24, 0x54	; 84
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	08 95       	ret
    1188:	6c 33       	cpi	r22, 0x3C	; 60
    118a:	08 f0       	brcs	.+2      	; 0x118e <OSTimeDlyHMSM+0x2c>
    118c:	4f c0       	rjmp	.+158    	; 0x122c <OSTimeDlyHMSM+0xca>
    118e:	4c 33       	cpi	r20, 0x3C	; 60
    1190:	08 f0       	brcs	.+2      	; 0x1194 <OSTimeDlyHMSM+0x32>
    1192:	4e c0       	rjmp	.+156    	; 0x1230 <OSTimeDlyHMSM+0xce>
    1194:	28 3e       	cpi	r18, 0xE8	; 232
    1196:	93 e0       	ldi	r25, 0x03	; 3
    1198:	39 07       	cpc	r19, r25
    119a:	08 f0       	brcs	.+2      	; 0x119e <OSTimeDlyHMSM+0x3c>
    119c:	4b c0       	rjmp	.+150    	; 0x1234 <OSTimeDlyHMSM+0xd2>
    119e:	f9 01       	movw	r30, r18
    11a0:	58 2f       	mov	r21, r24
    11a2:	26 2f       	mov	r18, r22
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	ac e3       	ldi	r26, 0x3C	; 60
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__umulhisi3>
    11ae:	6b 01       	movw	r12, r22
    11b0:	7c 01       	movw	r14, r24
    11b2:	c4 0e       	add	r12, r20
    11b4:	d1 1c       	adc	r13, r1
    11b6:	e1 1c       	adc	r14, r1
    11b8:	f1 1c       	adc	r15, r1
    11ba:	25 2f       	mov	r18, r21
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	a0 e1       	ldi	r26, 0x10	; 16
    11c0:	be e0       	ldi	r27, 0x0E	; 14
    11c2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__umulhisi3>
    11c6:	a7 01       	movw	r20, r14
    11c8:	96 01       	movw	r18, r12
    11ca:	26 0f       	add	r18, r22
    11cc:	37 1f       	adc	r19, r23
    11ce:	48 1f       	adc	r20, r24
    11d0:	59 1f       	adc	r21, r25
    11d2:	a4 e6       	ldi	r26, 0x64	; 100
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__muluhisi3>
    11da:	6b 01       	movw	r12, r22
    11dc:	7c 01       	movw	r14, r24
    11de:	9f 01       	movw	r18, r30
    11e0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__umulhisi3>
    11e4:	6c 50       	subi	r22, 0x0C	; 12
    11e6:	7e 4f       	sbci	r23, 0xFE	; 254
    11e8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	28 ee       	ldi	r18, 0xE8	; 232
    11ee:	33 e0       	ldi	r19, 0x03	; 3
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodsi4>
    11f8:	d7 01       	movw	r26, r14
    11fa:	c6 01       	movw	r24, r12
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	a4 1f       	adc	r26, r20
    1202:	b5 1f       	adc	r27, r21
    1204:	7d 01       	movw	r14, r26
    1206:	0e 94 ac 08 	call	0x1158	; 0x1158 <OSTimeDly>
    120a:	e1 14       	cp	r14, r1
    120c:	f1 04       	cpc	r15, r1
    120e:	11 f4       	brne	.+4      	; 0x1214 <OSTimeDlyHMSM+0xb2>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	b5 cf       	rjmp	.-150    	; 0x117e <OSTimeDlyHMSM+0x1c>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e8       	ldi	r25, 0x80	; 128
    1218:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <OSTimeDly.part.0>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e8       	ldi	r25, 0x80	; 128
    1220:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <OSTimeDly.part.0>
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	e8 1a       	sub	r14, r24
    1228:	f1 08       	sbc	r15, r1
    122a:	ef cf       	rjmp	.-34     	; 0x120a <OSTimeDlyHMSM+0xa8>
    122c:	81 e5       	ldi	r24, 0x51	; 81
    122e:	a7 cf       	rjmp	.-178    	; 0x117e <OSTimeDlyHMSM+0x1c>
    1230:	82 e5       	ldi	r24, 0x52	; 82
    1232:	a5 cf       	rjmp	.-182    	; 0x117e <OSTimeDlyHMSM+0x1c>
    1234:	83 e5       	ldi	r24, 0x53	; 83
    1236:	a3 cf       	rjmp	.-186    	; 0x117e <OSTimeDlyHMSM+0x1c>

00001238 <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    1238:	0e 94 67 03 	call	0x6ce	; 0x6ce <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    123c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	0e 94 8a 02 	call	0x514	; 0x514 <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    124c:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <myrobot+0x1>
    1250:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    1254:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <myrobot+0x3>
    1258:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    125c:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <myrobot+0x4>
    myrobot.KP = DEFAULT_KP; //0.03
    1260:	8f e8       	ldi	r24, 0x8F	; 143
    1262:	92 ec       	ldi	r25, 0xC2	; 194
    1264:	a5 e7       	ldi	r26, 0x75	; 117
    1266:	bd e3       	ldi	r27, 0x3D	; 61
    1268:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <myrobot+0x5>
    126c:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <myrobot+0x6>
    1270:	a0 93 af 02 	sts	0x02AF, r26	; 0x8002af <myrobot+0x7>
    1274:	b0 93 b0 02 	sts	0x02B0, r27	; 0x8002b0 <myrobot+0x8>
    myrobot.KD = DEFAULT_KD; //0.07
    1278:	81 e3       	ldi	r24, 0x31	; 49
    127a:	98 e0       	ldi	r25, 0x08	; 8
    127c:	ac e2       	ldi	r26, 0x2C	; 44
    127e:	bd e3       	ldi	r27, 0x3D	; 61
    1280:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <myrobot+0x9>
    1284:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <myrobot+0xa>
    1288:	a0 93 b3 02 	sts	0x02B3, r26	; 0x8002b3 <myrobot+0xb>
    128c:	b0 93 b4 02 	sts	0x02B4, r27	; 0x8002b4 <myrobot+0xc>
    myrobot.KI = DEFAULT_KI; //0.0004
    1290:	8c ea       	ldi	r24, 0xAC	; 172
    1292:	95 ec       	ldi	r25, 0xC5	; 197
    1294:	a7 ea       	ldi	r26, 0xA7	; 167
    1296:	b7 e3       	ldi	r27, 0x37	; 55
    1298:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <myrobot+0xd>
    129c:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <myrobot+0xe>
    12a0:	a0 93 b7 02 	sts	0x02B7, r26	; 0x8002b7 <myrobot+0xf>
    12a4:	b0 93 b8 02 	sts	0x02B8, r27	; 0x8002b8 <myrobot+0x10>
    myrobot.lastError = 0.0;
    12a8:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <myrobot+0x11>
    12ac:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <myrobot+0x12>
    12b0:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <myrobot+0x13>
    12b4:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <myrobot+0x14>
    myrobot.integral = 0.0;
    12b8:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <myrobot+0x15>
    12bc:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <myrobot+0x16>
    12c0:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <myrobot+0x17>
    12c4:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <myrobot+0x18>
    myrobot.prevLeftSpeed = 0;
    12c8:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <myrobot+0x1c>
    12cc:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <myrobot+0x1b>
    myrobot.prevRightSpeed = 0;
    12d0:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <myrobot+0x1e>
    12d4:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <myrobot+0x1d>
    myrobot.inRoundabout = 0;
    12d8:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <myrobot+0x20>
    12dc:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <myrobot+0x1f>
    myrobot.turn = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <myrobot+0x22>
    12e8:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <myrobot+0x21>
    myrobot.goal = 1000;                                      /* goal is to follow on the middle sensor */
    12ec:	88 ee       	ldi	r24, 0xE8	; 232
    12ee:	93 e0       	ldi	r25, 0x03	; 3
    12f0:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <myrobot+0x1a>
    12f4:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <myrobot+0x19>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    12f8:	21 e0       	ldi	r18, 0x01	; 1
    12fa:	4a ec       	ldi	r20, 0xCA	; 202
    12fc:	53 e0       	ldi	r21, 0x03	; 3
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	87 e7       	ldi	r24, 0x77	; 119
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 60 07 	call	0xec0	; 0xec0 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    130a:	0e 94 2d 03 	call	0x65a	; 0x65a <robo_Honk>
    130e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    1312:	0e 94 19 06 	call	0xc32	; 0xc32 <OSStart>
    1316:	ff cf       	rjmp	.-2      	; 0x1316 <main+0xde>

00001318 <__udivmodhi4>:
    1318:	aa 1b       	sub	r26, r26
    131a:	bb 1b       	sub	r27, r27
    131c:	51 e1       	ldi	r21, 0x11	; 17
    131e:	07 c0       	rjmp	.+14     	; 0x132e <__udivmodhi4_ep>

00001320 <__udivmodhi4_loop>:
    1320:	aa 1f       	adc	r26, r26
    1322:	bb 1f       	adc	r27, r27
    1324:	a6 17       	cp	r26, r22
    1326:	b7 07       	cpc	r27, r23
    1328:	10 f0       	brcs	.+4      	; 0x132e <__udivmodhi4_ep>
    132a:	a6 1b       	sub	r26, r22
    132c:	b7 0b       	sbc	r27, r23

0000132e <__udivmodhi4_ep>:
    132e:	88 1f       	adc	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	5a 95       	dec	r21
    1334:	a9 f7       	brne	.-22     	; 0x1320 <__udivmodhi4_loop>
    1336:	80 95       	com	r24
    1338:	90 95       	com	r25
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	08 95       	ret

00001340 <__divmodhi4>:
    1340:	97 fb       	bst	r25, 7
    1342:	07 2e       	mov	r0, r23
    1344:	16 f4       	brtc	.+4      	; 0x134a <__divmodhi4+0xa>
    1346:	00 94       	com	r0
    1348:	07 d0       	rcall	.+14     	; 0x1358 <__divmodhi4_neg1>
    134a:	77 fd       	sbrc	r23, 7
    134c:	09 d0       	rcall	.+18     	; 0x1360 <__divmodhi4_neg2>
    134e:	0e 94 8c 09 	call	0x1318	; 0x1318 <__udivmodhi4>
    1352:	07 fc       	sbrc	r0, 7
    1354:	05 d0       	rcall	.+10     	; 0x1360 <__divmodhi4_neg2>
    1356:	3e f4       	brtc	.+14     	; 0x1366 <__divmodhi4_exit>

00001358 <__divmodhi4_neg1>:
    1358:	90 95       	com	r25
    135a:	81 95       	neg	r24
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	08 95       	ret

00001360 <__divmodhi4_neg2>:
    1360:	70 95       	com	r23
    1362:	61 95       	neg	r22
    1364:	7f 4f       	sbci	r23, 0xFF	; 255

00001366 <__divmodhi4_exit>:
    1366:	08 95       	ret

00001368 <__udivmodsi4>:
    1368:	a1 e2       	ldi	r26, 0x21	; 33
    136a:	1a 2e       	mov	r1, r26
    136c:	aa 1b       	sub	r26, r26
    136e:	bb 1b       	sub	r27, r27
    1370:	fd 01       	movw	r30, r26
    1372:	0d c0       	rjmp	.+26     	; 0x138e <__udivmodsi4_ep>

00001374 <__udivmodsi4_loop>:
    1374:	aa 1f       	adc	r26, r26
    1376:	bb 1f       	adc	r27, r27
    1378:	ee 1f       	adc	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	a2 17       	cp	r26, r18
    137e:	b3 07       	cpc	r27, r19
    1380:	e4 07       	cpc	r30, r20
    1382:	f5 07       	cpc	r31, r21
    1384:	20 f0       	brcs	.+8      	; 0x138e <__udivmodsi4_ep>
    1386:	a2 1b       	sub	r26, r18
    1388:	b3 0b       	sbc	r27, r19
    138a:	e4 0b       	sbc	r30, r20
    138c:	f5 0b       	sbc	r31, r21

0000138e <__udivmodsi4_ep>:
    138e:	66 1f       	adc	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	88 1f       	adc	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	1a 94       	dec	r1
    1398:	69 f7       	brne	.-38     	; 0x1374 <__udivmodsi4_loop>
    139a:	60 95       	com	r22
    139c:	70 95       	com	r23
    139e:	80 95       	com	r24
    13a0:	90 95       	com	r25
    13a2:	9b 01       	movw	r18, r22
    13a4:	ac 01       	movw	r20, r24
    13a6:	bd 01       	movw	r22, r26
    13a8:	cf 01       	movw	r24, r30
    13aa:	08 95       	ret

000013ac <__umulhisi3>:
    13ac:	a2 9f       	mul	r26, r18
    13ae:	b0 01       	movw	r22, r0
    13b0:	b3 9f       	mul	r27, r19
    13b2:	c0 01       	movw	r24, r0
    13b4:	a3 9f       	mul	r26, r19
    13b6:	70 0d       	add	r23, r0
    13b8:	81 1d       	adc	r24, r1
    13ba:	11 24       	eor	r1, r1
    13bc:	91 1d       	adc	r25, r1
    13be:	b2 9f       	mul	r27, r18
    13c0:	70 0d       	add	r23, r0
    13c2:	81 1d       	adc	r24, r1
    13c4:	11 24       	eor	r1, r1
    13c6:	91 1d       	adc	r25, r1
    13c8:	08 95       	ret

000013ca <__muluhisi3>:
    13ca:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__umulhisi3>
    13ce:	a5 9f       	mul	r26, r21
    13d0:	90 0d       	add	r25, r0
    13d2:	b4 9f       	mul	r27, r20
    13d4:	90 0d       	add	r25, r0
    13d6:	a4 9f       	mul	r26, r20
    13d8:	80 0d       	add	r24, r0
    13da:	91 1d       	adc	r25, r1
    13dc:	11 24       	eor	r1, r1
    13de:	08 95       	ret

000013e0 <__subsf3>:
    13e0:	50 58       	subi	r21, 0x80	; 128

000013e2 <__addsf3>:
    13e2:	bb 27       	eor	r27, r27
    13e4:	aa 27       	eor	r26, r26
    13e6:	0e 94 08 0a 	call	0x1410	; 0x1410 <__addsf3x>
    13ea:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_round>
    13ee:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__fp_pscA>
    13f2:	38 f0       	brcs	.+14     	; 0x1402 <__addsf3+0x20>
    13f4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__fp_pscB>
    13f8:	20 f0       	brcs	.+8      	; 0x1402 <__addsf3+0x20>
    13fa:	39 f4       	brne	.+14     	; 0x140a <__addsf3+0x28>
    13fc:	9f 3f       	cpi	r25, 0xFF	; 255
    13fe:	19 f4       	brne	.+6      	; 0x1406 <__addsf3+0x24>
    1400:	26 f4       	brtc	.+8      	; 0x140a <__addsf3+0x28>
    1402:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_nan>
    1406:	0e f4       	brtc	.+2      	; 0x140a <__addsf3+0x28>
    1408:	e0 95       	com	r30
    140a:	e7 fb       	bst	r30, 7
    140c:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_inf>

00001410 <__addsf3x>:
    1410:	e9 2f       	mov	r30, r25
    1412:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_split3>
    1416:	58 f3       	brcs	.-42     	; 0x13ee <__addsf3+0xc>
    1418:	ba 17       	cp	r27, r26
    141a:	62 07       	cpc	r22, r18
    141c:	73 07       	cpc	r23, r19
    141e:	84 07       	cpc	r24, r20
    1420:	95 07       	cpc	r25, r21
    1422:	20 f0       	brcs	.+8      	; 0x142c <__addsf3x+0x1c>
    1424:	79 f4       	brne	.+30     	; 0x1444 <__addsf3x+0x34>
    1426:	a6 f5       	brtc	.+104    	; 0x1490 <__addsf3x+0x80>
    1428:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_zero>
    142c:	0e f4       	brtc	.+2      	; 0x1430 <__addsf3x+0x20>
    142e:	e0 95       	com	r30
    1430:	0b 2e       	mov	r0, r27
    1432:	ba 2f       	mov	r27, r26
    1434:	a0 2d       	mov	r26, r0
    1436:	0b 01       	movw	r0, r22
    1438:	b9 01       	movw	r22, r18
    143a:	90 01       	movw	r18, r0
    143c:	0c 01       	movw	r0, r24
    143e:	ca 01       	movw	r24, r20
    1440:	a0 01       	movw	r20, r0
    1442:	11 24       	eor	r1, r1
    1444:	ff 27       	eor	r31, r31
    1446:	59 1b       	sub	r21, r25
    1448:	99 f0       	breq	.+38     	; 0x1470 <__addsf3x+0x60>
    144a:	59 3f       	cpi	r21, 0xF9	; 249
    144c:	50 f4       	brcc	.+20     	; 0x1462 <__addsf3x+0x52>
    144e:	50 3e       	cpi	r21, 0xE0	; 224
    1450:	68 f1       	brcs	.+90     	; 0x14ac <__addsf3x+0x9c>
    1452:	1a 16       	cp	r1, r26
    1454:	f0 40       	sbci	r31, 0x00	; 0
    1456:	a2 2f       	mov	r26, r18
    1458:	23 2f       	mov	r18, r19
    145a:	34 2f       	mov	r19, r20
    145c:	44 27       	eor	r20, r20
    145e:	58 5f       	subi	r21, 0xF8	; 248
    1460:	f3 cf       	rjmp	.-26     	; 0x1448 <__addsf3x+0x38>
    1462:	46 95       	lsr	r20
    1464:	37 95       	ror	r19
    1466:	27 95       	ror	r18
    1468:	a7 95       	ror	r26
    146a:	f0 40       	sbci	r31, 0x00	; 0
    146c:	53 95       	inc	r21
    146e:	c9 f7       	brne	.-14     	; 0x1462 <__addsf3x+0x52>
    1470:	7e f4       	brtc	.+30     	; 0x1490 <__addsf3x+0x80>
    1472:	1f 16       	cp	r1, r31
    1474:	ba 0b       	sbc	r27, r26
    1476:	62 0b       	sbc	r22, r18
    1478:	73 0b       	sbc	r23, r19
    147a:	84 0b       	sbc	r24, r20
    147c:	ba f0       	brmi	.+46     	; 0x14ac <__addsf3x+0x9c>
    147e:	91 50       	subi	r25, 0x01	; 1
    1480:	a1 f0       	breq	.+40     	; 0x14aa <__addsf3x+0x9a>
    1482:	ff 0f       	add	r31, r31
    1484:	bb 1f       	adc	r27, r27
    1486:	66 1f       	adc	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	c2 f7       	brpl	.-16     	; 0x147e <__addsf3x+0x6e>
    148e:	0e c0       	rjmp	.+28     	; 0x14ac <__addsf3x+0x9c>
    1490:	ba 0f       	add	r27, r26
    1492:	62 1f       	adc	r22, r18
    1494:	73 1f       	adc	r23, r19
    1496:	84 1f       	adc	r24, r20
    1498:	48 f4       	brcc	.+18     	; 0x14ac <__addsf3x+0x9c>
    149a:	87 95       	ror	r24
    149c:	77 95       	ror	r23
    149e:	67 95       	ror	r22
    14a0:	b7 95       	ror	r27
    14a2:	f7 95       	ror	r31
    14a4:	9e 3f       	cpi	r25, 0xFE	; 254
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <__addsf3x+0x9a>
    14a8:	b0 cf       	rjmp	.-160    	; 0x140a <__addsf3+0x28>
    14aa:	93 95       	inc	r25
    14ac:	88 0f       	add	r24, r24
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <__addsf3x+0xa2>
    14b0:	99 27       	eor	r25, r25
    14b2:	ee 0f       	add	r30, r30
    14b4:	97 95       	ror	r25
    14b6:	87 95       	ror	r24
    14b8:	08 95       	ret

000014ba <__fixsfsi>:
    14ba:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__fixunssfsi>
    14be:	68 94       	set
    14c0:	b1 11       	cpse	r27, r1
    14c2:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__fp_szero>
    14c6:	08 95       	ret

000014c8 <__fixunssfsi>:
    14c8:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_splitA>
    14cc:	88 f0       	brcs	.+34     	; 0x14f0 <__fixunssfsi+0x28>
    14ce:	9f 57       	subi	r25, 0x7F	; 127
    14d0:	98 f0       	brcs	.+38     	; 0x14f8 <__fixunssfsi+0x30>
    14d2:	b9 2f       	mov	r27, r25
    14d4:	99 27       	eor	r25, r25
    14d6:	b7 51       	subi	r27, 0x17	; 23
    14d8:	b0 f0       	brcs	.+44     	; 0x1506 <__fixunssfsi+0x3e>
    14da:	e1 f0       	breq	.+56     	; 0x1514 <__fixunssfsi+0x4c>
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	1a f0       	brmi	.+6      	; 0x14ec <__fixunssfsi+0x24>
    14e6:	ba 95       	dec	r27
    14e8:	c9 f7       	brne	.-14     	; 0x14dc <__fixunssfsi+0x14>
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <__fixunssfsi+0x4c>
    14ec:	b1 30       	cpi	r27, 0x01	; 1
    14ee:	91 f0       	breq	.+36     	; 0x1514 <__fixunssfsi+0x4c>
    14f0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fp_zero>
    14f4:	b1 e0       	ldi	r27, 0x01	; 1
    14f6:	08 95       	ret
    14f8:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__fp_zero>
    14fc:	67 2f       	mov	r22, r23
    14fe:	78 2f       	mov	r23, r24
    1500:	88 27       	eor	r24, r24
    1502:	b8 5f       	subi	r27, 0xF8	; 248
    1504:	39 f0       	breq	.+14     	; 0x1514 <__fixunssfsi+0x4c>
    1506:	b9 3f       	cpi	r27, 0xF9	; 249
    1508:	cc f3       	brlt	.-14     	; 0x14fc <__fixunssfsi+0x34>
    150a:	86 95       	lsr	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	b3 95       	inc	r27
    1512:	d9 f7       	brne	.-10     	; 0x150a <__fixunssfsi+0x42>
    1514:	3e f4       	brtc	.+14     	; 0x1524 <__fixunssfsi+0x5c>
    1516:	90 95       	com	r25
    1518:	80 95       	com	r24
    151a:	70 95       	com	r23
    151c:	61 95       	neg	r22
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	8f 4f       	sbci	r24, 0xFF	; 255
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	08 95       	ret

00001526 <__floatunsisf>:
    1526:	e8 94       	clt
    1528:	09 c0       	rjmp	.+18     	; 0x153c <__floatsisf+0x12>

0000152a <__floatsisf>:
    152a:	97 fb       	bst	r25, 7
    152c:	3e f4       	brtc	.+14     	; 0x153c <__floatsisf+0x12>
    152e:	90 95       	com	r25
    1530:	80 95       	com	r24
    1532:	70 95       	com	r23
    1534:	61 95       	neg	r22
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	99 23       	and	r25, r25
    153e:	a9 f0       	breq	.+42     	; 0x156a <__floatsisf+0x40>
    1540:	f9 2f       	mov	r31, r25
    1542:	96 e9       	ldi	r25, 0x96	; 150
    1544:	bb 27       	eor	r27, r27
    1546:	93 95       	inc	r25
    1548:	f6 95       	lsr	r31
    154a:	87 95       	ror	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f1 11       	cpse	r31, r1
    1554:	f8 cf       	rjmp	.-16     	; 0x1546 <__floatsisf+0x1c>
    1556:	fa f4       	brpl	.+62     	; 0x1596 <__floatsisf+0x6c>
    1558:	bb 0f       	add	r27, r27
    155a:	11 f4       	brne	.+4      	; 0x1560 <__floatsisf+0x36>
    155c:	60 ff       	sbrs	r22, 0
    155e:	1b c0       	rjmp	.+54     	; 0x1596 <__floatsisf+0x6c>
    1560:	6f 5f       	subi	r22, 0xFF	; 255
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	8f 4f       	sbci	r24, 0xFF	; 255
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <__floatsisf+0x6c>
    156a:	88 23       	and	r24, r24
    156c:	11 f0       	breq	.+4      	; 0x1572 <__floatsisf+0x48>
    156e:	96 e9       	ldi	r25, 0x96	; 150
    1570:	11 c0       	rjmp	.+34     	; 0x1594 <__floatsisf+0x6a>
    1572:	77 23       	and	r23, r23
    1574:	21 f0       	breq	.+8      	; 0x157e <__floatsisf+0x54>
    1576:	9e e8       	ldi	r25, 0x8E	; 142
    1578:	87 2f       	mov	r24, r23
    157a:	76 2f       	mov	r23, r22
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <__floatsisf+0x5e>
    157e:	66 23       	and	r22, r22
    1580:	71 f0       	breq	.+28     	; 0x159e <__floatsisf+0x74>
    1582:	96 e8       	ldi	r25, 0x86	; 134
    1584:	86 2f       	mov	r24, r22
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	2a f0       	brmi	.+10     	; 0x1596 <__floatsisf+0x6c>
    158c:	9a 95       	dec	r25
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	88 1f       	adc	r24, r24
    1594:	da f7       	brpl	.-10     	; 0x158c <__floatsisf+0x62>
    1596:	88 0f       	add	r24, r24
    1598:	96 95       	lsr	r25
    159a:	87 95       	ror	r24
    159c:	97 f9       	bld	r25, 7
    159e:	08 95       	ret

000015a0 <__fp_inf>:
    15a0:	97 f9       	bld	r25, 7
    15a2:	9f 67       	ori	r25, 0x7F	; 127
    15a4:	80 e8       	ldi	r24, 0x80	; 128
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	08 95       	ret

000015ac <__fp_nan>:
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	80 ec       	ldi	r24, 0xC0	; 192
    15b0:	08 95       	ret

000015b2 <__fp_pscA>:
    15b2:	00 24       	eor	r0, r0
    15b4:	0a 94       	dec	r0
    15b6:	16 16       	cp	r1, r22
    15b8:	17 06       	cpc	r1, r23
    15ba:	18 06       	cpc	r1, r24
    15bc:	09 06       	cpc	r0, r25
    15be:	08 95       	ret

000015c0 <__fp_pscB>:
    15c0:	00 24       	eor	r0, r0
    15c2:	0a 94       	dec	r0
    15c4:	12 16       	cp	r1, r18
    15c6:	13 06       	cpc	r1, r19
    15c8:	14 06       	cpc	r1, r20
    15ca:	05 06       	cpc	r0, r21
    15cc:	08 95       	ret

000015ce <__fp_round>:
    15ce:	09 2e       	mov	r0, r25
    15d0:	03 94       	inc	r0
    15d2:	00 0c       	add	r0, r0
    15d4:	11 f4       	brne	.+4      	; 0x15da <__fp_round+0xc>
    15d6:	88 23       	and	r24, r24
    15d8:	52 f0       	brmi	.+20     	; 0x15ee <__fp_round+0x20>
    15da:	bb 0f       	add	r27, r27
    15dc:	40 f4       	brcc	.+16     	; 0x15ee <__fp_round+0x20>
    15de:	bf 2b       	or	r27, r31
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <__fp_round+0x18>
    15e2:	60 ff       	sbrs	r22, 0
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <__fp_round+0x20>
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	08 95       	ret

000015f0 <__fp_split3>:
    15f0:	57 fd       	sbrc	r21, 7
    15f2:	90 58       	subi	r25, 0x80	; 128
    15f4:	44 0f       	add	r20, r20
    15f6:	55 1f       	adc	r21, r21
    15f8:	59 f0       	breq	.+22     	; 0x1610 <__fp_splitA+0x10>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	71 f0       	breq	.+28     	; 0x161a <__fp_splitA+0x1a>
    15fe:	47 95       	ror	r20

00001600 <__fp_splitA>:
    1600:	88 0f       	add	r24, r24
    1602:	97 fb       	bst	r25, 7
    1604:	99 1f       	adc	r25, r25
    1606:	61 f0       	breq	.+24     	; 0x1620 <__fp_splitA+0x20>
    1608:	9f 3f       	cpi	r25, 0xFF	; 255
    160a:	79 f0       	breq	.+30     	; 0x162a <__fp_splitA+0x2a>
    160c:	87 95       	ror	r24
    160e:	08 95       	ret
    1610:	12 16       	cp	r1, r18
    1612:	13 06       	cpc	r1, r19
    1614:	14 06       	cpc	r1, r20
    1616:	55 1f       	adc	r21, r21
    1618:	f2 cf       	rjmp	.-28     	; 0x15fe <__fp_split3+0xe>
    161a:	46 95       	lsr	r20
    161c:	f1 df       	rcall	.-30     	; 0x1600 <__fp_splitA>
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <__fp_splitA+0x30>
    1620:	16 16       	cp	r1, r22
    1622:	17 06       	cpc	r1, r23
    1624:	18 06       	cpc	r1, r24
    1626:	99 1f       	adc	r25, r25
    1628:	f1 cf       	rjmp	.-30     	; 0x160c <__fp_splitA+0xc>
    162a:	86 95       	lsr	r24
    162c:	71 05       	cpc	r23, r1
    162e:	61 05       	cpc	r22, r1
    1630:	08 94       	sec
    1632:	08 95       	ret

00001634 <__fp_zero>:
    1634:	e8 94       	clt

00001636 <__fp_szero>:
    1636:	bb 27       	eor	r27, r27
    1638:	66 27       	eor	r22, r22
    163a:	77 27       	eor	r23, r23
    163c:	cb 01       	movw	r24, r22
    163e:	97 f9       	bld	r25, 7
    1640:	08 95       	ret

00001642 <__mulsf3>:
    1642:	0e 94 34 0b 	call	0x1668	; 0x1668 <__mulsf3x>
    1646:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_round>
    164a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__fp_pscA>
    164e:	38 f0       	brcs	.+14     	; 0x165e <__mulsf3+0x1c>
    1650:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__fp_pscB>
    1654:	20 f0       	brcs	.+8      	; 0x165e <__mulsf3+0x1c>
    1656:	95 23       	and	r25, r21
    1658:	11 f0       	breq	.+4      	; 0x165e <__mulsf3+0x1c>
    165a:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_inf>
    165e:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_nan>
    1662:	11 24       	eor	r1, r1
    1664:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__fp_szero>

00001668 <__mulsf3x>:
    1668:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_split3>
    166c:	70 f3       	brcs	.-36     	; 0x164a <__mulsf3+0x8>

0000166e <__mulsf3_pse>:
    166e:	95 9f       	mul	r25, r21
    1670:	c1 f3       	breq	.-16     	; 0x1662 <__mulsf3+0x20>
    1672:	95 0f       	add	r25, r21
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	55 1f       	adc	r21, r21
    1678:	62 9f       	mul	r22, r18
    167a:	f0 01       	movw	r30, r0
    167c:	72 9f       	mul	r23, r18
    167e:	bb 27       	eor	r27, r27
    1680:	f0 0d       	add	r31, r0
    1682:	b1 1d       	adc	r27, r1
    1684:	63 9f       	mul	r22, r19
    1686:	aa 27       	eor	r26, r26
    1688:	f0 0d       	add	r31, r0
    168a:	b1 1d       	adc	r27, r1
    168c:	aa 1f       	adc	r26, r26
    168e:	64 9f       	mul	r22, r20
    1690:	66 27       	eor	r22, r22
    1692:	b0 0d       	add	r27, r0
    1694:	a1 1d       	adc	r26, r1
    1696:	66 1f       	adc	r22, r22
    1698:	82 9f       	mul	r24, r18
    169a:	22 27       	eor	r18, r18
    169c:	b0 0d       	add	r27, r0
    169e:	a1 1d       	adc	r26, r1
    16a0:	62 1f       	adc	r22, r18
    16a2:	73 9f       	mul	r23, r19
    16a4:	b0 0d       	add	r27, r0
    16a6:	a1 1d       	adc	r26, r1
    16a8:	62 1f       	adc	r22, r18
    16aa:	83 9f       	mul	r24, r19
    16ac:	a0 0d       	add	r26, r0
    16ae:	61 1d       	adc	r22, r1
    16b0:	22 1f       	adc	r18, r18
    16b2:	74 9f       	mul	r23, r20
    16b4:	33 27       	eor	r19, r19
    16b6:	a0 0d       	add	r26, r0
    16b8:	61 1d       	adc	r22, r1
    16ba:	23 1f       	adc	r18, r19
    16bc:	84 9f       	mul	r24, r20
    16be:	60 0d       	add	r22, r0
    16c0:	21 1d       	adc	r18, r1
    16c2:	82 2f       	mov	r24, r18
    16c4:	76 2f       	mov	r23, r22
    16c6:	6a 2f       	mov	r22, r26
    16c8:	11 24       	eor	r1, r1
    16ca:	9f 57       	subi	r25, 0x7F	; 127
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	9a f0       	brmi	.+38     	; 0x16f6 <__mulsf3_pse+0x88>
    16d0:	f1 f0       	breq	.+60     	; 0x170e <__mulsf3_pse+0xa0>
    16d2:	88 23       	and	r24, r24
    16d4:	4a f0       	brmi	.+18     	; 0x16e8 <__mulsf3_pse+0x7a>
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	bb 1f       	adc	r27, r27
    16dc:	66 1f       	adc	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	88 1f       	adc	r24, r24
    16e2:	91 50       	subi	r25, 0x01	; 1
    16e4:	50 40       	sbci	r21, 0x00	; 0
    16e6:	a9 f7       	brne	.-22     	; 0x16d2 <__mulsf3_pse+0x64>
    16e8:	9e 3f       	cpi	r25, 0xFE	; 254
    16ea:	51 05       	cpc	r21, r1
    16ec:	80 f0       	brcs	.+32     	; 0x170e <__mulsf3_pse+0xa0>
    16ee:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_inf>
    16f2:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__fp_szero>
    16f6:	5f 3f       	cpi	r21, 0xFF	; 255
    16f8:	e4 f3       	brlt	.-8      	; 0x16f2 <__mulsf3_pse+0x84>
    16fa:	98 3e       	cpi	r25, 0xE8	; 232
    16fc:	d4 f3       	brlt	.-12     	; 0x16f2 <__mulsf3_pse+0x84>
    16fe:	86 95       	lsr	r24
    1700:	77 95       	ror	r23
    1702:	67 95       	ror	r22
    1704:	b7 95       	ror	r27
    1706:	f7 95       	ror	r31
    1708:	e7 95       	ror	r30
    170a:	9f 5f       	subi	r25, 0xFF	; 255
    170c:	c1 f7       	brne	.-16     	; 0x16fe <__mulsf3_pse+0x90>
    170e:	fe 2b       	or	r31, r30
    1710:	88 0f       	add	r24, r24
    1712:	91 1d       	adc	r25, r1
    1714:	96 95       	lsr	r25
    1716:	87 95       	ror	r24
    1718:	97 f9       	bld	r25, 7
    171a:	08 95       	ret

0000171c <_exit>:
    171c:	f8 94       	cli

0000171e <__stop_program>:
    171e:	ff cf       	rjmp	.-2      	; 0x171e <__stop_program>
