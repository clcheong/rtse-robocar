
robocarChatGPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00001ac8  00001b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ad  00800252  00800252  00001cae  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000031  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017b8  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000918  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d1e  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000fc  00000000  00000000  00004c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000723  00000000  00000000  00004d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004a1  00000000  00000000  000054af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00005950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 35       	cpi	r26, 0x52	; 82
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a2 e5       	ldi	r26, 0x52	; 82
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3f       	cpi	r26, 0xFF	; 255
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <main>
      9e:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
            cprintf("Obstacle Detected\n");
      a6:	c9 e1       	ldi	r28, 0x19	; 25
      a8:	d2 e0       	ldi	r29, 0x02	; 2
            myrobot.obstacle = 1;  
      aa:	11 e0       	ldi	r17, 0x01	; 1
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
      ac:	0e 94 a7 04 	call	0x94e	; 0x94e <robo_proxSensor>
      b0:	01 97       	sbiw	r24, 0x01	; 1
      b2:	81 f4       	brne	.+32     	; 0xd4 <CheckCollision+0x2e>
            cprintf("Obstacle Detected\n");
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	0e 94 45 05 	call	0xa8a	; 0xa8a <cprintf>
            myrobot.obstacle = 1;  
      bc:	10 93 d6 02 	sts	0x02D6, r17	; 0x8002d6 <myrobot+0x4>
      c0:	0f 90       	pop	r0
      c2:	0f 90       	pop	r0
        }                                           /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 100 ms              */
      c4:	2a e0       	ldi	r18, 0x0A	; 10
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <OSTimeDlyHMSM>
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
      d2:	ec cf       	rjmp	.-40     	; 0xac <CheckCollision+0x6>
            cprintf("Obstacle Detected\n");
            myrobot.obstacle = 1;  
        }                                           /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      d4:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <myrobot+0x4>
      d8:	f5 cf       	rjmp	.-22     	; 0xc4 <CheckCollision+0x1e>

000000da <CntrlMotors>:
{
    int speed_r, speed_l;

    for(;;)
    {
        speed_r = - myrobot.rspeed;
      da:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <myrobot>
      de:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <myrobot+0x1>
      e2:	71 95       	neg	r23
      e4:	61 95       	neg	r22
      e6:	71 09       	sbc	r23, r1
        speed_l = - myrobot.lspeed;
      e8:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <myrobot+0x2>
      ec:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <myrobot+0x3>
        robo_motorSpeed(speed_l, speed_r);
      f0:	91 95       	neg	r25
      f2:	81 95       	neg	r24
      f4:	91 09       	sbc	r25, r1
      f6:	0e 94 4c 04 	call	0x898	; 0x898 <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 250 ms              */
      fa:	2a e0       	ldi	r18, 0x0A	; 10
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e0       	ldi	r20, 0x00	; 0
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <OSTimeDlyHMSM>
     108:	e8 cf       	rjmp	.-48     	; 0xda <CntrlMotors>

0000010a <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    cprintf("Task Start\n");
     10a:	8c e2       	ldi	r24, 0x2C	; 44
     10c:	92 e0       	ldi	r25, 0x02	; 2
     10e:	9f 93       	push	r25
     110:	8f 93       	push	r24
     112:	0e 94 45 05 	call	0xa8a	; 0xa8a <cprintf>

    OS_ticks_init();                                        /* enable RTOS timer tick        */
     116:	0e 94 1a 05 	call	0xa34	; 0xa34 <OS_ticks_init>

    OSTaskCreate(Navig,                                     /* Task function                 */
     11a:	24 e0       	ldi	r18, 0x04	; 4
     11c:	4a e7       	ldi	r20, 0x7A	; 122
     11e:	54 e0       	ldi	r21, 0x04	; 4
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	84 e8       	ldi	r24, 0x84	; 132
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 22 09 	call	0x1244	; 0x1244 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

    OSTaskCreate(CheckCollision,                            /* Task function                 */
     12c:	22 e0       	ldi	r18, 0x02	; 2
     12e:	41 ed       	ldi	r20, 0xD1	; 209
     130:	52 e0       	ldi	r21, 0x02	; 2
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	83 e5       	ldi	r24, 0x53	; 83
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 22 09 	call	0x1244	; 0x1244 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     13e:	23 e0       	ldi	r18, 0x03	; 3
     140:	4a e7       	ldi	r20, 0x7A	; 122
     142:	53 e0       	ldi	r21, 0x03	; 3
     144:	70 e0       	ldi	r23, 0x00	; 0
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	8d e6       	ldi	r24, 0x6D	; 109
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 22 09 	call	0x1244	; 0x1244 <OSTaskCreate>
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0



    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	45 e0       	ldi	r20, 0x05	; 5
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <OSTimeDlyHMSM>
     162:	f8 cf       	rjmp	.-16     	; 0x154 <TaskStart+0x4a>

00000164 <constrain>:
    int inBlackBox;
    int turn;
} myrobot;

int constrain(int value, int lowerBound, int upperBound) {
    if (value < lowerBound) {
     164:	86 17       	cp	r24, r22
     166:	97 07       	cpc	r25, r23
     168:	2c f0       	brlt	.+10     	; 0x174 <constrain+0x10>
     16a:	bc 01       	movw	r22, r24
     16c:	48 17       	cp	r20, r24
     16e:	59 07       	cpc	r21, r25
     170:	0c f4       	brge	.+2      	; 0x174 <constrain+0x10>
     172:	ba 01       	movw	r22, r20
        return upperBound;
    }
    else {
        return value;
    }
}
     174:	cb 01       	movw	r24, r22
     176:	08 95       	ret

00000178 <absoluteValue>:

int absoluteValue(int num) {
     178:	97 ff       	sbrs	r25, 7
     17a:	03 c0       	rjmp	.+6      	; 0x182 <absoluteValue+0xa>
     17c:	91 95       	neg	r25
     17e:	81 95       	neg	r24
     180:	91 09       	sbc	r25, r1
    if (num < 0)
        return -num;
    else
        return num;
}
     182:	08 95       	ret

00000184 <pidControl>:

void pidControl(int sense) {
     184:	4f 92       	push	r4
     186:	5f 92       	push	r5
     188:	6f 92       	push	r6
     18a:	7f 92       	push	r7
     18c:	8f 92       	push	r8
     18e:	9f 92       	push	r9
     190:	af 92       	push	r10
     192:	bf 92       	push	r11
     194:	cf 92       	push	r12
     196:	df 92       	push	r13
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inLightField == 1) {
     19c:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <myrobot+0x23>
     1a0:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <myrobot+0x24>
     1a4:	21 30       	cpi	r18, 0x01	; 1
     1a6:	31 05       	cpc	r19, r1
     1a8:	61 f4       	brne	.+24     	; 0x1c2 <pidControl+0x3e>
        myrobot.KP = 0.065;
     1aa:	48 eb       	ldi	r20, 0xB8	; 184
     1ac:	5e e1       	ldi	r21, 0x1E	; 30
     1ae:	65 e8       	ldi	r22, 0x85	; 133
     1b0:	7d e3       	ldi	r23, 0x3D	; 61
     1b2:	40 93 d7 02 	sts	0x02D7, r20	; 0x8002d7 <myrobot+0x5>
     1b6:	50 93 d8 02 	sts	0x02D8, r21	; 0x8002d8 <myrobot+0x6>
     1ba:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <myrobot+0x7>
     1be:	70 93 da 02 	sts	0x02DA, r23	; 0x8002da <myrobot+0x8>
    // } else {
    //     motorSpeed = DEFAULT_MOTOR_SPEED;
    //     myrobot.KP = DEFAULT_KP; 
    // }

    int error = myrobot.goal - sense;
     1c2:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <myrobot+0x19>
     1c6:	70 91 ec 02 	lds	r23, 0x02EC	; 0x8002ec <myrobot+0x1a>
     1ca:	68 1b       	sub	r22, r24
     1cc:	79 0b       	sbc	r23, r25

    myrobot.integral = myrobot.integral + error;
     1ce:	07 2e       	mov	r0, r23
     1d0:	00 0c       	add	r0, r0
     1d2:	88 0b       	sbc	r24, r24
     1d4:	99 0b       	sbc	r25, r25
     1d6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatsisf>
     1da:	6b 01       	movw	r12, r22
     1dc:	7c 01       	movw	r14, r24
     1de:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <myrobot+0x15>
     1e2:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <myrobot+0x16>
     1e6:	40 91 e9 02 	lds	r20, 0x02E9	; 0x8002e9 <myrobot+0x17>
     1ea:	50 91 ea 02 	lds	r21, 0x02EA	; 0x8002ea <myrobot+0x18>
     1ee:	0e 94 c5 0b 	call	0x178a	; 0x178a <__addsf3>
     1f2:	4b 01       	movw	r8, r22
     1f4:	5c 01       	movw	r10, r24
     1f6:	80 92 e7 02 	sts	0x02E7, r8	; 0x8002e7 <myrobot+0x15>
     1fa:	90 92 e8 02 	sts	0x02E8, r9	; 0x8002e8 <myrobot+0x16>
     1fe:	a0 92 e9 02 	sts	0x02E9, r10	; 0x8002e9 <myrobot+0x17>
     202:	b0 92 ea 02 	sts	0x02EA, r11	; 0x8002ea <myrobot+0x18>
    //     myrobot.turn += 1;
    // }


    // Calculate motor adjustments
    int adjustment = (myrobot.KP * error) + (myrobot.KI * (myrobot.integral)) + (myrobot.KD * (error - myrobot.lastError));
     206:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <myrobot+0x5>
     20a:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <myrobot+0x6>
     20e:	40 91 d9 02 	lds	r20, 0x02D9	; 0x8002d9 <myrobot+0x7>
     212:	50 91 da 02 	lds	r21, 0x02DA	; 0x8002da <myrobot+0x8>
     216:	c7 01       	movw	r24, r14
     218:	b6 01       	movw	r22, r12
     21a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__mulsf3>
     21e:	2b 01       	movw	r4, r22
     220:	3c 01       	movw	r6, r24
     222:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <myrobot+0xd>
     226:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <myrobot+0xe>
     22a:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <myrobot+0xf>
     22e:	50 91 e2 02 	lds	r21, 0x02E2	; 0x8002e2 <myrobot+0x10>
     232:	c5 01       	movw	r24, r10
     234:	b4 01       	movw	r22, r8
     236:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__mulsf3>
     23a:	9b 01       	movw	r18, r22
     23c:	ac 01       	movw	r20, r24
     23e:	c3 01       	movw	r24, r6
     240:	b2 01       	movw	r22, r4
     242:	0e 94 c5 0b 	call	0x178a	; 0x178a <__addsf3>
     246:	4b 01       	movw	r8, r22
     248:	5c 01       	movw	r10, r24
     24a:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <myrobot+0x11>
     24e:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <myrobot+0x12>
     252:	40 91 e5 02 	lds	r20, 0x02E5	; 0x8002e5 <myrobot+0x13>
     256:	50 91 e6 02 	lds	r21, 0x02E6	; 0x8002e6 <myrobot+0x14>
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__subsf3>
     262:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <myrobot+0x9>
     266:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <myrobot+0xa>
     26a:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <myrobot+0xb>
     26e:	50 91 de 02 	lds	r21, 0x02DE	; 0x8002de <myrobot+0xc>
     272:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__mulsf3>
     276:	9b 01       	movw	r18, r22
     278:	ac 01       	movw	r20, r24
     27a:	c5 01       	movw	r24, r10
     27c:	b4 01       	movw	r22, r8
     27e:	0e 94 c5 0b 	call	0x178a	; 0x178a <__addsf3>
     282:	0e 94 31 0c 	call	0x1862	; 0x1862 <__fixsfsi>

    // Store error for the next iteration
    myrobot.lastError = error;
     286:	c0 92 e3 02 	sts	0x02E3, r12	; 0x8002e3 <myrobot+0x11>
     28a:	d0 92 e4 02 	sts	0x02E4, r13	; 0x8002e4 <myrobot+0x12>
     28e:	e0 92 e5 02 	sts	0x02E5, r14	; 0x8002e5 <myrobot+0x13>
     292:	f0 92 e6 02 	sts	0x02E6, r15	; 0x8002e6 <myrobot+0x14>

    // Adjust motors
    myrobot.lspeed = constrain((motorSpeed - adjustment), -100 , 100);
     296:	29 e1       	ldi	r18, 0x19	; 25
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	26 1b       	sub	r18, r22
     29c:	37 0b       	sbc	r19, r23
     29e:	25 36       	cpi	r18, 0x65	; 101
     2a0:	31 05       	cpc	r19, r1
     2a2:	14 f0       	brlt	.+4      	; 0x2a8 <pidControl+0x124>
     2a4:	24 e6       	ldi	r18, 0x64	; 100
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	2c 39       	cpi	r18, 0x9C	; 156
     2aa:	4f ef       	ldi	r20, 0xFF	; 255
     2ac:	34 07       	cpc	r19, r20
     2ae:	14 f4       	brge	.+4      	; 0x2b4 <pidControl+0x130>
     2b0:	2c e9       	ldi	r18, 0x9C	; 156
     2b2:	3f ef       	ldi	r19, 0xFF	; 255
     2b4:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <myrobot+0x3>
     2b8:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <myrobot+0x2>
    myrobot.rspeed = constrain((motorSpeed + adjustment), -100 , 100);
     2bc:	67 5e       	subi	r22, 0xE7	; 231
     2be:	7f 4f       	sbci	r23, 0xFF	; 255
     2c0:	65 36       	cpi	r22, 0x65	; 101
     2c2:	71 05       	cpc	r23, r1
     2c4:	14 f0       	brlt	.+4      	; 0x2ca <pidControl+0x146>
     2c6:	64 e6       	ldi	r22, 0x64	; 100
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	6c 39       	cpi	r22, 0x9C	; 156
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	78 07       	cpc	r23, r24
     2d0:	14 f4       	brge	.+4      	; 0x2d6 <pidControl+0x152>
     2d2:	6c e9       	ldi	r22, 0x9C	; 156
     2d4:	7f ef       	ldi	r23, 0xFF	; 255
     2d6:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <myrobot+0x1>
     2da:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <myrobot>
    

    myrobot.prevLeftSpeed = myrobot.lspeed;
     2de:	30 93 ee 02 	sts	0x02EE, r19	; 0x8002ee <myrobot+0x1c>
     2e2:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <myrobot+0x1b>
    myrobot.prevRightSpeed = myrobot.rspeed;
     2e6:	70 93 f0 02 	sts	0x02F0, r23	; 0x8002f0 <myrobot+0x1e>
     2ea:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <myrobot+0x1d>
}
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	df 90       	pop	r13
     2f4:	cf 90       	pop	r12
     2f6:	bf 90       	pop	r11
     2f8:	af 90       	pop	r10
     2fa:	9f 90       	pop	r9
     2fc:	8f 90       	pop	r8
     2fe:	7f 90       	pop	r7
     300:	6f 90       	pop	r6
     302:	5f 90       	pop	r5
     304:	4f 90       	pop	r4
     306:	08 95       	ret

00000308 <Navig>:

void Navig (void *data)
{
    

    int pressCount = 0;
     308:	51 2c       	mov	r5, r1
     30a:	41 2c       	mov	r4, r1
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     30c:	c2 ee       	ldi	r28, 0xE2	; 226
     30e:	df ef       	ldi	r29, 0xFF	; 255

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     310:	01 e4       	ldi	r16, 0x41	; 65
     312:	10 e0       	ldi	r17, 0x00	; 0

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     314:	6d ed       	ldi	r22, 0xDD	; 221
     316:	e6 2e       	mov	r14, r22
     318:	ff 24       	eor	r15, r15
     31a:	fa 94       	dec	r15
                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
     31c:	7d e2       	ldi	r23, 0x2D	; 45
     31e:	67 2e       	mov	r6, r23
     320:	71 2c       	mov	r7, r1

            } else {

                // normal mode
                switch (sensorValue) {
                    case 2: myrobot.lspeed = 50;
     322:	e2 e3       	ldi	r30, 0x32	; 50
     324:	ce 2e       	mov	r12, r30
     326:	d1 2c       	mov	r13, r1
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
                            break;

                    case 0: myrobot.lspeed = 30;
     328:	fe e1       	ldi	r31, 0x1E	; 30
     32a:	8f 2e       	mov	r8, r31
     32c:	91 2c       	mov	r9, r1
                            myrobot.rspeed = 60;
     32e:	ac e3       	ldi	r26, 0x3C	; 60
     330:	2a 2e       	mov	r2, r26
     332:	31 2c       	mov	r3, r1

    int pressCount = 0;
    for (;;)
    {

        cprintf("Navigate\n");
     334:	88 e3       	ldi	r24, 0x38	; 56
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	9f 93       	push	r25
     33a:	8f 93       	push	r24
     33c:	0e 94 45 05 	call	0xa8a	; 0xa8a <cprintf>
		// {
		// 	myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
        //     myrobot.lspeed   =  LOW_SPEED;
		// }

        int lightSense = robo_lightSensor();
     340:	0e 94 b3 04 	call	0x966	; 0x966 <robo_lightSensor>
     344:	5c 01       	movw	r10, r24

        if(robo_goPressed() != NULL){
     346:	0e 94 0e 05 	call	0xa1c	; 0xa1c <robo_goPressed>
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	88 23       	and	r24, r24
     350:	19 f1       	breq	.+70     	; 0x398 <Navig+0x90>

            while(robo_goPressed() != NULL);
     352:	0e 94 0e 05 	call	0xa1c	; 0xa1c <robo_goPressed>
     356:	81 11       	cpse	r24, r1
     358:	fc cf       	rjmp	.-8      	; 0x352 <Navig+0x4a>

            pressCount++;
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	48 1a       	sub	r4, r24
     35e:	58 0a       	sbc	r5, r24
            if (pressCount >= 5){
     360:	95 e0       	ldi	r25, 0x05	; 5
     362:	49 16       	cp	r4, r25
     364:	51 04       	cpc	r5, r1
     366:	64 f1       	brlt	.+88     	; 0x3c0 <Navig+0xb8>
                myrobot.inBlackBox = 1;
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <myrobot+0x26>
     370:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <myrobot+0x25>
                } else {
                    myrobot.inRoundabout = 0;
                }
            }

            if(myrobot.inBlackBox == 1){
     374:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <myrobot+0x25>
     378:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <myrobot+0x26>
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	11 f4       	brne	.+4      	; 0x384 <Navig+0x7c>
                robo_Honk();
     380:	0e 94 ef 04 	call	0x9de	; 0x9de <robo_Honk>
            }
            
            if (myrobot.inBlackBox == 0) {
     384:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <myrobot+0x25>
     388:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <myrobot+0x26>
     38c:	89 2b       	or	r24, r25
     38e:	21 f4       	brne	.+8      	; 0x398 <Navig+0x90>
                robo_LED_toggle();
     390:	85 b1       	in	r24, 0x05	; 5
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	89 27       	eor	r24, r25
     396:	85 b9       	out	0x05, r24	; 5
            }

        }


        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
     398:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <myrobot+0x4>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	09 f0       	breq	.+2      	; 0x3a2 <Navig+0x9a>
     3a0:	4e c0       	rjmp	.+156    	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     3a2:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <myrobot+0x23>
     3a6:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <myrobot+0x24>
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	09 f5       	brne	.+66     	; 0x3f0 <Navig+0xe8>
            myrobot.lspeed = 0;
     3ae:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <myrobot+0x3>
     3b2:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = 0;
     3b6:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <myrobot+0x1>
     3ba:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <myrobot>
     3be:	ba cf       	rjmp	.-140    	; 0x334 <Navig+0x2c>

            pressCount++;
            if (pressCount >= 5){
                myrobot.inBlackBox = 1;
            } else {
                if (myrobot.inRoundabout == 0 && myrobot.inBlackBox == 0) {
     3c0:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <myrobot+0x1f>
     3c4:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <myrobot+0x20>
     3c8:	89 2b       	or	r24, r25
     3ca:	69 f4       	brne	.+26     	; 0x3e6 <Navig+0xde>
     3cc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <myrobot+0x25>
     3d0:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <myrobot+0x26>
     3d4:	89 2b       	or	r24, r25
     3d6:	39 f4       	brne	.+14     	; 0x3e6 <Navig+0xde>
                    myrobot.inRoundabout = 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <myrobot+0x20>
     3e0:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <myrobot+0x1f>
     3e4:	c7 cf       	rjmp	.-114    	; 0x374 <Navig+0x6c>
                } else {
                    myrobot.inRoundabout = 0;
     3e6:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x20>
     3ea:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x1f>
     3ee:	c2 cf       	rjmp	.-124    	; 0x374 <Navig+0x6c>
        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
            myrobot.lspeed = 0;
            myrobot.rspeed = 0;
        } else if (myrobot.obstacle == 1) {

            myrobot.inLightField = 0;
     3f0:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <myrobot+0x24>
     3f4:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <myrobot+0x23>
            myrobot.inRoundabout = 0;
     3f8:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x20>
     3fc:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x1f>
            myrobot.lspeed = 30;
     400:	90 92 d5 02 	sts	0x02D5, r9	; 0x8002d5 <myrobot+0x3>
     404:	80 92 d4 02 	sts	0x02D4, r8	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = -30;
     408:	d0 93 d3 02 	sts	0x02D3, r29	; 0x8002d3 <myrobot+0x1>
     40c:	c0 93 d2 02 	sts	0x02D2, r28	; 0x8002d2 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 800); // TUNE HERE
     410:	20 e2       	ldi	r18, 0x20	; 32
     412:	33 e0       	ldi	r19, 0x03	; 3
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <OSTimeDlyHMSM>

            myrobot.lspeed = 60;
     41e:	30 92 d5 02 	sts	0x02D5, r3	; 0x8002d5 <myrobot+0x3>
     422:	20 92 d4 02 	sts	0x02D4, r2	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = 60;
     426:	30 92 d3 02 	sts	0x02D3, r3	; 0x8002d3 <myrobot+0x1>
     42a:	20 92 d2 02 	sts	0x02D2, r2	; 0x8002d2 <myrobot>
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE
     42e:	20 e2       	ldi	r18, 0x20	; 32
     430:	33 e0       	ldi	r19, 0x03	; 3
     432:	41 e0       	ldi	r20, 0x01	; 1
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <OSTimeDlyHMSM>
     43c:	7b cf       	rjmp	.-266    	; 0x334 <Navig+0x2c>

            myrobot.lspeed = 60;
            myrobot.rspeed = 60;
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE

        } else if (lightSense >= 85 && myrobot.inLightField == 0) {
     43e:	95 e5       	ldi	r25, 0x55	; 85
     440:	a9 16       	cp	r10, r25
     442:	b1 04       	cpc	r11, r1
     444:	cc f1       	brlt	.+114    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     446:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <myrobot+0x23>
     44a:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <myrobot+0x24>
     44e:	89 2b       	or	r24, r25
     450:	99 f5       	brne	.+102    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>

            cprintf("Light Detected\n");
     452:	82 e4       	ldi	r24, 0x42	; 66
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	0e 94 45 05 	call	0xa8a	; 0xa8a <cprintf>

            myrobot.inRoundabout = 0;
     45e:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x20>
     462:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x1f>
            myrobot.inLightField = 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <myrobot+0x24>
     46e:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <myrobot+0x23>
            myrobot.lspeed = 30;
     472:	90 92 d5 02 	sts	0x02D5, r9	; 0x8002d5 <myrobot+0x3>
     476:	80 92 d4 02 	sts	0x02D4, r8	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = 30;
     47a:	90 92 d3 02 	sts	0x02D3, r9	; 0x8002d3 <myrobot+0x1>
     47e:	80 92 d2 02 	sts	0x02D2, r8	; 0x8002d2 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 600); // TUNE HERE
     482:	28 e5       	ldi	r18, 0x58	; 88
     484:	32 e0       	ldi	r19, 0x02	; 2
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <OSTimeDlyHMSM>

            myrobot.lspeed = -65;
     490:	8f eb       	ldi	r24, 0xBF	; 191
     492:	9f ef       	ldi	r25, 0xFF	; 255
     494:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <myrobot+0x3>
     498:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = 65;
     49c:	10 93 d3 02 	sts	0x02D3, r17	; 0x8002d3 <myrobot+0x1>
     4a0:	00 93 d2 02 	sts	0x02D2, r16	; 0x8002d2 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 200); // TUNE HERE
     4a4:	28 ec       	ldi	r18, 0xC8	; 200
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <OSTimeDlyHMSM>
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	3e cf       	rjmp	.-388    	; 0x334 <Navig+0x2c>
        } else {

            int sense = myrobot.goal;
     4b8:	a0 90 eb 02 	lds	r10, 0x02EB	; 0x8002eb <myrobot+0x19>
     4bc:	b0 90 ec 02 	lds	r11, 0x02EC	; 0x8002ec <myrobot+0x1a>

            int sensorValue = robo_lineSensor();
     4c0:	0e 94 ca 04 	call	0x994	; 0x994 <robo_lineSensor>
     4c4:	fc 01       	movw	r30, r24

            // if(sensorValue == 100) {
            if(myrobot.inRoundabout == 1) {
     4c6:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <myrobot+0x1f>
     4ca:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <myrobot+0x20>
     4ce:	21 30       	cpi	r18, 0x01	; 1
     4d0:	31 05       	cpc	r19, r1
     4d2:	f9 f4       	brne	.+62     	; 0x512 <__FUSE_REGION_LENGTH__+0x112>

                // roundabout mode

                switch (sensorValue) {
     4d4:	08 97       	sbiw	r24, 0x08	; 8
     4d6:	08 f0       	brcs	.+2      	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
     4d8:	47 c0       	rjmp	.+142    	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
     4da:	ef 58       	subi	r30, 0x8F	; 143
     4dc:	fd 4f       	sbci	r31, 0xFD	; 253
     4de:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__tablejump2__>
     4e2:	bd 02       	muls	r27, r29
     4e4:	bd 02       	muls	r27, r29
     4e6:	a2 02       	muls	r26, r18
     4e8:	79 02       	muls	r23, r25
     4ea:	ac 02       	muls	r26, r28
     4ec:	a2 02       	muls	r26, r18
     4ee:	84 02       	muls	r24, r20
     4f0:	bd 02       	muls	r27, r29
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 1500;
     4f2:	5c ed       	ldi	r21, 0xDC	; 220
     4f4:	a5 2e       	mov	r10, r21
     4f6:	55 e0       	ldi	r21, 0x05	; 5
     4f8:	b5 2e       	mov	r11, r21
                    default: myrobot.lspeed = -30;
                             myrobot.rspeed = -30;
                             break;
                }

                pidControl(sense);
     4fa:	c5 01       	movw	r24, r10
     4fc:	0e 94 c2 00 	call	0x184	; 0x184 <pidControl>
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
     500:	2a e0       	ldi	r18, 0x0A	; 10
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	96 cf       	rjmp	.-212    	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
                            break;

                    case 5: sense = 1000;
                            break;

                    case 6: sense = 500;
     508:	44 ef       	ldi	r20, 0xF4	; 244
     50a:	a4 2e       	mov	r10, r20
     50c:	bb 24       	eor	r11, r11
     50e:	b3 94       	inc	r11
                            break;
     510:	f4 cf       	rjmp	.-24     	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
                // myrobot.rspeed = - (myrobot.prevLeftSpeed * 1.1);
                
                //myrobot.lspeed = - 40;
               // myrobot.rspeed = - 30;

            } else if (myrobot.inLightField == 1) {
     512:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <myrobot+0x23>
     516:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <myrobot+0x24>
     51a:	21 30       	cpi	r18, 0x01	; 1
     51c:	31 05       	cpc	r19, r1
     51e:	91 f5       	brne	.+100    	; 0x584 <__FUSE_REGION_LENGTH__+0x184>

                // light field mode

                robo_LED_toggle();
     520:	25 b1       	in	r18, 0x05	; 5
     522:	31 e0       	ldi	r19, 0x01	; 1
     524:	23 27       	eor	r18, r19
     526:	25 b9       	out	0x05, r18	; 5

                switch (sensorValue) {
     528:	08 97       	sbiw	r24, 0x08	; 8
     52a:	f0 f4       	brcc	.+60     	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
     52c:	e6 56       	subi	r30, 0x66	; 102
     52e:	fd 4f       	sbci	r31, 0xFD	; 253
     530:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__tablejump2__>
     534:	a2 02       	muls	r26, r18
     536:	bd 02       	muls	r27, r29
     538:	a2 02       	muls	r26, r18
     53a:	a7 02       	muls	r26, r23
     53c:	ac 02       	muls	r26, r28
     53e:	a2 02       	muls	r26, r18
     540:	af 02       	muls	r26, r31
     542:	a2 02       	muls	r26, r18
                    case 2: sense = 1000;
     544:	38 ee       	ldi	r19, 0xE8	; 232
     546:	a3 2e       	mov	r10, r19
     548:	33 e0       	ldi	r19, 0x03	; 3
     54a:	b3 2e       	mov	r11, r19
     54c:	d6 cf       	rjmp	.-84     	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 2500;
     54e:	24 ec       	ldi	r18, 0xC4	; 196
     550:	a2 2e       	mov	r10, r18
     552:	29 e0       	ldi	r18, 0x09	; 9
     554:	b2 2e       	mov	r11, r18
                            break;
     556:	d1 cf       	rjmp	.-94     	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>

                    case 4: sense = 0;
     558:	b1 2c       	mov	r11, r1
     55a:	a1 2c       	mov	r10, r1
                            break;
     55c:	ce cf       	rjmp	.-100    	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>

                    case 5: sense = 1000;
                            break;

                    case 6: sense = -500;
     55e:	9c e0       	ldi	r25, 0x0C	; 12
     560:	a9 2e       	mov	r10, r25
     562:	9e ef       	ldi	r25, 0xFE	; 254
     564:	b9 2e       	mov	r11, r25
                            break;
     566:	c9 cf       	rjmp	.-110    	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
                            break;
                    case 0:
                            sense = 1000;
                            break;               
                    
                    default: myrobot.lspeed = -30;
     568:	d0 93 d5 02 	sts	0x02D5, r29	; 0x8002d5 <myrobot+0x3>
     56c:	c0 93 d4 02 	sts	0x02D4, r28	; 0x8002d4 <myrobot+0x2>
                             myrobot.rspeed = -30;
     570:	d0 93 d3 02 	sts	0x02D3, r29	; 0x8002d3 <myrobot+0x1>
     574:	c0 93 d2 02 	sts	0x02D2, r28	; 0x8002d2 <myrobot>
                             break;
     578:	c0 cf       	rjmp	.-128    	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>

                switch (sensorValue) {
                    case 2: sense = 1000;
                            break;
                    
                    case 1: sense = 2000;
     57a:	80 ed       	ldi	r24, 0xD0	; 208
     57c:	a8 2e       	mov	r10, r24
     57e:	87 e0       	ldi	r24, 0x07	; 7
     580:	b8 2e       	mov	r11, r24
     582:	bb cf       	rjmp	.-138    	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
                             break;
                }

                pidControl(sense);

            } else if (myrobot.inBlackBox == 1) {
     584:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <myrobot+0x25>
     588:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <myrobot+0x26>
     58c:	21 30       	cpi	r18, 0x01	; 1
     58e:	31 05       	cpc	r19, r1
     590:	09 f0       	breq	.+2      	; 0x594 <__FUSE_REGION_LENGTH__+0x194>
     592:	3a c0       	rjmp	.+116    	; 0x608 <__FUSE_REGION_LENGTH__+0x208>

                switch (sensorValue) {
     594:	08 97       	sbiw	r24, 0x08	; 8
     596:	08 f0       	brcs	.+2      	; 0x59a <__FUSE_REGION_LENGTH__+0x19a>
     598:	ae c0       	rjmp	.+348    	; 0x6f6 <__FUSE_REGION_LENGTH__+0x2f6>
     59a:	ef 52       	subi	r30, 0x2F	; 47
     59c:	fd 4f       	sbci	r31, 0xFD	; 253
     59e:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__tablejump2__>
     5a2:	fb 02       	muls	r31, r27
     5a4:	1c 03       	fmul	r17, r20
     5a6:	13 03       	mulsu	r17, r19
     5a8:	25 03       	mulsu	r18, r21
     5aa:	2a 03       	fmul	r18, r18
     5ac:	d9 02       	muls	r29, r25
     5ae:	3e 03       	fmul	r19, r22
     5b0:	f4 02       	muls	r31, r20

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
                            break;

                    case 5: myrobot.lspeed = 75;
     5b2:	8b e4       	ldi	r24, 0x4B	; 75
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <myrobot+0x3>
     5ba:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <myrobot+0x2>
                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
     5be:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <myrobot+0x1>
     5c2:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <myrobot>
                             myrobot.rspeed = -30;
                             break;
                }

                if(sensorValue != 0) {
                    myrobot.prevLeftSpeed = myrobot.lspeed;
     5c6:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <myrobot+0x2>
     5ca:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <myrobot+0x3>
     5ce:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <myrobot+0x1c>
     5d2:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <myrobot+0x1b>
                    myrobot.prevRightSpeed = myrobot.rspeed;
     5d6:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <myrobot>
     5da:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <myrobot+0x1>
     5de:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <myrobot+0x1e>
     5e2:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <myrobot+0x1d>
     5e6:	8c cf       	rjmp	.-232    	; 0x500 <__FUSE_REGION_LENGTH__+0x100>

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     5e8:	10 93 d5 02 	sts	0x02D5, r17	; 0x8002d5 <myrobot+0x3>
     5ec:	00 93 d4 02 	sts	0x02D4, r16	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 75;
     5f0:	8b e4       	ldi	r24, 0x4B	; 75
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	e4 cf       	rjmp	.-56     	; 0x5be <__FUSE_REGION_LENGTH__+0x1be>
                            break;

                    case 0: myrobot.lspeed = 30;
     5f6:	90 92 d5 02 	sts	0x02D5, r9	; 0x8002d5 <myrobot+0x3>
     5fa:	80 92 d4 02 	sts	0x02D4, r8	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 60;
     5fe:	30 92 d3 02 	sts	0x02D3, r3	; 0x8002d3 <myrobot+0x1>
     602:	20 92 d2 02 	sts	0x02D2, r2	; 0x8002d2 <myrobot>
     606:	7c cf       	rjmp	.-264    	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
                }

            } else {

                // normal mode
                switch (sensorValue) {
     608:	08 97       	sbiw	r24, 0x08	; 8
     60a:	08 f0       	brcs	.+2      	; 0x60e <__FUSE_REGION_LENGTH__+0x20e>
     60c:	74 c0       	rjmp	.+232    	; 0x6f6 <__FUSE_REGION_LENGTH__+0x2f6>
     60e:	e5 5f       	subi	r30, 0xF5	; 245
     610:	fc 4f       	sbci	r31, 0xFC	; 252
     612:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__tablejump2__>
     616:	4a 03       	fmul	r20, r18
     618:	1c 03       	fmul	r17, r20
     61a:	13 03       	mulsu	r17, r19
     61c:	25 03       	mulsu	r18, r21
     61e:	2a 03       	fmul	r18, r18
     620:	33 03       	mulsu	r19, r19
     622:	3e 03       	fmul	r19, r22
     624:	43 03       	mulsu	r20, r19
                    case 2: myrobot.lspeed = 50;
     626:	d0 92 d5 02 	sts	0x02D5, r13	; 0x8002d5 <myrobot+0x3>
     62a:	c0 92 d4 02 	sts	0x02D4, r12	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 50;
     62e:	d0 92 d3 02 	sts	0x02D3, r13	; 0x8002d3 <myrobot+0x1>
     632:	c0 92 d2 02 	sts	0x02D2, r12	; 0x8002d2 <myrobot>
                            break;
     636:	c7 cf       	rjmp	.-114    	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>
                    
                    case 1: myrobot.lspeed = 45;
     638:	70 92 d5 02 	sts	0x02D5, r7	; 0x8002d5 <myrobot+0x3>
     63c:	60 92 d4 02 	sts	0x02D4, r6	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
     640:	f0 92 d3 02 	sts	0x02D3, r15	; 0x8002d3 <myrobot+0x1>
     644:	e0 92 d2 02 	sts	0x02D2, r14	; 0x8002d2 <myrobot>
                            break;
     648:	be cf       	rjmp	.-132    	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>
                    
                    case 1: myrobot.lspeed = 45;
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
     64a:	10 93 d5 02 	sts	0x02D5, r17	; 0x8002d5 <myrobot+0x3>
     64e:	00 93 d4 02 	sts	0x02D4, r16	; 0x8002d4 <myrobot+0x2>
     652:	f6 cf       	rjmp	.-20     	; 0x640 <__FUSE_REGION_LENGTH__+0x240>
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
     654:	f0 92 d5 02 	sts	0x02D5, r15	; 0x8002d5 <myrobot+0x3>
     658:	e0 92 d4 02 	sts	0x02D4, r14	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 45;
     65c:	70 92 d3 02 	sts	0x02D3, r7	; 0x8002d3 <myrobot+0x1>
     660:	60 92 d2 02 	sts	0x02D2, r6	; 0x8002d2 <myrobot>
                            break;
     664:	b0 cf       	rjmp	.-160    	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>

                    case 5: myrobot.lspeed = - 65;
     666:	8f eb       	ldi	r24, 0xBF	; 191
     668:	9f ef       	ldi	r25, 0xFF	; 255
     66a:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <myrobot+0x3>
     66e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
     672:	10 93 d3 02 	sts	0x02D3, r17	; 0x8002d3 <myrobot+0x1>
     676:	00 93 d2 02 	sts	0x02D2, r16	; 0x8002d2 <myrobot>
                            break;
     67a:	a5 cf       	rjmp	.-182    	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     67c:	f0 92 d5 02 	sts	0x02D5, r15	; 0x8002d5 <myrobot+0x3>
     680:	e0 92 d4 02 	sts	0x02D4, r14	; 0x8002d4 <myrobot+0x2>
     684:	f6 cf       	rjmp	.-20     	; 0x672 <__FUSE_REGION_LENGTH__+0x272>
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     686:	10 93 d5 02 	sts	0x02D5, r17	; 0x8002d5 <myrobot+0x3>
     68a:	00 93 d4 02 	sts	0x02D4, r16	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = - 65;
     68e:	8f eb       	ldi	r24, 0xBF	; 191
     690:	9f ef       	ldi	r25, 0xFF	; 255
     692:	95 cf       	rjmp	.-214    	; 0x5be <__FUSE_REGION_LENGTH__+0x1be>
                            break;

                    case 0: //myrobot.lspeed = - 50;
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
     694:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <myrobot+0x1d>
     698:	70 91 f0 02 	lds	r23, 0x02F0	; 0x8002f0 <myrobot+0x1e>
     69c:	66 5f       	subi	r22, 0xF6	; 246
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	07 2e       	mov	r0, r23
     6a2:	00 0c       	add	r0, r0
     6a4:	88 0b       	sbc	r24, r24
     6a6:	99 0b       	sbc	r25, r25
     6a8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatsisf>
     6ac:	2a e9       	ldi	r18, 0x9A	; 154
     6ae:	39 e9       	ldi	r19, 0x99	; 153
     6b0:	49 e1       	ldi	r20, 0x19	; 25
     6b2:	5f e3       	ldi	r21, 0x3F	; 63
     6b4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__mulsf3>
     6b8:	90 58       	subi	r25, 0x80	; 128
     6ba:	0e 94 31 0c 	call	0x1862	; 0x1862 <__fixsfsi>
     6be:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <myrobot+0x3>
     6c2:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
     6c6:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <myrobot+0x1b>
     6ca:	70 91 ee 02 	lds	r23, 0x02EE	; 0x8002ee <myrobot+0x1c>
     6ce:	07 2e       	mov	r0, r23
     6d0:	00 0c       	add	r0, r0
     6d2:	88 0b       	sbc	r24, r24
     6d4:	99 0b       	sbc	r25, r25
     6d6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatsisf>
     6da:	2a e9       	ldi	r18, 0x9A	; 154
     6dc:	39 e9       	ldi	r19, 0x99	; 153
     6de:	49 e1       	ldi	r20, 0x19	; 25
     6e0:	5f e3       	ldi	r21, 0x3F	; 63
     6e2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__mulsf3>
     6e6:	90 58       	subi	r25, 0x80	; 128
     6e8:	0e 94 31 0c 	call	0x1862	; 0x1862 <__fixsfsi>
     6ec:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <myrobot+0x1>
     6f0:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <myrobot>
     6f4:	05 cf       	rjmp	.-502    	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     6f6:	d0 93 d5 02 	sts	0x02D5, r29	; 0x8002d5 <myrobot+0x3>
     6fa:	c0 93 d4 02 	sts	0x02D4, r28	; 0x8002d4 <myrobot+0x2>
                             myrobot.rspeed = -30;
     6fe:	d0 93 d3 02 	sts	0x02D3, r29	; 0x8002d3 <myrobot+0x1>
     702:	c0 93 d2 02 	sts	0x02D2, r28	; 0x8002d2 <myrobot>
                             break;
     706:	5f cf       	rjmp	.-322    	; 0x5c6 <__FUSE_REGION_LENGTH__+0x1c6>

00000708 <ADC_init>:
     708:	80 e4       	ldi	r24, 0x40	; 64
     70a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     70e:	86 e8       	ldi	r24, 0x86	; 134
     710:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     714:	08 95       	ret

00000716 <ADC_read>:
     716:	f8 94       	cli
     718:	80 64       	ori	r24, 0x40	; 64
     71a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     71e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     722:	80 64       	ori	r24, 0x40	; 64
     724:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     728:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     72c:	84 ff       	sbrs	r24, 4
     72e:	fc cf       	rjmp	.-8      	; 0x728 <ADC_read+0x12>
     730:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     734:	80 61       	ori	r24, 0x10	; 16
     736:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     73a:	78 94       	sei
     73c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     740:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     744:	93 70       	andi	r25, 0x03	; 3
     746:	08 95       	ret

00000748 <PWM8_write>:
     748:	81 11       	cpse	r24, r1
     74a:	05 c0       	rjmp	.+10     	; 0x756 <PWM8_write+0xe>
     74c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     750:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     754:	08 95       	ret
     756:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     75a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     75e:	08 95       	ret

00000760 <motor_init>:
     760:	8a b1       	in	r24, 0x0a	; 10
     762:	80 6f       	ori	r24, 0xF0	; 240
     764:	8a b9       	out	0x0a, r24	; 10
     766:	8b b1       	in	r24, 0x0b	; 11
     768:	8f 70       	andi	r24, 0x0F	; 15
     76a:	8b b9       	out	0x0b, r24	; 11
     76c:	81 ea       	ldi	r24, 0xA1	; 161
     76e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     778:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     77c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     780:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     784:	a8 e8       	ldi	r26, 0x88	; 136
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	1c 92       	st	X, r1
     78a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     78e:	ea e8       	ldi	r30, 0x8A	; 138
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	10 82       	st	Z, r1
     794:	84 b1       	in	r24, 0x04	; 4
     796:	86 60       	ori	r24, 0x06	; 6
     798:	84 b9       	out	0x04, r24	; 4
     79a:	11 96       	adiw	r26, 0x01	; 1
     79c:	1c 92       	st	X, r1
     79e:	1e 92       	st	-X, r1
     7a0:	11 82       	std	Z+1, r1	; 0x01
     7a2:	10 82       	st	Z, r1
     7a4:	08 95       	ret

000007a6 <motor_set_speed>:
     7a6:	77 ff       	sbrs	r23, 7
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <motor_set_speed+0x8>
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	65 36       	cpi	r22, 0x65	; 101
     7b0:	71 05       	cpc	r23, r1
     7b2:	14 f0       	brlt	.+4      	; 0x7b8 <motor_set_speed+0x12>
     7b4:	64 e6       	ldi	r22, 0x64	; 100
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	9b 01       	movw	r18, r22
     7ba:	22 0f       	add	r18, r18
     7bc:	33 1f       	adc	r19, r19
     7be:	75 95       	asr	r23
     7c0:	67 95       	ror	r22
     7c2:	62 0f       	add	r22, r18
     7c4:	73 1f       	adc	r23, r19
     7c6:	81 11       	cpse	r24, r1
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <motor_set_speed+0x36>
     7ca:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     7ce:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     7d2:	70 93 7c 04 	sts	0x047C, r23	; 0x80047c <rightWst+0x1>
     7d6:	60 93 7b 04 	sts	0x047B, r22	; 0x80047b <rightWst>
     7da:	08 95       	ret
     7dc:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     7e0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     7e4:	70 93 80 04 	sts	0x0480, r23	; 0x800480 <leftWst+0x1>
     7e8:	60 93 7f 04 	sts	0x047F, r22	; 0x80047f <leftWst>
     7ec:	08 95       	ret

000007ee <motor_set_dir>:
     7ee:	cf 93       	push	r28
     7f0:	c6 2f       	mov	r28, r22
     7f2:	26 2f       	mov	r18, r22
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	81 11       	cpse	r24, r1
     7f8:	2b c0       	rjmp	.+86     	; 0x850 <motor_set_dir+0x62>
     7fa:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <rightWst+0x2>
     7fe:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <rightWst+0x3>
     802:	82 17       	cp	r24, r18
     804:	93 07       	cpc	r25, r19
     806:	59 f0       	breq	.+22     	; 0x81e <motor_set_dir+0x30>
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <motor_set_speed>
     812:	8f e9       	ldi	r24, 0x9F	; 159
     814:	9f e0       	ldi	r25, 0x0F	; 15
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <motor_set_dir+0x28>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <motor_set_dir+0x2e>
     81c:	00 00       	nop
     81e:	c1 11       	cpse	r28, r1
     820:	0e c0       	rjmp	.+28     	; 0x83e <motor_set_dir+0x50>
     822:	5e 98       	cbi	0x0b, 6	; 11
     824:	5f 9a       	sbi	0x0b, 7	; 11
     826:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <rightWst+0x3>
     82a:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <rightWst+0x2>
     82e:	8f e3       	ldi	r24, 0x3F	; 63
     830:	9c e9       	ldi	r25, 0x9C	; 156
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <motor_set_dir+0x44>
     836:	00 c0       	rjmp	.+0      	; 0x838 <motor_set_dir+0x4a>
     838:	00 00       	nop
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret
     83e:	5e 9a       	sbi	0x0b, 6	; 11
     840:	5f 98       	cbi	0x0b, 7	; 11
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <rightWst+0x3>
     84a:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <rightWst+0x2>
     84e:	ef cf       	rjmp	.-34     	; 0x82e <motor_set_dir+0x40>
     850:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <leftWst+0x2>
     854:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <leftWst+0x3>
     858:	82 17       	cp	r24, r18
     85a:	93 07       	cpc	r25, r19
     85c:	59 f0       	breq	.+22     	; 0x874 <motor_set_dir+0x86>
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <motor_set_speed>
     868:	8f e9       	ldi	r24, 0x9F	; 159
     86a:	9f e0       	ldi	r25, 0x0F	; 15
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <motor_set_dir+0x7e>
     870:	00 c0       	rjmp	.+0      	; 0x872 <motor_set_dir+0x84>
     872:	00 00       	nop
     874:	c1 11       	cpse	r28, r1
     876:	07 c0       	rjmp	.+14     	; 0x886 <motor_set_dir+0x98>
     878:	5c 9a       	sbi	0x0b, 4	; 11
     87a:	5d 98       	cbi	0x0b, 5	; 11
     87c:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <leftWst+0x3>
     880:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <leftWst+0x2>
     884:	d4 cf       	rjmp	.-88     	; 0x82e <motor_set_dir+0x40>
     886:	5c 98       	cbi	0x0b, 4	; 11
     888:	5d 9a       	sbi	0x0b, 5	; 11
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <leftWst+0x3>
     892:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <leftWst+0x2>
     896:	cb cf       	rjmp	.-106    	; 0x82e <motor_set_dir+0x40>

00000898 <robo_motorSpeed>:
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24
     8a2:	8b 01       	movw	r16, r22
     8a4:	97 ff       	sbrs	r25, 7
     8a6:	1c c0       	rjmp	.+56     	; 0x8e0 <robo_motorSpeed+0x48>
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	0e 94 f7 03 	call	0x7ee	; 0x7ee <motor_set_dir>
     8b0:	d1 95       	neg	r29
     8b2:	c1 95       	neg	r28
     8b4:	d1 09       	sbc	r29, r1
     8b6:	17 ff       	sbrs	r17, 7
     8b8:	18 c0       	rjmp	.+48     	; 0x8ea <robo_motorSpeed+0x52>
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	0e 94 f7 03 	call	0x7ee	; 0x7ee <motor_set_dir>
     8c2:	11 95       	neg	r17
     8c4:	01 95       	neg	r16
     8c6:	11 09       	sbc	r17, r1
     8c8:	b8 01       	movw	r22, r16
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <motor_set_speed>
     8d0:	be 01       	movw	r22, r28
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <motor_set_speed>
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 f7 03 	call	0x7ee	; 0x7ee <motor_set_dir>
     8e8:	e6 cf       	rjmp	.-52     	; 0x8b6 <robo_motorSpeed+0x1e>
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 f7 03 	call	0x7ee	; 0x7ee <motor_set_dir>
     8f2:	ea cf       	rjmp	.-44     	; 0x8c8 <robo_motorSpeed+0x30>

000008f4 <USART0_init>:
     8f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     8f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     8fc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     900:	88 e1       	ldi	r24, 0x18	; 24
     902:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     90c:	08 95       	ret

0000090e <cputchar>:
     90e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     912:	95 ff       	sbrs	r25, 5
     914:	fc cf       	rjmp	.-8      	; 0x90e <cputchar>
     916:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     91a:	08 95       	ret

0000091c <cgetchar>:
     91c:	cf 93       	push	r28
     91e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     922:	87 ff       	sbrs	r24, 7
     924:	fc cf       	rjmp	.-8      	; 0x91e <cgetchar+0x2>
     926:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     92a:	8c 2f       	mov	r24, r28
     92c:	0e 94 87 04 	call	0x90e	; 0x90e <cputchar>
     930:	8c 2f       	mov	r24, r28
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <cputs>:
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	89 91       	ld	r24, Y+
     93e:	81 11       	cpse	r24, r1
     940:	03 c0       	rjmp	.+6      	; 0x948 <cputs+0x12>
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret
     948:	0e 94 87 04 	call	0x90e	; 0x90e <cputchar>
     94c:	f7 cf       	rjmp	.-18     	; 0x93c <cputs+0x6>

0000094e <robo_proxSensor>:
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	0e 94 8b 03 	call	0x716	; 0x716 <ADC_read>
     954:	21 e0       	ldi	r18, 0x01	; 1
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	84 36       	cpi	r24, 0x64	; 100
     95a:	91 05       	cpc	r25, r1
     95c:	10 f0       	brcs	.+4      	; 0x962 <robo_proxSensor+0x14>
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	c9 01       	movw	r24, r18
     964:	08 95       	ret

00000966 <robo_lightSensor>:
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	0e 94 8b 03 	call	0x716	; 0x716 <ADC_read>
     96c:	2b ef       	ldi	r18, 0xFB	; 251
     96e:	ac 01       	movw	r20, r24
     970:	24 03       	mulsu	r18, r20
     972:	c0 01       	movw	r24, r0
     974:	25 9f       	mul	r18, r21
     976:	90 0d       	add	r25, r0
     978:	11 24       	eor	r1, r1
     97a:	85 50       	subi	r24, 0x05	; 5
     97c:	9c 4e       	sbci	r25, 0xEC	; 236
     97e:	63 e3       	ldi	r22, 0x33	; 51
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__divmodhi4>
     986:	cb 01       	movw	r24, r22
     988:	65 36       	cpi	r22, 0x65	; 101
     98a:	71 05       	cpc	r23, r1
     98c:	14 f0       	brlt	.+4      	; 0x992 <robo_lightSensor+0x2c>
     98e:	84 e6       	ldi	r24, 0x64	; 100
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	08 95       	ret

00000994 <robo_lineSensor>:
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	c0 e0       	ldi	r28, 0x00	; 0
     99a:	d1 e0       	ldi	r29, 0x01	; 1
     99c:	cc 0f       	add	r28, r28
     99e:	8d 2f       	mov	r24, r29
     9a0:	0e 94 8b 03 	call	0x716	; 0x716 <ADC_read>
     9a4:	8c 32       	cpi	r24, 0x2C	; 44
     9a6:	91 40       	sbci	r25, 0x01	; 1
     9a8:	0c f4       	brge	.+2      	; 0x9ac <robo_lineSensor+0x18>
     9aa:	c1 60       	ori	r28, 0x01	; 1
     9ac:	df 5f       	subi	r29, 0xFF	; 255
     9ae:	d4 30       	cpi	r29, 0x04	; 4
     9b0:	a9 f7       	brne	.-22     	; 0x99c <robo_lineSensor+0x8>
     9b2:	8c 2f       	mov	r24, r28
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <robo_bumpSensorR>:
     9bc:	83 b1       	in	r24, 0x03	; 3
     9be:	82 95       	swap	r24
     9c0:	8f 70       	andi	r24, 0x0F	; 15
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	89 27       	eor	r24, r25
     9c6:	81 70       	andi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	08 95       	ret

000009cc <robo_bumpSensorL>:
     9cc:	83 b1       	in	r24, 0x03	; 3
     9ce:	86 95       	lsr	r24
     9d0:	86 95       	lsr	r24
     9d2:	86 95       	lsr	r24
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	89 27       	eor	r24, r25
     9d8:	81 70       	andi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	08 95       	ret

000009de <robo_Honk>:
     9de:	5b 9a       	sbi	0x0b, 3	; 11
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	85 ea       	ldi	r24, 0xA5	; 165
     9e4:	9e e0       	ldi	r25, 0x0E	; 14
     9e6:	21 50       	subi	r18, 0x01	; 1
     9e8:	80 40       	sbci	r24, 0x00	; 0
     9ea:	90 40       	sbci	r25, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <robo_Honk+0x8>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <robo_Honk+0x12>
     9f0:	00 00       	nop
     9f2:	5b 98       	cbi	0x0b, 3	; 11
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	85 ea       	ldi	r24, 0xA5	; 165
     9f8:	9e e0       	ldi	r25, 0x0E	; 14
     9fa:	21 50       	subi	r18, 0x01	; 1
     9fc:	80 40       	sbci	r24, 0x00	; 0
     9fe:	90 40       	sbci	r25, 0x00	; 0
     a00:	e1 f7       	brne	.-8      	; 0x9fa <robo_Honk+0x1c>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <robo_Honk+0x26>
     a04:	00 00       	nop
     a06:	08 95       	ret

00000a08 <robo_checkBattery>:
     a08:	85 e0       	ldi	r24, 0x05	; 5
     a0a:	0e 94 8b 03 	call	0x716	; 0x716 <ADC_read>
     a0e:	84 3f       	cpi	r24, 0xF4	; 244
     a10:	91 40       	sbci	r25, 0x01	; 1
     a12:	10 f4       	brcc	.+4      	; 0xa18 <robo_checkBattery+0x10>
     a14:	28 9a       	sbi	0x05, 0	; 5
     a16:	08 95       	ret
     a18:	28 98       	cbi	0x05, 0	; 5
     a1a:	08 95       	ret

00000a1c <robo_goPressed>:
     a1c:	89 b1       	in	r24, 0x09	; 9
     a1e:	82 fb       	bst	r24, 2
     a20:	88 27       	eor	r24, r24
     a22:	80 f9       	bld	r24, 0
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	89 27       	eor	r24, r25
     a28:	08 95       	ret

00000a2a <robo_wait4goPress>:
     a2a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <robo_goPressed>
     a2e:	88 23       	and	r24, r24
     a30:	e1 f3       	breq	.-8      	; 0xa2a <robo_wait4goPress>
     a32:	08 95       	ret

00000a34 <OS_ticks_init>:
     a34:	f8 94       	cli
     a36:	85 e0       	ldi	r24, 0x05	; 5
     a38:	85 bd       	out	0x25, r24	; 37
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     a40:	84 e6       	ldi	r24, 0x64	; 100
     a42:	86 bd       	out	0x26, r24	; 38
     a44:	78 94       	sei
     a46:	08 95       	ret

00000a48 <HAL_init>:
     a48:	87 e6       	ldi	r24, 0x67	; 103
     a4a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <USART0_init>
     a4e:	0c 94 84 03 	jmp	0x708	; 0x708 <ADC_init>

00000a52 <robo_Setup>:
     a52:	0e 94 24 05 	call	0xa48	; 0xa48 <HAL_init>
     a56:	0e 94 b0 03 	call	0x760	; 0x760 <motor_init>
     a5a:	53 9a       	sbi	0x0a, 3	; 10
     a5c:	5b 98       	cbi	0x0b, 3	; 11
     a5e:	20 9a       	sbi	0x04, 0	; 4
     a60:	52 98       	cbi	0x0a, 2	; 10
     a62:	5a 9a       	sbi	0x0b, 2	; 11
     a64:	24 98       	cbi	0x04, 4	; 4
     a66:	23 98       	cbi	0x04, 3	; 4
     a68:	85 b1       	in	r24, 0x05	; 5
     a6a:	88 61       	ori	r24, 0x18	; 24
     a6c:	85 b9       	out	0x05, r24	; 5
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 f7 03 	call	0x7ee	; 0x7ee <motor_set_dir>
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <motor_set_dir>
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0c 94 4c 04 	jmp	0x898	; 0x898 <robo_motorSpeed>

00000a8a <cprintf>:
     a8a:	4f 92       	push	r4
     a8c:	5f 92       	push	r5
     a8e:	6f 92       	push	r6
     a90:	7f 92       	push	r7
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	de 01       	movw	r26, r28
     ab0:	53 96       	adiw	r26, 0x13	; 19
     ab2:	ed 91       	ld	r30, X+
     ab4:	fd 91       	ld	r31, X+
     ab6:	8d 01       	movw	r16, r26
     ab8:	5a e0       	ldi	r21, 0x0A	; 10
     aba:	65 2e       	mov	r6, r21
     abc:	71 2c       	mov	r7, r1
     abe:	80 81       	ld	r24, Z
     ac0:	85 32       	cpi	r24, 0x25	; 37
     ac2:	81 f4       	brne	.+32     	; 0xae4 <cprintf+0x5a>
     ac4:	5f 01       	movw	r10, r30
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	a8 0e       	add	r10, r24
     aca:	b1 1c       	adc	r11, r1
     acc:	81 81       	ldd	r24, Z+1	; 0x01
     ace:	84 36       	cpi	r24, 0x64	; 100
     ad0:	09 f4       	brne	.+2      	; 0xad4 <cprintf+0x4a>
     ad2:	50 c0       	rjmp	.+160    	; 0xb74 <cprintf+0xea>
     ad4:	90 f4       	brcc	.+36     	; 0xafa <cprintf+0x70>
     ad6:	83 36       	cpi	r24, 0x63	; 99
     ad8:	61 f4       	brne	.+24     	; 0xaf2 <cprintf+0x68>
     ada:	f8 01       	movw	r30, r16
     adc:	80 81       	ld	r24, Z
     ade:	0e 5f       	subi	r16, 0xFE	; 254
     ae0:	1f 4f       	sbci	r17, 0xFF	; 255
     ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <cprintf+0x68>
     ae4:	88 23       	and	r24, r24
     ae6:	09 f4       	brne	.+2      	; 0xaea <cprintf+0x60>
     ae8:	5d c0       	rjmp	.+186    	; 0xba4 <cprintf+0x11a>
     aea:	5f 01       	movw	r10, r30
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	a9 1a       	sub	r10, r25
     af0:	b9 0a       	sbc	r11, r25
     af2:	0e 94 87 04 	call	0x90e	; 0x90e <cputchar>
     af6:	f5 01       	movw	r30, r10
     af8:	e2 cf       	rjmp	.-60     	; 0xabe <cprintf+0x34>
     afa:	83 37       	cpi	r24, 0x73	; 115
     afc:	71 f1       	breq	.+92     	; 0xb5a <cprintf+0xd0>
     afe:	30 e1       	ldi	r19, 0x10	; 16
     b00:	83 2e       	mov	r8, r19
     b02:	91 2c       	mov	r9, r1
     b04:	e1 2c       	mov	r14, r1
     b06:	40 e1       	ldi	r20, 0x10	; 16
     b08:	f4 2e       	mov	r15, r20
     b0a:	88 37       	cpi	r24, 0x78	; 120
     b0c:	91 f7       	brne	.-28     	; 0xaf2 <cprintf+0x68>
     b0e:	f8 01       	movw	r30, r16
     b10:	c0 80       	ld	r12, Z
     b12:	d1 80       	ldd	r13, Z+1	; 0x01
     b14:	0e 5f       	subi	r16, 0xFE	; 254
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
     b18:	84 36       	cpi	r24, 0x64	; 100
     b1a:	59 f4       	brne	.+22     	; 0xb32 <cprintf+0xa8>
     b1c:	d7 fe       	sbrs	r13, 7
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <cprintf+0xa2>
     b20:	d1 94       	neg	r13
     b22:	c1 94       	neg	r12
     b24:	d1 08       	sbc	r13, r1
     b26:	8d e2       	ldi	r24, 0x2D	; 45
     b28:	0e 94 87 04 	call	0x90e	; 0x90e <cputchar>
     b2c:	ce 14       	cp	r12, r14
     b2e:	df 04       	cpc	r13, r15
     b30:	48 f1       	brcs	.+82     	; 0xb84 <cprintf+0xfa>
     b32:	c6 01       	movw	r24, r12
     b34:	b7 01       	movw	r22, r14
     b36:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__udivmodhi4>
     b3a:	2c 01       	movw	r4, r24
     b3c:	68 5f       	subi	r22, 0xF8	; 248
     b3e:	7d 4f       	sbci	r23, 0xFD	; 253
     b40:	fb 01       	movw	r30, r22
     b42:	80 81       	ld	r24, Z
     b44:	0e 94 87 04 	call	0x90e	; 0x90e <cputchar>
     b48:	62 01       	movw	r12, r4
     b4a:	c7 01       	movw	r24, r14
     b4c:	b4 01       	movw	r22, r8
     b4e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__udivmodhi4>
     b52:	7b 01       	movw	r14, r22
     b54:	67 2b       	or	r22, r23
     b56:	69 f7       	brne	.-38     	; 0xb32 <cprintf+0xa8>
     b58:	ce cf       	rjmp	.-100    	; 0xaf6 <cprintf+0x6c>
     b5a:	f8 01       	movw	r30, r16
     b5c:	e0 80       	ld	r14, Z
     b5e:	f1 80       	ldd	r15, Z+1	; 0x01
     b60:	0e 5f       	subi	r16, 0xFE	; 254
     b62:	1f 4f       	sbci	r17, 0xFF	; 255
     b64:	f7 01       	movw	r30, r14
     b66:	81 91       	ld	r24, Z+
     b68:	7f 01       	movw	r14, r30
     b6a:	88 23       	and	r24, r24
     b6c:	21 f2       	breq	.-120    	; 0xaf6 <cprintf+0x6c>
     b6e:	0e 94 87 04 	call	0x90e	; 0x90e <cputchar>
     b72:	f8 cf       	rjmp	.-16     	; 0xb64 <cprintf+0xda>
     b74:	9a e0       	ldi	r25, 0x0A	; 10
     b76:	89 2e       	mov	r8, r25
     b78:	91 2c       	mov	r9, r1
     b7a:	20 e1       	ldi	r18, 0x10	; 16
     b7c:	e2 2e       	mov	r14, r18
     b7e:	27 e2       	ldi	r18, 0x27	; 39
     b80:	f2 2e       	mov	r15, r18
     b82:	c5 cf       	rjmp	.-118    	; 0xb0e <cprintf+0x84>
     b84:	c7 01       	movw	r24, r14
     b86:	b3 01       	movw	r22, r6
     b88:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__udivmodhi4>
     b8c:	7b 01       	movw	r14, r22
     b8e:	62 30       	cpi	r22, 0x02	; 2
     b90:	71 05       	cpc	r23, r1
     b92:	60 f6       	brcc	.-104    	; 0xb2c <cprintf+0xa2>
     b94:	c6 01       	movw	r24, r12
     b96:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__udivmodhi4>
     b9a:	fb 01       	movw	r30, r22
     b9c:	e8 5f       	subi	r30, 0xF8	; 248
     b9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ba0:	80 81       	ld	r24, Z
     ba2:	a7 cf       	rjmp	.-178    	; 0xaf2 <cprintf+0x68>
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	7f 90       	pop	r7
     bc2:	6f 90       	pop	r6
     bc4:	5f 90       	pop	r5
     bc6:	4f 90       	pop	r4
     bc8:	08 95       	ret

00000bca <OSStartHighRdy>:
     bca:	00 91 84 04 	lds	r16, 0x0484	; 0x800484 <OSRunning>
     bce:	03 95       	inc	r16
     bd0:	00 93 84 04 	sts	0x0484, r16	; 0x800484 <OSRunning>
     bd4:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <OSTCBHighRdy>
     bd8:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <OSTCBHighRdy+0x1>
     bdc:	c1 91       	ld	r28, Z+
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	d1 91       	ld	r29, Z+
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f 91       	pop	r16
     be6:	0f bf       	out	0x3f, r16	; 63
     be8:	ff 91       	pop	r31
     bea:	ef 91       	pop	r30
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	7f 90       	pop	r7
     c1a:	6f 90       	pop	r6
     c1c:	5f 90       	pop	r5
     c1e:	4f 90       	pop	r4
     c20:	3f 90       	pop	r3
     c22:	2f 90       	pop	r2
     c24:	1f 90       	pop	r1
     c26:	0f 90       	pop	r0
     c28:	08 95       	ret

00000c2a <OSCtxSw>:
     c2a:	0f 92       	push	r0
     c2c:	1f 92       	push	r1
     c2e:	2f 92       	push	r2
     c30:	3f 92       	push	r3
     c32:	4f 92       	push	r4
     c34:	5f 92       	push	r5
     c36:	6f 92       	push	r6
     c38:	7f 92       	push	r7
     c3a:	8f 92       	push	r8
     c3c:	9f 92       	push	r9
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ef 93       	push	r30
     c68:	ff 93       	push	r31
     c6a:	0f b7       	in	r16, 0x3f	; 63
     c6c:	0f 93       	push	r16
     c6e:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <OSTCBCur>
     c72:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <OSTCBCur+0x1>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	c1 93       	st	Z+, r28
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	d1 93       	st	Z+, r29
     c7e:	00 91 89 04 	lds	r16, 0x0489	; 0x800489 <OSPrioHighRdy>
     c82:	00 93 8a 04 	sts	0x048A, r16	; 0x80048a <OSPrioCur>
     c86:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <OSTCBHighRdy>
     c8a:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <OSTCBHighRdy+0x1>
     c8e:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <OSTCBCur>
     c92:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <OSTCBCur+0x1>
     c96:	c1 91       	ld	r28, Z+
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	d1 91       	ld	r29, Z+
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f 91       	pop	r16
     ca0:	0f bf       	out	0x3f, r16	; 63
     ca2:	ff 91       	pop	r31
     ca4:	ef 91       	pop	r30
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	cf 90       	pop	r12
     cca:	bf 90       	pop	r11
     ccc:	af 90       	pop	r10
     cce:	9f 90       	pop	r9
     cd0:	8f 90       	pop	r8
     cd2:	7f 90       	pop	r7
     cd4:	6f 90       	pop	r6
     cd6:	5f 90       	pop	r5
     cd8:	4f 90       	pop	r4
     cda:	3f 90       	pop	r3
     cdc:	2f 90       	pop	r2
     cde:	1f 90       	pop	r1
     ce0:	0f 90       	pop	r0
     ce2:	08 95       	ret

00000ce4 <OSIntCtxSw>:
     ce4:	00 91 89 04 	lds	r16, 0x0489	; 0x800489 <OSPrioHighRdy>
     ce8:	00 93 8a 04 	sts	0x048A, r16	; 0x80048a <OSPrioCur>
     cec:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <OSTCBHighRdy>
     cf0:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <OSTCBHighRdy+0x1>
     cf4:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <OSTCBCur>
     cf8:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <OSTCBCur+0x1>
     cfc:	c1 91       	ld	r28, Z+
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	d1 91       	ld	r29, Z+
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f 91       	pop	r16
     d06:	0f bf       	out	0x3f, r16	; 63
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	bf 91       	pop	r27
     d12:	af 91       	pop	r26
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	7f 91       	pop	r23
     d1a:	6f 91       	pop	r22
     d1c:	5f 91       	pop	r21
     d1e:	4f 91       	pop	r20
     d20:	3f 91       	pop	r19
     d22:	2f 91       	pop	r18
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	bf 90       	pop	r11
     d32:	af 90       	pop	r10
     d34:	9f 90       	pop	r9
     d36:	8f 90       	pop	r8
     d38:	7f 90       	pop	r7
     d3a:	6f 90       	pop	r6
     d3c:	5f 90       	pop	r5
     d3e:	4f 90       	pop	r4
     d40:	3f 90       	pop	r3
     d42:	2f 90       	pop	r2
     d44:	1f 90       	pop	r1
     d46:	0f 90       	pop	r0
     d48:	08 95       	ret

00000d4a <OSTickISR>:
     d4a:	0f 92       	push	r0
     d4c:	1f 92       	push	r1
     d4e:	2f 92       	push	r2
     d50:	3f 92       	push	r3
     d52:	4f 92       	push	r4
     d54:	5f 92       	push	r5
     d56:	6f 92       	push	r6
     d58:	7f 92       	push	r7
     d5a:	8f 92       	push	r8
     d5c:	9f 92       	push	r9
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	2f 93       	push	r18
     d70:	3f 93       	push	r19
     d72:	4f 93       	push	r20
     d74:	5f 93       	push	r21
     d76:	6f 93       	push	r22
     d78:	7f 93       	push	r23
     d7a:	8f 93       	push	r24
     d7c:	9f 93       	push	r25
     d7e:	af 93       	push	r26
     d80:	bf 93       	push	r27
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
     d8a:	0f b7       	in	r16, 0x3f	; 63
     d8c:	00 68       	ori	r16, 0x80	; 128
     d8e:	0f 93       	push	r16
     d90:	00 91 9b 04 	lds	r16, 0x049B	; 0x80049b <OSIntNesting>
     d94:	03 95       	inc	r16
     d96:	00 93 9b 04 	sts	0x049B, r16	; 0x80049b <OSIntNesting>
     d9a:	01 30       	cpi	r16, 0x01	; 1
     d9c:	41 f4       	brne	.+16     	; 0xdae <_not_first_int>
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <OSTCBCur>
     da6:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <OSTCBCur+0x1>
     daa:	c1 93       	st	Z+, r28
     dac:	d1 93       	st	Z+, r29

00000dae <_not_first_int>:
     dae:	04 e6       	ldi	r16, 0x64	; 100
     db0:	06 bd       	out	0x26, r16	; 38
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	1f 2e       	mov	r1, r31
     db6:	78 94       	sei
     db8:	0e 94 08 08 	call	0x1010	; 0x1010 <OSTimeTick>
     dbc:	00 00       	nop
     dbe:	0e 94 7b 07 	call	0xef6	; 0xef6 <OSIntExit>
     dc2:	0f 91       	pop	r16
     dc4:	0f bf       	out	0x3f, r16	; 63
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	bf 91       	pop	r27
     dd0:	af 91       	pop	r26
     dd2:	9f 91       	pop	r25
     dd4:	8f 91       	pop	r24
     dd6:	7f 91       	pop	r23
     dd8:	6f 91       	pop	r22
     dda:	5f 91       	pop	r21
     ddc:	4f 91       	pop	r20
     dde:	3f 91       	pop	r19
     de0:	2f 91       	pop	r18
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	9f 90       	pop	r9
     df4:	8f 90       	pop	r8
     df6:	7f 90       	pop	r7
     df8:	6f 90       	pop	r6
     dfa:	5f 90       	pop	r5
     dfc:	4f 90       	pop	r4
     dfe:	3f 90       	pop	r3
     e00:	2f 90       	pop	r2
     e02:	1f 90       	pop	r1
     e04:	0f 90       	pop	r0
     e06:	08 95       	ret

00000e08 <OSTaskStkInit>:
     e08:	fa 01       	movw	r30, r20
     e0a:	80 83       	st	Z, r24
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	90 83       	st	Z, r25
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	10 82       	st	Z, r1
     e14:	31 97       	sbiw	r30, 0x01	; 1
     e16:	10 82       	st	Z, r1
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	10 82       	st	Z, r1
     e1c:	31 97       	sbiw	r30, 0x01	; 1
     e1e:	10 82       	st	Z, r1
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	10 82       	st	Z, r1
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	10 82       	st	Z, r1
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	10 82       	st	Z, r1
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	10 82       	st	Z, r1
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	10 82       	st	Z, r1
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	10 82       	st	Z, r1
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	10 82       	st	Z, r1
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	10 82       	st	Z, r1
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	10 82       	st	Z, r1
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	10 82       	st	Z, r1
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	10 82       	st	Z, r1
     e4c:	31 97       	sbiw	r30, 0x01	; 1
     e4e:	10 82       	st	Z, r1
     e50:	31 97       	sbiw	r30, 0x01	; 1
     e52:	10 82       	st	Z, r1
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	10 82       	st	Z, r1
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	10 82       	st	Z, r1
     e5c:	31 97       	sbiw	r30, 0x01	; 1
     e5e:	10 82       	st	Z, r1
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	10 82       	st	Z, r1
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	10 82       	st	Z, r1
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	10 82       	st	Z, r1
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	10 82       	st	Z, r1
     e70:	31 97       	sbiw	r30, 0x01	; 1
     e72:	60 83       	st	Z, r22
     e74:	31 97       	sbiw	r30, 0x01	; 1
     e76:	70 83       	st	Z, r23
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	10 82       	st	Z, r1
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	10 82       	st	Z, r1
     e80:	31 97       	sbiw	r30, 0x01	; 1
     e82:	10 82       	st	Z, r1
     e84:	31 97       	sbiw	r30, 0x01	; 1
     e86:	10 82       	st	Z, r1
     e88:	31 97       	sbiw	r30, 0x01	; 1
     e8a:	10 82       	st	Z, r1
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	10 82       	st	Z, r1
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	80 e8       	ldi	r24, 0x80	; 128
     e94:	80 83       	st	Z, r24
     e96:	ca 01       	movw	r24, r20
     e98:	83 97       	sbiw	r24, 0x23	; 35
     e9a:	08 95       	ret

00000e9c <OSTaskCreateHook>:
     e9c:	08 95       	ret

00000e9e <OSTaskDelHook>:
     e9e:	08 95       	ret

00000ea0 <OSTaskSwHook>:
     ea0:	08 95       	ret

00000ea2 <OSTaskStatHook>:
     ea2:	08 95       	ret

00000ea4 <OSTimeTickHook>:
     ea4:	08 95       	ret

00000ea6 <OSInitHookBegin>:
     ea6:	08 95       	ret

00000ea8 <OSInitHookEnd>:
     ea8:	08 95       	ret

00000eaa <OSTaskIdleHook>:
     eaa:	08 95       	ret

00000eac <OSTCBInitHook>:
     eac:	08 95       	ret

00000eae <OS_TaskIdle>:
     eae:	f8 94       	cli
     eb0:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <OSIdleCtr>
     eb4:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <OSIdleCtr+0x1>
     eb8:	a0 91 87 04 	lds	r26, 0x0487	; 0x800487 <OSIdleCtr+0x2>
     ebc:	b0 91 88 04 	lds	r27, 0x0488	; 0x800488 <OSIdleCtr+0x3>
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	a1 1d       	adc	r26, r1
     ec4:	b1 1d       	adc	r27, r1
     ec6:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <OSIdleCtr>
     eca:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <OSIdleCtr+0x1>
     ece:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <OSIdleCtr+0x2>
     ed2:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <OSIdleCtr+0x3>
     ed6:	78 94       	sei
     ed8:	0e 94 55 07 	call	0xeaa	; 0xeaa <OSTaskIdleHook>
     edc:	e8 cf       	rjmp	.-48     	; 0xeae <OS_TaskIdle>

00000ede <OSIntEnter>:
     ede:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	39 f4       	brne	.+14     	; 0xef4 <OSIntEnter+0x16>
     ee6:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	19 f0       	breq	.+6      	; 0xef4 <OSIntEnter+0x16>
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <OSIntNesting>
     ef4:	08 95       	ret

00000ef6 <OSIntExit>:
     ef6:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	09 f0       	breq	.+2      	; 0xf00 <OSIntExit+0xa>
     efe:	4c c0       	rjmp	.+152    	; 0xf98 <OSIntExit+0xa2>
     f00:	f8 94       	cli
     f02:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
     f06:	88 23       	and	r24, r24
     f08:	19 f0       	breq	.+6      	; 0xf10 <OSIntExit+0x1a>
     f0a:	81 50       	subi	r24, 0x01	; 1
     f0c:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <OSIntNesting>
     f10:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
     f14:	81 11       	cpse	r24, r1
     f16:	3f c0       	rjmp	.+126    	; 0xf96 <OSIntExit+0xa0>
     f18:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
     f1c:	81 11       	cpse	r24, r1
     f1e:	3b c0       	rjmp	.+118    	; 0xf96 <OSIntExit+0xa0>
     f20:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <OSRdyGrp>
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	e0 50       	subi	r30, 0x00	; 0
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	e0 81       	ld	r30, Z
     f2c:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <OSIntExitY>
     f30:	ae 2f       	mov	r26, r30
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	a9 56       	subi	r26, 0x69	; 105
     f36:	bb 4f       	sbci	r27, 0xFB	; 251
     f38:	ac 91       	ld	r26, X
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	a0 50       	subi	r26, 0x00	; 0
     f3e:	bf 4f       	sbci	r27, 0xFF	; 255
     f40:	ee 0f       	add	r30, r30
     f42:	ee 0f       	add	r30, r30
     f44:	ee 0f       	add	r30, r30
     f46:	8c 91       	ld	r24, X
     f48:	e8 0f       	add	r30, r24
     f4a:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <OSPrioHighRdy>
     f4e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <OSPrioCur>
     f52:	e8 17       	cp	r30, r24
     f54:	01 f1       	breq	.+64     	; 0xf96 <OSIntExit+0xa0>
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	e3 52       	subi	r30, 0x23	; 35
     f5e:	fa 4f       	sbci	r31, 0xFA	; 250
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <OSTCBHighRdy+0x1>
     f68:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <OSTCBHighRdy>
     f6c:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <OSCtxSwCtr>
     f70:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <OSCtxSwCtr+0x1>
     f74:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <OSCtxSwCtr+0x2>
     f78:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <OSCtxSwCtr+0x3>
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	a1 1d       	adc	r26, r1
     f80:	b1 1d       	adc	r27, r1
     f82:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <OSCtxSwCtr>
     f86:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <OSCtxSwCtr+0x1>
     f8a:	a0 93 8f 04 	sts	0x048F, r26	; 0x80048f <OSCtxSwCtr+0x2>
     f8e:	b0 93 90 04 	sts	0x0490, r27	; 0x800490 <OSCtxSwCtr+0x3>
     f92:	0e 94 72 06 	call	0xce4	; 0xce4 <OSIntCtxSw>
     f96:	78 94       	sei
     f98:	08 95       	ret

00000f9a <OSSchedLock>:
     f9a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	49 f4       	brne	.+18     	; 0xfb4 <OSSchedLock+0x1a>
     fa2:	f8 94       	cli
     fa4:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
     fa8:	8f 3f       	cpi	r24, 0xFF	; 255
     faa:	19 f0       	breq	.+6      	; 0xfb2 <OSSchedLock+0x18>
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <OSLockNesting>
     fb2:	78 94       	sei
     fb4:	08 95       	ret

00000fb6 <OSStart>:
     fb6:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
     fba:	81 11       	cpse	r24, r1
     fbc:	28 c0       	rjmp	.+80     	; 0x100e <OSStart+0x58>
     fbe:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <OSRdyGrp>
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	e0 50       	subi	r30, 0x00	; 0
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	e0 81       	ld	r30, Z
     fca:	ae 2f       	mov	r26, r30
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	a9 56       	subi	r26, 0x69	; 105
     fd0:	bb 4f       	sbci	r27, 0xFB	; 251
     fd2:	ac 91       	ld	r26, X
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	a0 50       	subi	r26, 0x00	; 0
     fd8:	bf 4f       	sbci	r27, 0xFF	; 255
     fda:	ee 0f       	add	r30, r30
     fdc:	ee 0f       	add	r30, r30
     fde:	ee 0f       	add	r30, r30
     fe0:	8c 91       	ld	r24, X
     fe2:	e8 0f       	add	r30, r24
     fe4:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <OSPrioHighRdy>
     fe8:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <OSPrioCur>
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	e3 52       	subi	r30, 0x23	; 35
     ff4:	fa 4f       	sbci	r31, 0xFA	; 250
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <OSTCBHighRdy+0x1>
     ffe:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <OSTCBHighRdy>
    1002:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <OSTCBCur+0x1>
    1006:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <OSTCBCur>
    100a:	0c 94 e5 05 	jmp	0xbca	; 0xbca <OSStartHighRdy>
    100e:	08 95       	ret

00001010 <OSTimeTick>:
    1010:	0e 94 52 07 	call	0xea4	; 0xea4 <OSTimeTickHook>
    1014:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
    1018:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <OSTCBList>
    101c:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <OSTCBList+0x1>
    1020:	21 e0       	ldi	r18, 0x01	; 1
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	01 f1       	breq	.+64     	; 0x1068 <OSTimeTick+0x58>
    1028:	08 95       	ret
    102a:	f8 94       	cli
    102c:	86 81       	ldd	r24, Z+6	; 0x06
    102e:	97 81       	ldd	r25, Z+7	; 0x07
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	b1 f0       	breq	.+44     	; 0x1060 <OSTimeTick+0x50>
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	97 83       	std	Z+7, r25	; 0x07
    1038:	86 83       	std	Z+6, r24	; 0x06
    103a:	89 2b       	or	r24, r25
    103c:	89 f4       	brne	.+34     	; 0x1060 <OSTimeTick+0x50>
    103e:	80 85       	ldd	r24, Z+8	; 0x08
    1040:	83 fd       	sbrc	r24, 3
    1042:	16 c0       	rjmp	.+44     	; 0x1070 <OSTimeTick+0x60>
    1044:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <OSRdyGrp>
    1048:	95 85       	ldd	r25, Z+13	; 0x0d
    104a:	89 2b       	or	r24, r25
    104c:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <OSRdyGrp>
    1050:	a3 85       	ldd	r26, Z+11	; 0x0b
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	a9 56       	subi	r26, 0x69	; 105
    1056:	bb 4f       	sbci	r27, 0xFB	; 251
    1058:	8c 91       	ld	r24, X
    105a:	94 85       	ldd	r25, Z+12	; 0x0c
    105c:	89 2b       	or	r24, r25
    105e:	8c 93       	st	X, r24
    1060:	02 80       	ldd	r0, Z+2	; 0x02
    1062:	f3 81       	ldd	r31, Z+3	; 0x03
    1064:	e0 2d       	mov	r30, r0
    1066:	78 94       	sei
    1068:	81 85       	ldd	r24, Z+9	; 0x09
    106a:	80 31       	cpi	r24, 0x10	; 16
    106c:	f1 f6       	brne	.-68     	; 0x102a <OSTimeTick+0x1a>
    106e:	dc cf       	rjmp	.-72     	; 0x1028 <OSTimeTick+0x18>
    1070:	37 83       	std	Z+7, r19	; 0x07
    1072:	26 83       	std	Z+6, r18	; 0x06
    1074:	f5 cf       	rjmp	.-22     	; 0x1060 <OSTimeTick+0x50>

00001076 <OSVersion>:
    1076:	8c ef       	ldi	r24, 0xFC	; 252
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	08 95       	ret

0000107c <OS_Dummy>:
    107c:	08 95       	ret

0000107e <OS_Sched>:
    107e:	f8 94       	cli
    1080:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
    1084:	81 11       	cpse	r24, r1
    1086:	3d c0       	rjmp	.+122    	; 0x1102 <OS_Sched+0x84>
    1088:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
    108c:	81 11       	cpse	r24, r1
    108e:	39 c0       	rjmp	.+114    	; 0x1102 <OS_Sched+0x84>
    1090:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <OSRdyGrp>
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	e0 50       	subi	r30, 0x00	; 0
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	e0 81       	ld	r30, Z
    109c:	ae 2f       	mov	r26, r30
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	a9 56       	subi	r26, 0x69	; 105
    10a2:	bb 4f       	sbci	r27, 0xFB	; 251
    10a4:	ac 91       	ld	r26, X
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	a0 50       	subi	r26, 0x00	; 0
    10aa:	bf 4f       	sbci	r27, 0xFF	; 255
    10ac:	ee 0f       	add	r30, r30
    10ae:	ee 0f       	add	r30, r30
    10b0:	ee 0f       	add	r30, r30
    10b2:	8c 91       	ld	r24, X
    10b4:	e8 0f       	add	r30, r24
    10b6:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <OSPrioHighRdy>
    10ba:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <OSPrioCur>
    10be:	e8 17       	cp	r30, r24
    10c0:	01 f1       	breq	.+64     	; 0x1102 <OS_Sched+0x84>
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	e3 52       	subi	r30, 0x23	; 35
    10ca:	fa 4f       	sbci	r31, 0xFA	; 250
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <OSTCBHighRdy+0x1>
    10d4:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <OSTCBHighRdy>
    10d8:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <OSCtxSwCtr>
    10dc:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <OSCtxSwCtr+0x1>
    10e0:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <OSCtxSwCtr+0x2>
    10e4:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <OSCtxSwCtr+0x3>
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	a1 1d       	adc	r26, r1
    10ec:	b1 1d       	adc	r27, r1
    10ee:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <OSCtxSwCtr>
    10f2:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <OSCtxSwCtr+0x1>
    10f6:	a0 93 8f 04 	sts	0x048F, r26	; 0x80048f <OSCtxSwCtr+0x2>
    10fa:	b0 93 90 04 	sts	0x0490, r27	; 0x800490 <OSCtxSwCtr+0x3>
    10fe:	0e 94 15 06 	call	0xc2a	; 0xc2a <OSCtxSw>
    1102:	78 94       	sei
    1104:	08 95       	ret

00001106 <OSSchedUnlock>:
    1106:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 f4       	brne	.+36     	; 0x1132 <OSSchedUnlock+0x2c>
    110e:	f8 94       	cli
    1110:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
    1114:	88 23       	and	r24, r24
    1116:	61 f0       	breq	.+24     	; 0x1130 <OSSchedUnlock+0x2a>
    1118:	81 50       	subi	r24, 0x01	; 1
    111a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <OSLockNesting>
    111e:	81 11       	cpse	r24, r1
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <OSSchedUnlock+0x2a>
    1122:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
    1126:	81 11       	cpse	r24, r1
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <OSSchedUnlock+0x2a>
    112a:	78 94       	sei
    112c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <OS_Sched>
    1130:	78 94       	sei
    1132:	08 95       	ret

00001134 <OSTimeDly.part.0>:
    1134:	ac 01       	movw	r20, r24
    1136:	f8 94       	cli
    1138:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <OSTCBCur>
    113c:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <OSTCBCur+0x1>
    1140:	1b 96       	adiw	r26, 0x0b	; 11
    1142:	ec 91       	ld	r30, X
    1144:	1b 97       	sbiw	r26, 0x0b	; 11
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	1c 96       	adiw	r26, 0x0c	; 12
    114a:	9c 91       	ld	r25, X
    114c:	1c 97       	sbiw	r26, 0x0c	; 12
    114e:	90 95       	com	r25
    1150:	e9 56       	subi	r30, 0x69	; 105
    1152:	fb 4f       	sbci	r31, 0xFB	; 251
    1154:	80 81       	ld	r24, Z
    1156:	98 23       	and	r25, r24
    1158:	90 83       	st	Z, r25
    115a:	91 11       	cpse	r25, r1
    115c:	0a c0       	rjmp	.+20     	; 0x1172 <OSTimeDly.part.0+0x3e>
    115e:	1d 96       	adiw	r26, 0x0d	; 13
    1160:	9c 91       	ld	r25, X
    1162:	1d 97       	sbiw	r26, 0x0d	; 13
    1164:	29 2f       	mov	r18, r25
    1166:	20 95       	com	r18
    1168:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <OSRdyGrp>
    116c:	92 23       	and	r25, r18
    116e:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <OSRdyGrp>
    1172:	17 96       	adiw	r26, 0x07	; 7
    1174:	5c 93       	st	X, r21
    1176:	4e 93       	st	-X, r20
    1178:	16 97       	sbiw	r26, 0x06	; 6
    117a:	78 94       	sei
    117c:	0c 94 3f 08 	jmp	0x107e	; 0x107e <OS_Sched>

00001180 <OS_TCBInit>:
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	f8 94       	cli
    1188:	c0 91 91 04 	lds	r28, 0x0491	; 0x800491 <OSTCBFreeList>
    118c:	d0 91 92 04 	lds	r29, 0x0492	; 0x800492 <OSTCBFreeList+0x1>
    1190:	20 97       	sbiw	r28, 0x00	; 0
    1192:	09 f4       	brne	.+2      	; 0x1196 <OS_TCBInit+0x16>
    1194:	54 c0       	rjmp	.+168    	; 0x123e <OS_TCBInit+0xbe>
    1196:	18 2f       	mov	r17, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	9b 81       	ldd	r25, Y+3	; 0x03
    119c:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <OSTCBFreeList+0x1>
    11a0:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <OSTCBFreeList>
    11a4:	78 94       	sei
    11a6:	79 83       	std	Y+1, r23	; 0x01
    11a8:	68 83       	st	Y, r22
    11aa:	19 87       	std	Y+9, r17	; 0x09
    11ac:	18 86       	std	Y+8, r1	; 0x08
    11ae:	1f 82       	std	Y+7, r1	; 0x07
    11b0:	1e 82       	std	Y+6, r1	; 0x06
    11b2:	1e 86       	std	Y+14, r1	; 0x0e
    11b4:	e1 2f       	mov	r30, r17
    11b6:	e6 95       	lsr	r30
    11b8:	e6 95       	lsr	r30
    11ba:	e6 95       	lsr	r30
    11bc:	eb 87       	std	Y+11, r30	; 0x0b
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	e0 50       	subi	r30, 0x00	; 0
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	80 81       	ld	r24, Z
    11c6:	8d 87       	std	Y+13, r24	; 0x0d
    11c8:	e1 2f       	mov	r30, r17
    11ca:	e7 70       	andi	r30, 0x07	; 7
    11cc:	ea 87       	std	Y+10, r30	; 0x0a
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	e0 50       	subi	r30, 0x00	; 0
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	80 81       	ld	r24, Z
    11d6:	8c 87       	std	Y+12, r24	; 0x0c
    11d8:	ce 01       	movw	r24, r28
    11da:	0e 94 56 07 	call	0xeac	; 0xeac <OSTCBInitHook>
    11de:	ce 01       	movw	r24, r28
    11e0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OSTaskCreateHook>
    11e4:	f8 94       	cli
    11e6:	e1 2f       	mov	r30, r17
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	e3 52       	subi	r30, 0x23	; 35
    11f0:	fa 4f       	sbci	r31, 0xFA	; 250
    11f2:	d1 83       	std	Z+1, r29	; 0x01
    11f4:	c0 83       	st	Z, r28
    11f6:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <OSTCBList>
    11fa:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <OSTCBList+0x1>
    11fe:	fb 83       	std	Y+3, r31	; 0x03
    1200:	ea 83       	std	Y+2, r30	; 0x02
    1202:	1d 82       	std	Y+5, r1	; 0x05
    1204:	1c 82       	std	Y+4, r1	; 0x04
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	11 f0       	breq	.+4      	; 0x120e <OS_TCBInit+0x8e>
    120a:	d5 83       	std	Z+5, r29	; 0x05
    120c:	c4 83       	std	Z+4, r28	; 0x04
    120e:	d0 93 8c 04 	sts	0x048C, r29	; 0x80048c <OSTCBList+0x1>
    1212:	c0 93 8b 04 	sts	0x048B, r28	; 0x80048b <OSTCBList>
    1216:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <OSRdyGrp>
    121a:	9d 85       	ldd	r25, Y+13	; 0x0d
    121c:	89 2b       	or	r24, r25
    121e:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <OSRdyGrp>
    1222:	eb 85       	ldd	r30, Y+11	; 0x0b
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	e9 56       	subi	r30, 0x69	; 105
    1228:	fb 4f       	sbci	r31, 0xFB	; 251
    122a:	80 81       	ld	r24, Z
    122c:	9c 85       	ldd	r25, Y+12	; 0x0c
    122e:	89 2b       	or	r24, r25
    1230:	80 83       	st	Z, r24
    1232:	78 94       	sei
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	08 95       	ret
    123e:	78 94       	sei
    1240:	86 e4       	ldi	r24, 0x46	; 70
    1242:	f9 cf       	rjmp	.-14     	; 0x1236 <OS_TCBInit+0xb6>

00001244 <OSTaskCreate>:
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	f8 94       	cli
    125c:	c2 2f       	mov	r28, r18
    125e:	d0 e0       	ldi	r29, 0x00	; 0
    1260:	cc 0f       	add	r28, r28
    1262:	dd 1f       	adc	r29, r29
    1264:	c3 52       	subi	r28, 0x23	; 35
    1266:	da 4f       	sbci	r29, 0xFA	; 250
    1268:	e8 81       	ld	r30, Y
    126a:	f9 81       	ldd	r31, Y+1	; 0x01
    126c:	ef 2b       	or	r30, r31
    126e:	09 f0       	breq	.+2      	; 0x1272 <OSTaskCreate+0x2e>
    1270:	3b c0       	rjmp	.+118    	; 0x12e8 <OSTaskCreate+0xa4>
    1272:	92 2e       	mov	r9, r18
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	39 83       	std	Y+1, r19	; 0x01
    127a:	28 83       	st	Y, r18
    127c:	78 94       	sei
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	0e 94 04 07 	call	0xe08	; 0xe08 <OSTaskStkInit>
    1286:	b1 2c       	mov	r11, r1
    1288:	a1 2c       	mov	r10, r1
    128a:	d1 2c       	mov	r13, r1
    128c:	c1 2c       	mov	r12, r1
    128e:	e1 2c       	mov	r14, r1
    1290:	f1 2c       	mov	r15, r1
    1292:	87 01       	movw	r16, r14
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	bc 01       	movw	r22, r24
    129e:	89 2d       	mov	r24, r9
    12a0:	0e 94 c0 08 	call	0x1180	; 0x1180 <OS_TCBInit>
    12a4:	18 2f       	mov	r17, r24
    12a6:	81 11       	cpse	r24, r1
    12a8:	1a c0       	rjmp	.+52     	; 0x12de <OSTaskCreate+0x9a>
    12aa:	f8 94       	cli
    12ac:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <OSTaskCtr>
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <OSTaskCtr>
    12b6:	78 94       	sei
    12b8:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	11 f4       	brne	.+4      	; 0x12c4 <OSTaskCreate+0x80>
    12c0:	0e 94 3f 08 	call	0x107e	; 0x107e <OS_Sched>
    12c4:	81 2f       	mov	r24, r17
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	08 95       	ret
    12de:	f8 94       	cli
    12e0:	19 82       	std	Y+1, r1	; 0x01
    12e2:	18 82       	st	Y, r1
    12e4:	78 94       	sei
    12e6:	ee cf       	rjmp	.-36     	; 0x12c4 <OSTaskCreate+0x80>
    12e8:	78 94       	sei
    12ea:	18 e2       	ldi	r17, 0x28	; 40
    12ec:	eb cf       	rjmp	.-42     	; 0x12c4 <OSTaskCreate+0x80>

000012ee <OSInit>:
    12ee:	0e 94 53 07 	call	0xea6	; 0xea6 <OSInitHookBegin>
    12f2:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <OSIntNesting>
    12f6:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <OSLockNesting>
    12fa:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OSTaskCtr>
    12fe:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <OSRunning>
    1302:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <OSCtxSwCtr>
    1306:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <OSCtxSwCtr+0x1>
    130a:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <OSCtxSwCtr+0x2>
    130e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <OSCtxSwCtr+0x3>
    1312:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <OSIdleCtr>
    1316:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <OSIdleCtr+0x1>
    131a:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <OSIdleCtr+0x2>
    131e:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <OSIdleCtr+0x3>
    1322:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <OSRdyGrp>
    1326:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <OSRdyTbl>
    132a:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <OSRdyTbl+0x1>
    132e:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <OSRdyTbl+0x2>
    1332:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <OSPrioCur>
    1336:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <OSPrioHighRdy>
    133a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <OSTCBHighRdy+0x1>
    133e:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <OSTCBHighRdy>
    1342:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <OSTCBCur+0x1>
    1346:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <OSTCBCur>
    134a:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <OSTCBList+0x1>
    134e:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <OSTCBList>
    1352:	ed ed       	ldi	r30, 0xDD	; 221
    1354:	f5 e0       	ldi	r31, 0x05	; 5
    1356:	11 92       	st	Z+, r1
    1358:	11 92       	st	Z+, r1
    135a:	85 e0       	ldi	r24, 0x05	; 5
    135c:	ef 3f       	cpi	r30, 0xFF	; 255
    135e:	f8 07       	cpc	r31, r24
    1360:	d1 f7       	brne	.-12     	; 0x1356 <OSInit+0x68>
    1362:	ee ed       	ldi	r30, 0xDE	; 222
    1364:	f4 e0       	ldi	r31, 0x04	; 4
    1366:	cf 01       	movw	r24, r30
    1368:	0f 96       	adiw	r24, 0x0f	; 15
    136a:	93 83       	std	Z+3, r25	; 0x03
    136c:	82 83       	std	Z+2, r24	; 0x02
    136e:	fc 01       	movw	r30, r24
    1370:	85 e0       	ldi	r24, 0x05	; 5
    1372:	ee 3c       	cpi	r30, 0xCE	; 206
    1374:	f8 07       	cpc	r31, r24
    1376:	b9 f7       	brne	.-18     	; 0x1366 <OSInit+0x78>
    1378:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <OSTCBTbl+0xf3>
    137c:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <OSTCBTbl+0xf2>
    1380:	8e ed       	ldi	r24, 0xDE	; 222
    1382:	94 e0       	ldi	r25, 0x04	; 4
    1384:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <OSTCBFreeList+0x1>
    1388:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <OSTCBFreeList>
    138c:	20 e1       	ldi	r18, 0x10	; 16
    138e:	4d ed       	ldi	r20, 0xDD	; 221
    1390:	54 e0       	ldi	r21, 0x04	; 4
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	87 e5       	ldi	r24, 0x57	; 87
    1398:	97 e0       	ldi	r25, 0x07	; 7
    139a:	0e 94 22 09 	call	0x1244	; 0x1244 <OSTaskCreate>
    139e:	0c 94 54 07 	jmp	0xea8	; 0xea8 <OSInitHookEnd>

000013a2 <OSTaskDel>:
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	f0 90 9b 04 	lds	r15, 0x049B	; 0x80049b <OSIntNesting>
    13b0:	f1 10       	cpse	r15, r1
    13b2:	76 c0       	rjmp	.+236    	; 0x14a0 <OSTaskDel+0xfe>
    13b4:	f8 94       	cli
    13b6:	8f 3f       	cpi	r24, 0xFF	; 255
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <OSTaskDel+0x22>
    13ba:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <OSTCBCur>
    13be:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <OSTCBCur+0x1>
    13c2:	81 85       	ldd	r24, Z+9	; 0x09
    13c4:	08 2f       	mov	r16, r24
    13c6:	10 e0       	ldi	r17, 0x00	; 0
    13c8:	00 0f       	add	r16, r16
    13ca:	11 1f       	adc	r17, r17
    13cc:	f8 01       	movw	r30, r16
    13ce:	e3 52       	subi	r30, 0x23	; 35
    13d0:	fa 4f       	sbci	r31, 0xFA	; 250
    13d2:	c0 81       	ld	r28, Z
    13d4:	d1 81       	ldd	r29, Z+1	; 0x01
    13d6:	20 97       	sbiw	r28, 0x00	; 0
    13d8:	09 f4       	brne	.+2      	; 0x13dc <OSTaskDel+0x3a>
    13da:	5e c0       	rjmp	.+188    	; 0x1498 <OSTaskDel+0xf6>
    13dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13e2:	80 95       	com	r24
    13e4:	e9 56       	subi	r30, 0x69	; 105
    13e6:	fb 4f       	sbci	r31, 0xFB	; 251
    13e8:	90 81       	ld	r25, Z
    13ea:	89 23       	and	r24, r25
    13ec:	80 83       	st	Z, r24
    13ee:	81 11       	cpse	r24, r1
    13f0:	08 c0       	rjmp	.+16     	; 0x1402 <OSTaskDel+0x60>
    13f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f4:	98 2f       	mov	r25, r24
    13f6:	90 95       	com	r25
    13f8:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <OSRdyGrp>
    13fc:	89 23       	and	r24, r25
    13fe:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <OSRdyGrp>
    1402:	1f 82       	std	Y+7, r1	; 0x07
    1404:	1e 82       	std	Y+6, r1	; 0x06
    1406:	18 86       	std	Y+8, r1	; 0x08
    1408:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
    140c:	8f 3f       	cpi	r24, 0xFF	; 255
    140e:	19 f0       	breq	.+6      	; 0x1416 <OSTaskDel+0x74>
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <OSLockNesting>
    1416:	78 94       	sei
    1418:	f8 94       	cli
    141a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
    141e:	88 23       	and	r24, r24
    1420:	19 f0       	breq	.+6      	; 0x1428 <OSTaskDel+0x86>
    1422:	81 50       	subi	r24, 0x01	; 1
    1424:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <OSLockNesting>
    1428:	ce 01       	movw	r24, r28
    142a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <OSTaskDelHook>
    142e:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <OSTaskCtr>
    1432:	81 50       	subi	r24, 0x01	; 1
    1434:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <OSTaskCtr>
    1438:	f8 01       	movw	r30, r16
    143a:	e3 52       	subi	r30, 0x23	; 35
    143c:	fa 4f       	sbci	r31, 0xFA	; 250
    143e:	11 82       	std	Z+1, r1	; 0x01
    1440:	10 82       	st	Z, r1
    1442:	ec 81       	ldd	r30, Y+4	; 0x04
    1444:	fd 81       	ldd	r31, Y+5	; 0x05
    1446:	aa 81       	ldd	r26, Y+2	; 0x02
    1448:	bb 81       	ldd	r27, Y+3	; 0x03
    144a:	30 97       	sbiw	r30, 0x00	; 0
    144c:	e1 f4       	brne	.+56     	; 0x1486 <OSTaskDel+0xe4>
    144e:	15 96       	adiw	r26, 0x05	; 5
    1450:	1c 92       	st	X, r1
    1452:	1e 92       	st	-X, r1
    1454:	14 97       	sbiw	r26, 0x04	; 4
    1456:	b0 93 8c 04 	sts	0x048C, r27	; 0x80048c <OSTCBList+0x1>
    145a:	a0 93 8b 04 	sts	0x048B, r26	; 0x80048b <OSTCBList>
    145e:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <OSTCBFreeList>
    1462:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <OSTCBFreeList+0x1>
    1466:	9b 83       	std	Y+3, r25	; 0x03
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	d0 93 92 04 	sts	0x0492, r29	; 0x800492 <OSTCBFreeList+0x1>
    146e:	c0 93 91 04 	sts	0x0491, r28	; 0x800491 <OSTCBFreeList>
    1472:	78 94       	sei
    1474:	0e 94 3f 08 	call	0x107e	; 0x107e <OS_Sched>
    1478:	8f 2d       	mov	r24, r15
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	08 95       	ret
    1486:	b3 83       	std	Z+3, r27	; 0x03
    1488:	a2 83       	std	Z+2, r26	; 0x02
    148a:	aa 81       	ldd	r26, Y+2	; 0x02
    148c:	bb 81       	ldd	r27, Y+3	; 0x03
    148e:	15 96       	adiw	r26, 0x05	; 5
    1490:	fc 93       	st	X, r31
    1492:	ee 93       	st	-X, r30
    1494:	14 97       	sbiw	r26, 0x04	; 4
    1496:	e3 cf       	rjmp	.-58     	; 0x145e <OSTaskDel+0xbc>
    1498:	78 94       	sei
    149a:	9c e3       	ldi	r25, 0x3C	; 60
    149c:	f9 2e       	mov	r15, r25
    149e:	ec cf       	rjmp	.-40     	; 0x1478 <OSTaskDel+0xd6>
    14a0:	8f e3       	ldi	r24, 0x3F	; 63
    14a2:	f8 2e       	mov	r15, r24
    14a4:	e9 cf       	rjmp	.-46     	; 0x1478 <OSTaskDel+0xd6>

000014a6 <OSTaskDelReq>:
    14a6:	8f 3f       	cpi	r24, 0xFF	; 255
    14a8:	41 f4       	brne	.+16     	; 0x14ba <OSTaskDelReq+0x14>
    14aa:	f8 94       	cli
    14ac:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <OSTCBCur>
    14b0:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <OSTCBCur+0x1>
    14b4:	86 85       	ldd	r24, Z+14	; 0x0e
    14b6:	78 94       	sei
    14b8:	08 95       	ret
    14ba:	f8 94       	cli
    14bc:	e8 2f       	mov	r30, r24
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	e3 52       	subi	r30, 0x23	; 35
    14c6:	fa 4f       	sbci	r31, 0xFA	; 250
    14c8:	01 90       	ld	r0, Z+
    14ca:	f0 81       	ld	r31, Z
    14cc:	e0 2d       	mov	r30, r0
    14ce:	8b e0       	ldi	r24, 0x0B	; 11
    14d0:	30 97       	sbiw	r30, 0x00	; 0
    14d2:	89 f3       	breq	.-30     	; 0x14b6 <OSTaskDelReq+0x10>
    14d4:	8e e3       	ldi	r24, 0x3E	; 62
    14d6:	86 87       	std	Z+14, r24	; 0x0e
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	ed cf       	rjmp	.-38     	; 0x14b6 <OSTaskDelReq+0x10>

000014dc <OSTimeDly>:
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	11 f0       	breq	.+4      	; 0x14e4 <OSTimeDly+0x8>
    14e0:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <OSTimeDly.part.0>
    14e4:	08 95       	ret

000014e6 <OSTimeDlyHMSM>:
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	81 11       	cpse	r24, r1
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <OSTimeDlyHMSM+0x26>
    14f2:	61 11       	cpse	r22, r1
    14f4:	0b c0       	rjmp	.+22     	; 0x150c <OSTimeDlyHMSM+0x26>
    14f6:	41 11       	cpse	r20, r1
    14f8:	0c c0       	rjmp	.+24     	; 0x1512 <OSTimeDlyHMSM+0x2c>
    14fa:	21 15       	cp	r18, r1
    14fc:	31 05       	cpc	r19, r1
    14fe:	61 f4       	brne	.+24     	; 0x1518 <OSTimeDlyHMSM+0x32>
    1500:	84 e5       	ldi	r24, 0x54	; 84
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	08 95       	ret
    150c:	6c 33       	cpi	r22, 0x3C	; 60
    150e:	08 f0       	brcs	.+2      	; 0x1512 <OSTimeDlyHMSM+0x2c>
    1510:	4f c0       	rjmp	.+158    	; 0x15b0 <OSTimeDlyHMSM+0xca>
    1512:	4c 33       	cpi	r20, 0x3C	; 60
    1514:	08 f0       	brcs	.+2      	; 0x1518 <OSTimeDlyHMSM+0x32>
    1516:	4e c0       	rjmp	.+156    	; 0x15b4 <OSTimeDlyHMSM+0xce>
    1518:	28 3e       	cpi	r18, 0xE8	; 232
    151a:	93 e0       	ldi	r25, 0x03	; 3
    151c:	39 07       	cpc	r19, r25
    151e:	08 f0       	brcs	.+2      	; 0x1522 <OSTimeDlyHMSM+0x3c>
    1520:	4b c0       	rjmp	.+150    	; 0x15b8 <OSTimeDlyHMSM+0xd2>
    1522:	f9 01       	movw	r30, r18
    1524:	58 2f       	mov	r21, r24
    1526:	26 2f       	mov	r18, r22
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	ac e3       	ldi	r26, 0x3C	; 60
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__umulhisi3>
    1532:	6b 01       	movw	r12, r22
    1534:	7c 01       	movw	r14, r24
    1536:	c4 0e       	add	r12, r20
    1538:	d1 1c       	adc	r13, r1
    153a:	e1 1c       	adc	r14, r1
    153c:	f1 1c       	adc	r15, r1
    153e:	25 2f       	mov	r18, r21
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	a0 e1       	ldi	r26, 0x10	; 16
    1544:	be e0       	ldi	r27, 0x0E	; 14
    1546:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__umulhisi3>
    154a:	a7 01       	movw	r20, r14
    154c:	96 01       	movw	r18, r12
    154e:	26 0f       	add	r18, r22
    1550:	37 1f       	adc	r19, r23
    1552:	48 1f       	adc	r20, r24
    1554:	59 1f       	adc	r21, r25
    1556:	a4 e6       	ldi	r26, 0x64	; 100
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__muluhisi3>
    155e:	6b 01       	movw	r12, r22
    1560:	7c 01       	movw	r14, r24
    1562:	9f 01       	movw	r18, r30
    1564:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__umulhisi3>
    1568:	6c 50       	subi	r22, 0x0C	; 12
    156a:	7e 4f       	sbci	r23, 0xFE	; 254
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	28 ee       	ldi	r18, 0xE8	; 232
    1572:	33 e0       	ldi	r19, 0x03	; 3
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodsi4>
    157c:	d7 01       	movw	r26, r14
    157e:	c6 01       	movw	r24, r12
    1580:	82 0f       	add	r24, r18
    1582:	93 1f       	adc	r25, r19
    1584:	a4 1f       	adc	r26, r20
    1586:	b5 1f       	adc	r27, r21
    1588:	7d 01       	movw	r14, r26
    158a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <OSTimeDly>
    158e:	e1 14       	cp	r14, r1
    1590:	f1 04       	cpc	r15, r1
    1592:	11 f4       	brne	.+4      	; 0x1598 <OSTimeDlyHMSM+0xb2>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	b5 cf       	rjmp	.-150    	; 0x1502 <OSTimeDlyHMSM+0x1c>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e8       	ldi	r25, 0x80	; 128
    159c:	0e 94 9a 08 	call	0x1134	; 0x1134 <OSTimeDly.part.0>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e8       	ldi	r25, 0x80	; 128
    15a4:	0e 94 9a 08 	call	0x1134	; 0x1134 <OSTimeDly.part.0>
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	e8 1a       	sub	r14, r24
    15ac:	f1 08       	sbc	r15, r1
    15ae:	ef cf       	rjmp	.-34     	; 0x158e <OSTimeDlyHMSM+0xa8>
    15b0:	81 e5       	ldi	r24, 0x51	; 81
    15b2:	a7 cf       	rjmp	.-178    	; 0x1502 <OSTimeDlyHMSM+0x1c>
    15b4:	82 e5       	ldi	r24, 0x52	; 82
    15b6:	a5 cf       	rjmp	.-182    	; 0x1502 <OSTimeDlyHMSM+0x1c>
    15b8:	83 e5       	ldi	r24, 0x53	; 83
    15ba:	a3 cf       	rjmp	.-186    	; 0x1502 <OSTimeDlyHMSM+0x1c>

000015bc <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    15bc:	0e 94 29 05 	call	0xa52	; 0xa52 <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    15c0:	0e 94 77 09 	call	0x12ee	; 0x12ee <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	0e 94 4c 04 	call	0x898	; 0x898 <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    15d0:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <myrobot+0x1>
    15d4:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    15d8:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <myrobot+0x3>
    15dc:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    15e0:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <myrobot+0x4>
    myrobot.KP = DEFAULT_KP; //0.03
    15e4:	84 ef       	ldi	r24, 0xF4	; 244
    15e6:	9d ef       	ldi	r25, 0xFD	; 253
    15e8:	a4 e5       	ldi	r26, 0x54	; 84
    15ea:	bd e3       	ldi	r27, 0x3D	; 61
    15ec:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <myrobot+0x5>
    15f0:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <myrobot+0x6>
    15f4:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <myrobot+0x7>
    15f8:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <myrobot+0x8>
    myrobot.KD = DEFAULT_KD; //0.07
    15fc:	81 e3       	ldi	r24, 0x31	; 49
    15fe:	98 e0       	ldi	r25, 0x08	; 8
    1600:	ac e2       	ldi	r26, 0x2C	; 44
    1602:	bd e3       	ldi	r27, 0x3D	; 61
    1604:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <myrobot+0x9>
    1608:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <myrobot+0xa>
    160c:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <myrobot+0xb>
    1610:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <myrobot+0xc>
    myrobot.KI = DEFAULT_KI; //0.0004
    1614:	8c ea       	ldi	r24, 0xAC	; 172
    1616:	95 ec       	ldi	r25, 0xC5	; 197
    1618:	a7 ea       	ldi	r26, 0xA7	; 167
    161a:	b7 e3       	ldi	r27, 0x37	; 55
    161c:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <myrobot+0xd>
    1620:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <myrobot+0xe>
    1624:	a0 93 e1 02 	sts	0x02E1, r26	; 0x8002e1 <myrobot+0xf>
    1628:	b0 93 e2 02 	sts	0x02E2, r27	; 0x8002e2 <myrobot+0x10>
    myrobot.lastError = 0.0;
    162c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <myrobot+0x11>
    1630:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <myrobot+0x12>
    1634:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <myrobot+0x13>
    1638:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <myrobot+0x14>
    myrobot.integral = 0.0;
    163c:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <myrobot+0x15>
    1640:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <myrobot+0x16>
    1644:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <myrobot+0x17>
    1648:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <myrobot+0x18>
    myrobot.prevLeftSpeed = 0;
    164c:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <myrobot+0x1c>
    1650:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <myrobot+0x1b>
    myrobot.prevRightSpeed = 0;
    1654:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <myrobot+0x1e>
    1658:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <myrobot+0x1d>
    myrobot.inRoundabout = 0;
    165c:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x20>
    1660:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x1f>
    myrobot.clickCount = 0;
    1664:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <myrobot+0x22>
    1668:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <myrobot+0x21>
    myrobot.inLightField = 0;
    166c:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <myrobot+0x24>
    1670:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <myrobot+0x23>
    myrobot.inBlackBox = 0;
    1674:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <myrobot+0x26>
    1678:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <myrobot+0x25>
    myrobot.turn = 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <myrobot+0x28>
    1684:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <myrobot+0x27>
    myrobot.goal = 1000;                                      /* goal is to follow on the middle sensor */
    1688:	88 ee       	ldi	r24, 0xE8	; 232
    168a:	93 e0       	ldi	r25, 0x03	; 3
    168c:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <myrobot+0x1a>
    1690:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <myrobot+0x19>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	4a ef       	ldi	r20, 0xFA	; 250
    1698:	53 e0       	ldi	r21, 0x03	; 3
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	85 e8       	ldi	r24, 0x85	; 133
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 22 09 	call	0x1244	; 0x1244 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    16a6:	0e 94 ef 04 	call	0x9de	; 0x9de <robo_Honk>
    16aa:	0e 94 15 05 	call	0xa2a	; 0xa2a <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    16ae:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSStart>
    16b2:	ff cf       	rjmp	.-2      	; 0x16b2 <main+0xf6>

000016b4 <__udivmodhi4>:
    16b4:	aa 1b       	sub	r26, r26
    16b6:	bb 1b       	sub	r27, r27
    16b8:	51 e1       	ldi	r21, 0x11	; 17
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <__udivmodhi4_ep>

000016bc <__udivmodhi4_loop>:
    16bc:	aa 1f       	adc	r26, r26
    16be:	bb 1f       	adc	r27, r27
    16c0:	a6 17       	cp	r26, r22
    16c2:	b7 07       	cpc	r27, r23
    16c4:	10 f0       	brcs	.+4      	; 0x16ca <__udivmodhi4_ep>
    16c6:	a6 1b       	sub	r26, r22
    16c8:	b7 0b       	sbc	r27, r23

000016ca <__udivmodhi4_ep>:
    16ca:	88 1f       	adc	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	5a 95       	dec	r21
    16d0:	a9 f7       	brne	.-22     	; 0x16bc <__udivmodhi4_loop>
    16d2:	80 95       	com	r24
    16d4:	90 95       	com	r25
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	08 95       	ret

000016dc <__divmodhi4>:
    16dc:	97 fb       	bst	r25, 7
    16de:	07 2e       	mov	r0, r23
    16e0:	16 f4       	brtc	.+4      	; 0x16e6 <__divmodhi4+0xa>
    16e2:	00 94       	com	r0
    16e4:	07 d0       	rcall	.+14     	; 0x16f4 <__divmodhi4_neg1>
    16e6:	77 fd       	sbrc	r23, 7
    16e8:	09 d0       	rcall	.+18     	; 0x16fc <__divmodhi4_neg2>
    16ea:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__udivmodhi4>
    16ee:	07 fc       	sbrc	r0, 7
    16f0:	05 d0       	rcall	.+10     	; 0x16fc <__divmodhi4_neg2>
    16f2:	3e f4       	brtc	.+14     	; 0x1702 <__divmodhi4_exit>

000016f4 <__divmodhi4_neg1>:
    16f4:	90 95       	com	r25
    16f6:	81 95       	neg	r24
    16f8:	9f 4f       	sbci	r25, 0xFF	; 255
    16fa:	08 95       	ret

000016fc <__divmodhi4_neg2>:
    16fc:	70 95       	com	r23
    16fe:	61 95       	neg	r22
    1700:	7f 4f       	sbci	r23, 0xFF	; 255

00001702 <__divmodhi4_exit>:
    1702:	08 95       	ret

00001704 <__udivmodsi4>:
    1704:	a1 e2       	ldi	r26, 0x21	; 33
    1706:	1a 2e       	mov	r1, r26
    1708:	aa 1b       	sub	r26, r26
    170a:	bb 1b       	sub	r27, r27
    170c:	fd 01       	movw	r30, r26
    170e:	0d c0       	rjmp	.+26     	; 0x172a <__udivmodsi4_ep>

00001710 <__udivmodsi4_loop>:
    1710:	aa 1f       	adc	r26, r26
    1712:	bb 1f       	adc	r27, r27
    1714:	ee 1f       	adc	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	a2 17       	cp	r26, r18
    171a:	b3 07       	cpc	r27, r19
    171c:	e4 07       	cpc	r30, r20
    171e:	f5 07       	cpc	r31, r21
    1720:	20 f0       	brcs	.+8      	; 0x172a <__udivmodsi4_ep>
    1722:	a2 1b       	sub	r26, r18
    1724:	b3 0b       	sbc	r27, r19
    1726:	e4 0b       	sbc	r30, r20
    1728:	f5 0b       	sbc	r31, r21

0000172a <__udivmodsi4_ep>:
    172a:	66 1f       	adc	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	88 1f       	adc	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	1a 94       	dec	r1
    1734:	69 f7       	brne	.-38     	; 0x1710 <__udivmodsi4_loop>
    1736:	60 95       	com	r22
    1738:	70 95       	com	r23
    173a:	80 95       	com	r24
    173c:	90 95       	com	r25
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	bd 01       	movw	r22, r26
    1744:	cf 01       	movw	r24, r30
    1746:	08 95       	ret

00001748 <__tablejump2__>:
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	05 90       	lpm	r0, Z+
    174e:	f4 91       	lpm	r31, Z
    1750:	e0 2d       	mov	r30, r0
    1752:	09 94       	ijmp

00001754 <__umulhisi3>:
    1754:	a2 9f       	mul	r26, r18
    1756:	b0 01       	movw	r22, r0
    1758:	b3 9f       	mul	r27, r19
    175a:	c0 01       	movw	r24, r0
    175c:	a3 9f       	mul	r26, r19
    175e:	70 0d       	add	r23, r0
    1760:	81 1d       	adc	r24, r1
    1762:	11 24       	eor	r1, r1
    1764:	91 1d       	adc	r25, r1
    1766:	b2 9f       	mul	r27, r18
    1768:	70 0d       	add	r23, r0
    176a:	81 1d       	adc	r24, r1
    176c:	11 24       	eor	r1, r1
    176e:	91 1d       	adc	r25, r1
    1770:	08 95       	ret

00001772 <__muluhisi3>:
    1772:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__umulhisi3>
    1776:	a5 9f       	mul	r26, r21
    1778:	90 0d       	add	r25, r0
    177a:	b4 9f       	mul	r27, r20
    177c:	90 0d       	add	r25, r0
    177e:	a4 9f       	mul	r26, r20
    1780:	80 0d       	add	r24, r0
    1782:	91 1d       	adc	r25, r1
    1784:	11 24       	eor	r1, r1
    1786:	08 95       	ret

00001788 <__subsf3>:
    1788:	50 58       	subi	r21, 0x80	; 128

0000178a <__addsf3>:
    178a:	bb 27       	eor	r27, r27
    178c:	aa 27       	eor	r26, r26
    178e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__addsf3x>
    1792:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_round>
    1796:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fp_pscA>
    179a:	38 f0       	brcs	.+14     	; 0x17aa <__addsf3+0x20>
    179c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fp_pscB>
    17a0:	20 f0       	brcs	.+8      	; 0x17aa <__addsf3+0x20>
    17a2:	39 f4       	brne	.+14     	; 0x17b2 <__addsf3+0x28>
    17a4:	9f 3f       	cpi	r25, 0xFF	; 255
    17a6:	19 f4       	brne	.+6      	; 0x17ae <__addsf3+0x24>
    17a8:	26 f4       	brtc	.+8      	; 0x17b2 <__addsf3+0x28>
    17aa:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_nan>
    17ae:	0e f4       	brtc	.+2      	; 0x17b2 <__addsf3+0x28>
    17b0:	e0 95       	com	r30
    17b2:	e7 fb       	bst	r30, 7
    17b4:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_inf>

000017b8 <__addsf3x>:
    17b8:	e9 2f       	mov	r30, r25
    17ba:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__fp_split3>
    17be:	58 f3       	brcs	.-42     	; 0x1796 <__addsf3+0xc>
    17c0:	ba 17       	cp	r27, r26
    17c2:	62 07       	cpc	r22, r18
    17c4:	73 07       	cpc	r23, r19
    17c6:	84 07       	cpc	r24, r20
    17c8:	95 07       	cpc	r25, r21
    17ca:	20 f0       	brcs	.+8      	; 0x17d4 <__addsf3x+0x1c>
    17cc:	79 f4       	brne	.+30     	; 0x17ec <__addsf3x+0x34>
    17ce:	a6 f5       	brtc	.+104    	; 0x1838 <__addsf3x+0x80>
    17d0:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_zero>
    17d4:	0e f4       	brtc	.+2      	; 0x17d8 <__addsf3x+0x20>
    17d6:	e0 95       	com	r30
    17d8:	0b 2e       	mov	r0, r27
    17da:	ba 2f       	mov	r27, r26
    17dc:	a0 2d       	mov	r26, r0
    17de:	0b 01       	movw	r0, r22
    17e0:	b9 01       	movw	r22, r18
    17e2:	90 01       	movw	r18, r0
    17e4:	0c 01       	movw	r0, r24
    17e6:	ca 01       	movw	r24, r20
    17e8:	a0 01       	movw	r20, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	ff 27       	eor	r31, r31
    17ee:	59 1b       	sub	r21, r25
    17f0:	99 f0       	breq	.+38     	; 0x1818 <__addsf3x+0x60>
    17f2:	59 3f       	cpi	r21, 0xF9	; 249
    17f4:	50 f4       	brcc	.+20     	; 0x180a <__addsf3x+0x52>
    17f6:	50 3e       	cpi	r21, 0xE0	; 224
    17f8:	68 f1       	brcs	.+90     	; 0x1854 <__addsf3x+0x9c>
    17fa:	1a 16       	cp	r1, r26
    17fc:	f0 40       	sbci	r31, 0x00	; 0
    17fe:	a2 2f       	mov	r26, r18
    1800:	23 2f       	mov	r18, r19
    1802:	34 2f       	mov	r19, r20
    1804:	44 27       	eor	r20, r20
    1806:	58 5f       	subi	r21, 0xF8	; 248
    1808:	f3 cf       	rjmp	.-26     	; 0x17f0 <__addsf3x+0x38>
    180a:	46 95       	lsr	r20
    180c:	37 95       	ror	r19
    180e:	27 95       	ror	r18
    1810:	a7 95       	ror	r26
    1812:	f0 40       	sbci	r31, 0x00	; 0
    1814:	53 95       	inc	r21
    1816:	c9 f7       	brne	.-14     	; 0x180a <__addsf3x+0x52>
    1818:	7e f4       	brtc	.+30     	; 0x1838 <__addsf3x+0x80>
    181a:	1f 16       	cp	r1, r31
    181c:	ba 0b       	sbc	r27, r26
    181e:	62 0b       	sbc	r22, r18
    1820:	73 0b       	sbc	r23, r19
    1822:	84 0b       	sbc	r24, r20
    1824:	ba f0       	brmi	.+46     	; 0x1854 <__addsf3x+0x9c>
    1826:	91 50       	subi	r25, 0x01	; 1
    1828:	a1 f0       	breq	.+40     	; 0x1852 <__addsf3x+0x9a>
    182a:	ff 0f       	add	r31, r31
    182c:	bb 1f       	adc	r27, r27
    182e:	66 1f       	adc	r22, r22
    1830:	77 1f       	adc	r23, r23
    1832:	88 1f       	adc	r24, r24
    1834:	c2 f7       	brpl	.-16     	; 0x1826 <__addsf3x+0x6e>
    1836:	0e c0       	rjmp	.+28     	; 0x1854 <__addsf3x+0x9c>
    1838:	ba 0f       	add	r27, r26
    183a:	62 1f       	adc	r22, r18
    183c:	73 1f       	adc	r23, r19
    183e:	84 1f       	adc	r24, r20
    1840:	48 f4       	brcc	.+18     	; 0x1854 <__addsf3x+0x9c>
    1842:	87 95       	ror	r24
    1844:	77 95       	ror	r23
    1846:	67 95       	ror	r22
    1848:	b7 95       	ror	r27
    184a:	f7 95       	ror	r31
    184c:	9e 3f       	cpi	r25, 0xFE	; 254
    184e:	08 f0       	brcs	.+2      	; 0x1852 <__addsf3x+0x9a>
    1850:	b0 cf       	rjmp	.-160    	; 0x17b2 <__addsf3+0x28>
    1852:	93 95       	inc	r25
    1854:	88 0f       	add	r24, r24
    1856:	08 f0       	brcs	.+2      	; 0x185a <__addsf3x+0xa2>
    1858:	99 27       	eor	r25, r25
    185a:	ee 0f       	add	r30, r30
    185c:	97 95       	ror	r25
    185e:	87 95       	ror	r24
    1860:	08 95       	ret

00001862 <__fixsfsi>:
    1862:	0e 94 38 0c 	call	0x1870	; 0x1870 <__fixunssfsi>
    1866:	68 94       	set
    1868:	b1 11       	cpse	r27, r1
    186a:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__fp_szero>
    186e:	08 95       	ret

00001870 <__fixunssfsi>:
    1870:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__fp_splitA>
    1874:	88 f0       	brcs	.+34     	; 0x1898 <__fixunssfsi+0x28>
    1876:	9f 57       	subi	r25, 0x7F	; 127
    1878:	98 f0       	brcs	.+38     	; 0x18a0 <__fixunssfsi+0x30>
    187a:	b9 2f       	mov	r27, r25
    187c:	99 27       	eor	r25, r25
    187e:	b7 51       	subi	r27, 0x17	; 23
    1880:	b0 f0       	brcs	.+44     	; 0x18ae <__fixunssfsi+0x3e>
    1882:	e1 f0       	breq	.+56     	; 0x18bc <__fixunssfsi+0x4c>
    1884:	66 0f       	add	r22, r22
    1886:	77 1f       	adc	r23, r23
    1888:	88 1f       	adc	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	1a f0       	brmi	.+6      	; 0x1894 <__fixunssfsi+0x24>
    188e:	ba 95       	dec	r27
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__fixunssfsi+0x14>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <__fixunssfsi+0x4c>
    1894:	b1 30       	cpi	r27, 0x01	; 1
    1896:	91 f0       	breq	.+36     	; 0x18bc <__fixunssfsi+0x4c>
    1898:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__fp_zero>
    189c:	b1 e0       	ldi	r27, 0x01	; 1
    189e:	08 95       	ret
    18a0:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__fp_zero>
    18a4:	67 2f       	mov	r22, r23
    18a6:	78 2f       	mov	r23, r24
    18a8:	88 27       	eor	r24, r24
    18aa:	b8 5f       	subi	r27, 0xF8	; 248
    18ac:	39 f0       	breq	.+14     	; 0x18bc <__fixunssfsi+0x4c>
    18ae:	b9 3f       	cpi	r27, 0xF9	; 249
    18b0:	cc f3       	brlt	.-14     	; 0x18a4 <__fixunssfsi+0x34>
    18b2:	86 95       	lsr	r24
    18b4:	77 95       	ror	r23
    18b6:	67 95       	ror	r22
    18b8:	b3 95       	inc	r27
    18ba:	d9 f7       	brne	.-10     	; 0x18b2 <__fixunssfsi+0x42>
    18bc:	3e f4       	brtc	.+14     	; 0x18cc <__fixunssfsi+0x5c>
    18be:	90 95       	com	r25
    18c0:	80 95       	com	r24
    18c2:	70 95       	com	r23
    18c4:	61 95       	neg	r22
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	08 95       	ret

000018ce <__floatunsisf>:
    18ce:	e8 94       	clt
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <__floatsisf+0x12>

000018d2 <__floatsisf>:
    18d2:	97 fb       	bst	r25, 7
    18d4:	3e f4       	brtc	.+14     	; 0x18e4 <__floatsisf+0x12>
    18d6:	90 95       	com	r25
    18d8:	80 95       	com	r24
    18da:	70 95       	com	r23
    18dc:	61 95       	neg	r22
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8f 4f       	sbci	r24, 0xFF	; 255
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	99 23       	and	r25, r25
    18e6:	a9 f0       	breq	.+42     	; 0x1912 <__floatsisf+0x40>
    18e8:	f9 2f       	mov	r31, r25
    18ea:	96 e9       	ldi	r25, 0x96	; 150
    18ec:	bb 27       	eor	r27, r27
    18ee:	93 95       	inc	r25
    18f0:	f6 95       	lsr	r31
    18f2:	87 95       	ror	r24
    18f4:	77 95       	ror	r23
    18f6:	67 95       	ror	r22
    18f8:	b7 95       	ror	r27
    18fa:	f1 11       	cpse	r31, r1
    18fc:	f8 cf       	rjmp	.-16     	; 0x18ee <__floatsisf+0x1c>
    18fe:	fa f4       	brpl	.+62     	; 0x193e <__floatsisf+0x6c>
    1900:	bb 0f       	add	r27, r27
    1902:	11 f4       	brne	.+4      	; 0x1908 <__floatsisf+0x36>
    1904:	60 ff       	sbrs	r22, 0
    1906:	1b c0       	rjmp	.+54     	; 0x193e <__floatsisf+0x6c>
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	8f 4f       	sbci	r24, 0xFF	; 255
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	16 c0       	rjmp	.+44     	; 0x193e <__floatsisf+0x6c>
    1912:	88 23       	and	r24, r24
    1914:	11 f0       	breq	.+4      	; 0x191a <__floatsisf+0x48>
    1916:	96 e9       	ldi	r25, 0x96	; 150
    1918:	11 c0       	rjmp	.+34     	; 0x193c <__floatsisf+0x6a>
    191a:	77 23       	and	r23, r23
    191c:	21 f0       	breq	.+8      	; 0x1926 <__floatsisf+0x54>
    191e:	9e e8       	ldi	r25, 0x8E	; 142
    1920:	87 2f       	mov	r24, r23
    1922:	76 2f       	mov	r23, r22
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <__floatsisf+0x5e>
    1926:	66 23       	and	r22, r22
    1928:	71 f0       	breq	.+28     	; 0x1946 <__floatsisf+0x74>
    192a:	96 e8       	ldi	r25, 0x86	; 134
    192c:	86 2f       	mov	r24, r22
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	2a f0       	brmi	.+10     	; 0x193e <__floatsisf+0x6c>
    1934:	9a 95       	dec	r25
    1936:	66 0f       	add	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	88 1f       	adc	r24, r24
    193c:	da f7       	brpl	.-10     	; 0x1934 <__floatsisf+0x62>
    193e:	88 0f       	add	r24, r24
    1940:	96 95       	lsr	r25
    1942:	87 95       	ror	r24
    1944:	97 f9       	bld	r25, 7
    1946:	08 95       	ret

00001948 <__fp_inf>:
    1948:	97 f9       	bld	r25, 7
    194a:	9f 67       	ori	r25, 0x7F	; 127
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	08 95       	ret

00001954 <__fp_nan>:
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	80 ec       	ldi	r24, 0xC0	; 192
    1958:	08 95       	ret

0000195a <__fp_pscA>:
    195a:	00 24       	eor	r0, r0
    195c:	0a 94       	dec	r0
    195e:	16 16       	cp	r1, r22
    1960:	17 06       	cpc	r1, r23
    1962:	18 06       	cpc	r1, r24
    1964:	09 06       	cpc	r0, r25
    1966:	08 95       	ret

00001968 <__fp_pscB>:
    1968:	00 24       	eor	r0, r0
    196a:	0a 94       	dec	r0
    196c:	12 16       	cp	r1, r18
    196e:	13 06       	cpc	r1, r19
    1970:	14 06       	cpc	r1, r20
    1972:	05 06       	cpc	r0, r21
    1974:	08 95       	ret

00001976 <__fp_round>:
    1976:	09 2e       	mov	r0, r25
    1978:	03 94       	inc	r0
    197a:	00 0c       	add	r0, r0
    197c:	11 f4       	brne	.+4      	; 0x1982 <__fp_round+0xc>
    197e:	88 23       	and	r24, r24
    1980:	52 f0       	brmi	.+20     	; 0x1996 <__fp_round+0x20>
    1982:	bb 0f       	add	r27, r27
    1984:	40 f4       	brcc	.+16     	; 0x1996 <__fp_round+0x20>
    1986:	bf 2b       	or	r27, r31
    1988:	11 f4       	brne	.+4      	; 0x198e <__fp_round+0x18>
    198a:	60 ff       	sbrs	r22, 0
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <__fp_round+0x20>
    198e:	6f 5f       	subi	r22, 0xFF	; 255
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	8f 4f       	sbci	r24, 0xFF	; 255
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	08 95       	ret

00001998 <__fp_split3>:
    1998:	57 fd       	sbrc	r21, 7
    199a:	90 58       	subi	r25, 0x80	; 128
    199c:	44 0f       	add	r20, r20
    199e:	55 1f       	adc	r21, r21
    19a0:	59 f0       	breq	.+22     	; 0x19b8 <__fp_splitA+0x10>
    19a2:	5f 3f       	cpi	r21, 0xFF	; 255
    19a4:	71 f0       	breq	.+28     	; 0x19c2 <__fp_splitA+0x1a>
    19a6:	47 95       	ror	r20

000019a8 <__fp_splitA>:
    19a8:	88 0f       	add	r24, r24
    19aa:	97 fb       	bst	r25, 7
    19ac:	99 1f       	adc	r25, r25
    19ae:	61 f0       	breq	.+24     	; 0x19c8 <__fp_splitA+0x20>
    19b0:	9f 3f       	cpi	r25, 0xFF	; 255
    19b2:	79 f0       	breq	.+30     	; 0x19d2 <__fp_splitA+0x2a>
    19b4:	87 95       	ror	r24
    19b6:	08 95       	ret
    19b8:	12 16       	cp	r1, r18
    19ba:	13 06       	cpc	r1, r19
    19bc:	14 06       	cpc	r1, r20
    19be:	55 1f       	adc	r21, r21
    19c0:	f2 cf       	rjmp	.-28     	; 0x19a6 <__fp_split3+0xe>
    19c2:	46 95       	lsr	r20
    19c4:	f1 df       	rcall	.-30     	; 0x19a8 <__fp_splitA>
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <__fp_splitA+0x30>
    19c8:	16 16       	cp	r1, r22
    19ca:	17 06       	cpc	r1, r23
    19cc:	18 06       	cpc	r1, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	f1 cf       	rjmp	.-30     	; 0x19b4 <__fp_splitA+0xc>
    19d2:	86 95       	lsr	r24
    19d4:	71 05       	cpc	r23, r1
    19d6:	61 05       	cpc	r22, r1
    19d8:	08 94       	sec
    19da:	08 95       	ret

000019dc <__fp_zero>:
    19dc:	e8 94       	clt

000019de <__fp_szero>:
    19de:	bb 27       	eor	r27, r27
    19e0:	66 27       	eor	r22, r22
    19e2:	77 27       	eor	r23, r23
    19e4:	cb 01       	movw	r24, r22
    19e6:	97 f9       	bld	r25, 7
    19e8:	08 95       	ret

000019ea <__mulsf3>:
    19ea:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__mulsf3x>
    19ee:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_round>
    19f2:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fp_pscA>
    19f6:	38 f0       	brcs	.+14     	; 0x1a06 <__mulsf3+0x1c>
    19f8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__fp_pscB>
    19fc:	20 f0       	brcs	.+8      	; 0x1a06 <__mulsf3+0x1c>
    19fe:	95 23       	and	r25, r21
    1a00:	11 f0       	breq	.+4      	; 0x1a06 <__mulsf3+0x1c>
    1a02:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_inf>
    1a06:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_nan>
    1a0a:	11 24       	eor	r1, r1
    1a0c:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__fp_szero>

00001a10 <__mulsf3x>:
    1a10:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__fp_split3>
    1a14:	70 f3       	brcs	.-36     	; 0x19f2 <__mulsf3+0x8>

00001a16 <__mulsf3_pse>:
    1a16:	95 9f       	mul	r25, r21
    1a18:	c1 f3       	breq	.-16     	; 0x1a0a <__mulsf3+0x20>
    1a1a:	95 0f       	add	r25, r21
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	55 1f       	adc	r21, r21
    1a20:	62 9f       	mul	r22, r18
    1a22:	f0 01       	movw	r30, r0
    1a24:	72 9f       	mul	r23, r18
    1a26:	bb 27       	eor	r27, r27
    1a28:	f0 0d       	add	r31, r0
    1a2a:	b1 1d       	adc	r27, r1
    1a2c:	63 9f       	mul	r22, r19
    1a2e:	aa 27       	eor	r26, r26
    1a30:	f0 0d       	add	r31, r0
    1a32:	b1 1d       	adc	r27, r1
    1a34:	aa 1f       	adc	r26, r26
    1a36:	64 9f       	mul	r22, r20
    1a38:	66 27       	eor	r22, r22
    1a3a:	b0 0d       	add	r27, r0
    1a3c:	a1 1d       	adc	r26, r1
    1a3e:	66 1f       	adc	r22, r22
    1a40:	82 9f       	mul	r24, r18
    1a42:	22 27       	eor	r18, r18
    1a44:	b0 0d       	add	r27, r0
    1a46:	a1 1d       	adc	r26, r1
    1a48:	62 1f       	adc	r22, r18
    1a4a:	73 9f       	mul	r23, r19
    1a4c:	b0 0d       	add	r27, r0
    1a4e:	a1 1d       	adc	r26, r1
    1a50:	62 1f       	adc	r22, r18
    1a52:	83 9f       	mul	r24, r19
    1a54:	a0 0d       	add	r26, r0
    1a56:	61 1d       	adc	r22, r1
    1a58:	22 1f       	adc	r18, r18
    1a5a:	74 9f       	mul	r23, r20
    1a5c:	33 27       	eor	r19, r19
    1a5e:	a0 0d       	add	r26, r0
    1a60:	61 1d       	adc	r22, r1
    1a62:	23 1f       	adc	r18, r19
    1a64:	84 9f       	mul	r24, r20
    1a66:	60 0d       	add	r22, r0
    1a68:	21 1d       	adc	r18, r1
    1a6a:	82 2f       	mov	r24, r18
    1a6c:	76 2f       	mov	r23, r22
    1a6e:	6a 2f       	mov	r22, r26
    1a70:	11 24       	eor	r1, r1
    1a72:	9f 57       	subi	r25, 0x7F	; 127
    1a74:	50 40       	sbci	r21, 0x00	; 0
    1a76:	9a f0       	brmi	.+38     	; 0x1a9e <__mulsf3_pse+0x88>
    1a78:	f1 f0       	breq	.+60     	; 0x1ab6 <__mulsf3_pse+0xa0>
    1a7a:	88 23       	and	r24, r24
    1a7c:	4a f0       	brmi	.+18     	; 0x1a90 <__mulsf3_pse+0x7a>
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	bb 1f       	adc	r27, r27
    1a84:	66 1f       	adc	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	88 1f       	adc	r24, r24
    1a8a:	91 50       	subi	r25, 0x01	; 1
    1a8c:	50 40       	sbci	r21, 0x00	; 0
    1a8e:	a9 f7       	brne	.-22     	; 0x1a7a <__mulsf3_pse+0x64>
    1a90:	9e 3f       	cpi	r25, 0xFE	; 254
    1a92:	51 05       	cpc	r21, r1
    1a94:	80 f0       	brcs	.+32     	; 0x1ab6 <__mulsf3_pse+0xa0>
    1a96:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_inf>
    1a9a:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__fp_szero>
    1a9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1aa0:	e4 f3       	brlt	.-8      	; 0x1a9a <__mulsf3_pse+0x84>
    1aa2:	98 3e       	cpi	r25, 0xE8	; 232
    1aa4:	d4 f3       	brlt	.-12     	; 0x1a9a <__mulsf3_pse+0x84>
    1aa6:	86 95       	lsr	r24
    1aa8:	77 95       	ror	r23
    1aaa:	67 95       	ror	r22
    1aac:	b7 95       	ror	r27
    1aae:	f7 95       	ror	r31
    1ab0:	e7 95       	ror	r30
    1ab2:	9f 5f       	subi	r25, 0xFF	; 255
    1ab4:	c1 f7       	brne	.-16     	; 0x1aa6 <__mulsf3_pse+0x90>
    1ab6:	fe 2b       	or	r31, r30
    1ab8:	88 0f       	add	r24, r24
    1aba:	91 1d       	adc	r25, r1
    1abc:	96 95       	lsr	r25
    1abe:	87 95       	ror	r24
    1ac0:	97 f9       	bld	r25, 7
    1ac2:	08 95       	ret

00001ac4 <_exit>:
    1ac4:	f8 94       	cli

00001ac6 <__stop_program>:
    1ac6:	ff cf       	rjmp	.-2      	; 0x1ac6 <__stop_program>
