
robocarChatGPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  00001aa8  00001b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ad  00800246  00800246  00001c82  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000031  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017af  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008fe  00000000  00000000  0000361f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cfc  00000000  00000000  00003f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000ec  00000000  00000000  00004c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000723  00000000  00000000  00004d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000418  00000000  00000000  0000542b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00005843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ea       	ldi	r30, 0xA8	; 168
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 34       	cpi	r26, 0x46	; 70
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a6 e4       	ldi	r26, 0x46	; 70
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 3f       	cpi	r26, 0xF3	; 243
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ce 0a 	call	0x159c	; 0x159c <main>
      9e:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      a8:	0e 94 97 04 	call	0x92e	; 0x92e <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      b0:	c0 93 ca 02 	sts	0x02CA, r28	; 0x8002ca <myrobot+0x4>
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <OSTimeDlyHMSM>
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      c4:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <myrobot>
      ce:	70 91 c7 02 	lds	r23, 0x02C7	; 0x8002c7 <myrobot+0x1>
      d2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <myrobot+0x2>
      d6:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <myrobot+0x3>
      da:	0e 94 3c 04 	call	0x878	; 0x878 <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 5);                /* Task period ~ 250 ms              */
      de:	25 e0       	ldi	r18, 0x05	; 5
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    OS_ticks_init();                                        /* enable RTOS timer tick        */
      ee:	0e 94 0a 05 	call	0xa14	; 0xa14 <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /* Task function                 */
      f2:	22 e0       	ldi	r18, 0x02	; 2
      f4:	45 ec       	ldi	r20, 0xC5	; 197
      f6:	52 e0       	ldi	r21, 0x02	; 2
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	83 e5       	ldi	r24, 0x53	; 83
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 12 09 	call	0x1224	; 0x1224 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     104:	23 e0       	ldi	r18, 0x03	; 3
     106:	4e e6       	ldi	r20, 0x6E	; 110
     108:	53 e0       	ldi	r21, 0x03	; 3
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	85 e6       	ldi	r24, 0x65	; 101
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 12 09 	call	0x1224	; 0x1224 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /* stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /* priority of task              */

    OSTaskCreate(Navig,                                     /* Task function                 */
     116:	24 e0       	ldi	r18, 0x04	; 4
     118:	4e e6       	ldi	r20, 0x6E	; 110
     11a:	54 e0       	ldi	r21, 0x04	; 4
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	8e e6       	ldi	r24, 0x6E	; 110
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 12 09 	call	0x1224	; 0x1224 <OSTaskCreate>
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	45 e0       	ldi	r20, 0x05	; 5
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <OSTimeDlyHMSM>
     136:	f8 cf       	rjmp	.-16     	; 0x128 <TaskStart+0x3a>

00000138 <constrain>:
    int inBlackBox;
    int turn;
} myrobot;

int constrain(int value, int lowerBound, int upperBound) {
    if (value < lowerBound) {
     138:	86 17       	cp	r24, r22
     13a:	97 07       	cpc	r25, r23
     13c:	2c f0       	brlt	.+10     	; 0x148 <constrain+0x10>
     13e:	bc 01       	movw	r22, r24
     140:	48 17       	cp	r20, r24
     142:	59 07       	cpc	r21, r25
     144:	0c f4       	brge	.+2      	; 0x148 <constrain+0x10>
     146:	ba 01       	movw	r22, r20
        return upperBound;
    }
    else {
        return value;
    }
}
     148:	cb 01       	movw	r24, r22
     14a:	08 95       	ret

0000014c <absoluteValue>:

int absoluteValue(int num) {
     14c:	97 ff       	sbrs	r25, 7
     14e:	03 c0       	rjmp	.+6      	; 0x156 <absoluteValue+0xa>
     150:	91 95       	neg	r25
     152:	81 95       	neg	r24
     154:	91 09       	sbc	r25, r1
    if (num < 0)
        return -num;
    else
        return num;
}
     156:	08 95       	ret

00000158 <pidControl>:

void pidControl(int sense) {
     158:	4f 92       	push	r4
     15a:	5f 92       	push	r5
     15c:	6f 92       	push	r6
     15e:	7f 92       	push	r7
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inLightField == 1) {
     170:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <myrobot+0x23>
     174:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <myrobot+0x24>
     178:	21 30       	cpi	r18, 0x01	; 1
     17a:	31 05       	cpc	r19, r1
     17c:	61 f4       	brne	.+24     	; 0x196 <pidControl+0x3e>
        myrobot.KP = 0.065;
     17e:	48 eb       	ldi	r20, 0xB8	; 184
     180:	5e e1       	ldi	r21, 0x1E	; 30
     182:	65 e8       	ldi	r22, 0x85	; 133
     184:	7d e3       	ldi	r23, 0x3D	; 61
     186:	40 93 cb 02 	sts	0x02CB, r20	; 0x8002cb <myrobot+0x5>
     18a:	50 93 cc 02 	sts	0x02CC, r21	; 0x8002cc <myrobot+0x6>
     18e:	60 93 cd 02 	sts	0x02CD, r22	; 0x8002cd <myrobot+0x7>
     192:	70 93 ce 02 	sts	0x02CE, r23	; 0x8002ce <myrobot+0x8>
    // } else {
    //     motorSpeed = DEFAULT_MOTOR_SPEED;
    //     myrobot.KP = DEFAULT_KP; 
    // }

    int error = myrobot.goal - sense;
     196:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <myrobot+0x19>
     19a:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <myrobot+0x1a>
     19e:	68 1b       	sub	r22, r24
     1a0:	79 0b       	sbc	r23, r25

    myrobot.integral = myrobot.integral + error;
     1a2:	07 2e       	mov	r0, r23
     1a4:	00 0c       	add	r0, r0
     1a6:	88 0b       	sbc	r24, r24
     1a8:	99 0b       	sbc	r25, r25
     1aa:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__floatsisf>
     1ae:	6b 01       	movw	r12, r22
     1b0:	7c 01       	movw	r14, r24
     1b2:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <myrobot+0x15>
     1b6:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <myrobot+0x16>
     1ba:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <myrobot+0x17>
     1be:	50 91 de 02 	lds	r21, 0x02DE	; 0x8002de <myrobot+0x18>
     1c2:	0e 94 b5 0b 	call	0x176a	; 0x176a <__addsf3>
     1c6:	4b 01       	movw	r8, r22
     1c8:	5c 01       	movw	r10, r24
     1ca:	80 92 db 02 	sts	0x02DB, r8	; 0x8002db <myrobot+0x15>
     1ce:	90 92 dc 02 	sts	0x02DC, r9	; 0x8002dc <myrobot+0x16>
     1d2:	a0 92 dd 02 	sts	0x02DD, r10	; 0x8002dd <myrobot+0x17>
     1d6:	b0 92 de 02 	sts	0x02DE, r11	; 0x8002de <myrobot+0x18>
    //     myrobot.turn += 1;
    // }


    // Calculate motor adjustments
    int adjustment = (myrobot.KP * error) + (myrobot.KI * (myrobot.integral)) + (myrobot.KD * (error - myrobot.lastError));
     1da:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <myrobot+0x5>
     1de:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <myrobot+0x6>
     1e2:	40 91 cd 02 	lds	r20, 0x02CD	; 0x8002cd <myrobot+0x7>
     1e6:	50 91 ce 02 	lds	r21, 0x02CE	; 0x8002ce <myrobot+0x8>
     1ea:	c7 01       	movw	r24, r14
     1ec:	b6 01       	movw	r22, r12
     1ee:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__mulsf3>
     1f2:	2b 01       	movw	r4, r22
     1f4:	3c 01       	movw	r6, r24
     1f6:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <myrobot+0xd>
     1fa:	30 91 d4 02 	lds	r19, 0x02D4	; 0x8002d4 <myrobot+0xe>
     1fe:	40 91 d5 02 	lds	r20, 0x02D5	; 0x8002d5 <myrobot+0xf>
     202:	50 91 d6 02 	lds	r21, 0x02D6	; 0x8002d6 <myrobot+0x10>
     206:	c5 01       	movw	r24, r10
     208:	b4 01       	movw	r22, r8
     20a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__mulsf3>
     20e:	9b 01       	movw	r18, r22
     210:	ac 01       	movw	r20, r24
     212:	c3 01       	movw	r24, r6
     214:	b2 01       	movw	r22, r4
     216:	0e 94 b5 0b 	call	0x176a	; 0x176a <__addsf3>
     21a:	4b 01       	movw	r8, r22
     21c:	5c 01       	movw	r10, r24
     21e:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <myrobot+0x11>
     222:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <myrobot+0x12>
     226:	40 91 d9 02 	lds	r20, 0x02D9	; 0x8002d9 <myrobot+0x13>
     22a:	50 91 da 02 	lds	r21, 0x02DA	; 0x8002da <myrobot+0x14>
     22e:	c7 01       	movw	r24, r14
     230:	b6 01       	movw	r22, r12
     232:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__subsf3>
     236:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <myrobot+0x9>
     23a:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <myrobot+0xa>
     23e:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <myrobot+0xb>
     242:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <myrobot+0xc>
     246:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__mulsf3>
     24a:	9b 01       	movw	r18, r22
     24c:	ac 01       	movw	r20, r24
     24e:	c5 01       	movw	r24, r10
     250:	b4 01       	movw	r22, r8
     252:	0e 94 b5 0b 	call	0x176a	; 0x176a <__addsf3>
     256:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixsfsi>

    // Store error for the next iteration
    myrobot.lastError = error;
     25a:	c0 92 d7 02 	sts	0x02D7, r12	; 0x8002d7 <myrobot+0x11>
     25e:	d0 92 d8 02 	sts	0x02D8, r13	; 0x8002d8 <myrobot+0x12>
     262:	e0 92 d9 02 	sts	0x02D9, r14	; 0x8002d9 <myrobot+0x13>
     266:	f0 92 da 02 	sts	0x02DA, r15	; 0x8002da <myrobot+0x14>

    // Adjust motors
    myrobot.lspeed = constrain((motorSpeed - adjustment), -100 , 100);
     26a:	29 e1       	ldi	r18, 0x19	; 25
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	26 1b       	sub	r18, r22
     270:	37 0b       	sbc	r19, r23
     272:	25 36       	cpi	r18, 0x65	; 101
     274:	31 05       	cpc	r19, r1
     276:	14 f0       	brlt	.+4      	; 0x27c <pidControl+0x124>
     278:	24 e6       	ldi	r18, 0x64	; 100
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	2c 39       	cpi	r18, 0x9C	; 156
     27e:	4f ef       	ldi	r20, 0xFF	; 255
     280:	34 07       	cpc	r19, r20
     282:	14 f4       	brge	.+4      	; 0x288 <pidControl+0x130>
     284:	2c e9       	ldi	r18, 0x9C	; 156
     286:	3f ef       	ldi	r19, 0xFF	; 255
     288:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <myrobot+0x3>
     28c:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <myrobot+0x2>
    myrobot.rspeed = constrain((motorSpeed + adjustment), -100 , 100);
     290:	67 5e       	subi	r22, 0xE7	; 231
     292:	7f 4f       	sbci	r23, 0xFF	; 255
     294:	65 36       	cpi	r22, 0x65	; 101
     296:	71 05       	cpc	r23, r1
     298:	14 f0       	brlt	.+4      	; 0x29e <pidControl+0x146>
     29a:	64 e6       	ldi	r22, 0x64	; 100
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	6c 39       	cpi	r22, 0x9C	; 156
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	78 07       	cpc	r23, r24
     2a4:	14 f4       	brge	.+4      	; 0x2aa <pidControl+0x152>
     2a6:	6c e9       	ldi	r22, 0x9C	; 156
     2a8:	7f ef       	ldi	r23, 0xFF	; 255
     2aa:	70 93 c7 02 	sts	0x02C7, r23	; 0x8002c7 <myrobot+0x1>
     2ae:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <myrobot>
    

    myrobot.prevLeftSpeed = myrobot.lspeed;
     2b2:	30 93 e2 02 	sts	0x02E2, r19	; 0x8002e2 <myrobot+0x1c>
     2b6:	20 93 e1 02 	sts	0x02E1, r18	; 0x8002e1 <myrobot+0x1b>
    myrobot.prevRightSpeed = myrobot.rspeed;
     2ba:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <myrobot+0x1e>
     2be:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <myrobot+0x1d>
}
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	9f 90       	pop	r9
     2d0:	8f 90       	pop	r8
     2d2:	7f 90       	pop	r7
     2d4:	6f 90       	pop	r6
     2d6:	5f 90       	pop	r5
     2d8:	4f 90       	pop	r4
     2da:	08 95       	ret

000002dc <Navig>:

void Navig (void *data)
{
    

    int pressCount = 0;
     2dc:	51 2c       	mov	r5, r1
     2de:	41 2c       	mov	r4, r1
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     2e0:	c2 ee       	ldi	r28, 0xE2	; 226
     2e2:	df ef       	ldi	r29, 0xFF	; 255

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     2e4:	01 e4       	ldi	r16, 0x41	; 65
     2e6:	10 e0       	ldi	r17, 0x00	; 0

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     2e8:	6d ed       	ldi	r22, 0xDD	; 221
     2ea:	e6 2e       	mov	r14, r22
     2ec:	ff 24       	eor	r15, r15
     2ee:	fa 94       	dec	r15
                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
     2f0:	7d e2       	ldi	r23, 0x2D	; 45
     2f2:	67 2e       	mov	r6, r23
     2f4:	71 2c       	mov	r7, r1

            } else {

                // normal mode
                switch (sensorValue) {
                    case 2: myrobot.lspeed = 50;
     2f6:	e2 e3       	ldi	r30, 0x32	; 50
     2f8:	ce 2e       	mov	r12, r30
     2fa:	d1 2c       	mov	r13, r1
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
                            break;

                    case 0: myrobot.lspeed = 30;
     2fc:	fe e1       	ldi	r31, 0x1E	; 30
     2fe:	8f 2e       	mov	r8, r31
     300:	91 2c       	mov	r9, r1
                            myrobot.rspeed = 60;
     302:	ac e3       	ldi	r26, 0x3C	; 60
     304:	2a 2e       	mov	r2, r26
     306:	31 2c       	mov	r3, r1

    int pressCount = 0;
    for (;;)
    {

        cprintf("Navigate\n");
     308:	89 e1       	ldi	r24, 0x19	; 25
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	9f 93       	push	r25
     30e:	8f 93       	push	r24
     310:	0e 94 35 05 	call	0xa6a	; 0xa6a <cprintf>
		// {
		// 	myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
        //     myrobot.lspeed   =  LOW_SPEED;
		// }

        int lightSense = robo_lightSensor();
     314:	0e 94 a3 04 	call	0x946	; 0x946 <robo_lightSensor>
     318:	5c 01       	movw	r10, r24

        if(robo_goPressed() != NULL){
     31a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <robo_goPressed>
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	88 23       	and	r24, r24
     324:	19 f1       	breq	.+70     	; 0x36c <Navig+0x90>

            while(robo_goPressed() != NULL);
     326:	0e 94 fe 04 	call	0x9fc	; 0x9fc <robo_goPressed>
     32a:	81 11       	cpse	r24, r1
     32c:	fc cf       	rjmp	.-8      	; 0x326 <Navig+0x4a>

            pressCount++;
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	48 1a       	sub	r4, r24
     332:	58 0a       	sbc	r5, r24
            if (pressCount >= 5){
     334:	95 e0       	ldi	r25, 0x05	; 5
     336:	49 16       	cp	r4, r25
     338:	51 04       	cpc	r5, r1
     33a:	64 f1       	brlt	.+88     	; 0x394 <Navig+0xb8>
                myrobot.inBlackBox = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <myrobot+0x26>
     344:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <myrobot+0x25>
                } else {
                    myrobot.inRoundabout = 0;
                }
            }

            if(myrobot.inBlackBox == 1){
     348:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <myrobot+0x25>
     34c:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <myrobot+0x26>
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	11 f4       	brne	.+4      	; 0x358 <Navig+0x7c>
                robo_Honk();
     354:	0e 94 df 04 	call	0x9be	; 0x9be <robo_Honk>
            }
            
            if (myrobot.inBlackBox == 0) {
     358:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <myrobot+0x25>
     35c:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <myrobot+0x26>
     360:	89 2b       	or	r24, r25
     362:	21 f4       	brne	.+8      	; 0x36c <Navig+0x90>
                robo_LED_toggle();
     364:	85 b1       	in	r24, 0x05	; 5
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	89 27       	eor	r24, r25
     36a:	85 b9       	out	0x05, r24	; 5
            }

        }


        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
     36c:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <myrobot+0x4>
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	09 f0       	breq	.+2      	; 0x376 <Navig+0x9a>
     374:	56 c0       	rjmp	.+172    	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
     376:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <myrobot+0x23>
     37a:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <myrobot+0x24>
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	09 f5       	brne	.+66     	; 0x3c4 <Navig+0xe8>
            myrobot.lspeed = 0;
     382:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <myrobot+0x3>
     386:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <myrobot+0x2>
            myrobot.rspeed = 0;
     38a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <myrobot+0x1>
     38e:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <myrobot>
     392:	ba cf       	rjmp	.-140    	; 0x308 <Navig+0x2c>

            pressCount++;
            if (pressCount >= 5){
                myrobot.inBlackBox = 1;
            } else {
                if (myrobot.inRoundabout == 0 && myrobot.inBlackBox == 0) {
     394:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <myrobot+0x1f>
     398:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <myrobot+0x20>
     39c:	89 2b       	or	r24, r25
     39e:	69 f4       	brne	.+26     	; 0x3ba <Navig+0xde>
     3a0:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <myrobot+0x25>
     3a4:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <myrobot+0x26>
     3a8:	89 2b       	or	r24, r25
     3aa:	39 f4       	brne	.+14     	; 0x3ba <Navig+0xde>
                    myrobot.inRoundabout = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <myrobot+0x20>
     3b4:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <myrobot+0x1f>
     3b8:	c7 cf       	rjmp	.-114    	; 0x348 <Navig+0x6c>
                } else {
                    myrobot.inRoundabout = 0;
     3ba:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <myrobot+0x20>
     3be:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <myrobot+0x1f>
     3c2:	c2 cf       	rjmp	.-124    	; 0x348 <Navig+0x6c>
        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
            myrobot.lspeed = 0;
            myrobot.rspeed = 0;
        } else if (myrobot.obstacle == 1) {

            cprintf("Obstacle Detected\n");
     3c4:	83 e2       	ldi	r24, 0x23	; 35
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	0e 94 35 05 	call	0xa6a	; 0xa6a <cprintf>

            myrobot.inLightField = 0;
     3d0:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <myrobot+0x24>
     3d4:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <myrobot+0x23>
            myrobot.inRoundabout = 0;
     3d8:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <myrobot+0x20>
     3dc:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <myrobot+0x1f>
            myrobot.lspeed = 30;
     3e0:	90 92 c9 02 	sts	0x02C9, r9	; 0x8002c9 <myrobot+0x3>
     3e4:	80 92 c8 02 	sts	0x02C8, r8	; 0x8002c8 <myrobot+0x2>
            myrobot.rspeed = -30;
     3e8:	d0 93 c7 02 	sts	0x02C7, r29	; 0x8002c7 <myrobot+0x1>
     3ec:	c0 93 c6 02 	sts	0x02C6, r28	; 0x8002c6 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 800); // TUNE HERE
     3f0:	20 e2       	ldi	r18, 0x20	; 32
     3f2:	33 e0       	ldi	r19, 0x03	; 3
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <OSTimeDlyHMSM>

            myrobot.lspeed = 60;
     3fe:	30 92 c9 02 	sts	0x02C9, r3	; 0x8002c9 <myrobot+0x3>
     402:	20 92 c8 02 	sts	0x02C8, r2	; 0x8002c8 <myrobot+0x2>
            myrobot.rspeed = 60;
     406:	30 92 c7 02 	sts	0x02C7, r3	; 0x8002c7 <myrobot+0x1>
     40a:	20 92 c6 02 	sts	0x02C6, r2	; 0x8002c6 <myrobot>
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE
     40e:	20 e2       	ldi	r18, 0x20	; 32
     410:	33 e0       	ldi	r19, 0x03	; 3
     412:	41 e0       	ldi	r20, 0x01	; 1
            myrobot.rspeed = 30;
            OSTimeDlyHMSM(0, 0, 0, 600); // TUNE HERE

            myrobot.lspeed = -65;
            myrobot.rspeed = 65;
            OSTimeDlyHMSM(0, 0, 0, 200); // TUNE HERE
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <OSTimeDlyHMSM>
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	73 cf       	rjmp	.-282    	; 0x308 <Navig+0x2c>

            myrobot.lspeed = 60;
            myrobot.rspeed = 60;
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE

        } else if (lightSense >= 85 && myrobot.inLightField == 0) {
     422:	95 e5       	ldi	r25, 0x55	; 85
     424:	a9 16       	cp	r10, r25
     426:	b1 04       	cpc	r11, r1
     428:	9c f1       	brlt	.+102    	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
     42a:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <myrobot+0x23>
     42e:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <myrobot+0x24>
     432:	89 2b       	or	r24, r25
     434:	69 f5       	brne	.+90     	; 0x490 <__FUSE_REGION_LENGTH__+0x90>

            cprintf("Light Detected\n");
     436:	86 e3       	ldi	r24, 0x36	; 54
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	9f 93       	push	r25
     43c:	8f 93       	push	r24
     43e:	0e 94 35 05 	call	0xa6a	; 0xa6a <cprintf>

            myrobot.inRoundabout = 0;
     442:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <myrobot+0x20>
     446:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <myrobot+0x1f>
            myrobot.inLightField = 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <myrobot+0x24>
     452:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <myrobot+0x23>
            myrobot.lspeed = 30;
     456:	90 92 c9 02 	sts	0x02C9, r9	; 0x8002c9 <myrobot+0x3>
     45a:	80 92 c8 02 	sts	0x02C8, r8	; 0x8002c8 <myrobot+0x2>
            myrobot.rspeed = 30;
     45e:	90 92 c7 02 	sts	0x02C7, r9	; 0x8002c7 <myrobot+0x1>
     462:	80 92 c6 02 	sts	0x02C6, r8	; 0x8002c6 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 600); // TUNE HERE
     466:	28 e5       	ldi	r18, 0x58	; 88
     468:	32 e0       	ldi	r19, 0x02	; 2
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <OSTimeDlyHMSM>

            myrobot.lspeed = -65;
     474:	8f eb       	ldi	r24, 0xBF	; 191
     476:	9f ef       	ldi	r25, 0xFF	; 255
     478:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <myrobot+0x3>
     47c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <myrobot+0x2>
            myrobot.rspeed = 65;
     480:	10 93 c7 02 	sts	0x02C7, r17	; 0x8002c7 <myrobot+0x1>
     484:	00 93 c6 02 	sts	0x02C6, r16	; 0x8002c6 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 200); // TUNE HERE
     488:	28 ec       	ldi	r18, 0xC8	; 200
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	c2 cf       	rjmp	.-124    	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
        } else {

            int sense = myrobot.goal;
     490:	a0 90 df 02 	lds	r10, 0x02DF	; 0x8002df <myrobot+0x19>
     494:	b0 90 e0 02 	lds	r11, 0x02E0	; 0x8002e0 <myrobot+0x1a>

            int sensorValue = robo_lineSensor();
     498:	0e 94 ba 04 	call	0x974	; 0x974 <robo_lineSensor>
     49c:	fc 01       	movw	r30, r24

            // if(sensorValue == 100) {
            if(myrobot.inRoundabout == 1) {
     49e:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <myrobot+0x1f>
     4a2:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <myrobot+0x20>
     4a6:	21 30       	cpi	r18, 0x01	; 1
     4a8:	31 05       	cpc	r19, r1
     4aa:	19 f5       	brne	.+70     	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>

                // roundabout mode

                switch (sensorValue) {
     4ac:	08 97       	sbiw	r24, 0x08	; 8
     4ae:	08 f0       	brcs	.+2      	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
     4b0:	4b c0       	rjmp	.+150    	; 0x548 <__FUSE_REGION_LENGTH__+0x148>
     4b2:	e3 5a       	subi	r30, 0xA3	; 163
     4b4:	fd 4f       	sbci	r31, 0xFD	; 253
     4b6:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__tablejump2__>
     4ba:	ad 02       	muls	r26, r29
     4bc:	ad 02       	muls	r26, r29
     4be:	92 02       	muls	r25, r18
     4c0:	65 02       	muls	r22, r21
     4c2:	9c 02       	muls	r25, r28
     4c4:	92 02       	muls	r25, r18
     4c6:	74 02       	muls	r23, r20
     4c8:	ad 02       	muls	r26, r29
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 1500;
     4ca:	5c ed       	ldi	r21, 0xDC	; 220
     4cc:	a5 2e       	mov	r10, r21
     4ce:	55 e0       	ldi	r21, 0x05	; 5
     4d0:	b5 2e       	mov	r11, r21
                    default: myrobot.lspeed = -30;
                             myrobot.rspeed = -30;
                             break;
                }

                pidControl(sense);
     4d2:	c5 01       	movw	r24, r10
     4d4:	0e 94 ac 00 	call	0x158	; 0x158 <pidControl>
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 5);                /* Task period ~ 500 ms                  */
     4d8:	25 e0       	ldi	r18, 0x05	; 5
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <OSTimeDlyHMSM>
     4e6:	10 cf       	rjmp	.-480    	; 0x308 <Navig+0x2c>
                            break;

                    case 5: sense = 1000;
                            break;

                    case 6: sense = 500;
     4e8:	44 ef       	ldi	r20, 0xF4	; 244
     4ea:	a4 2e       	mov	r10, r20
     4ec:	bb 24       	eor	r11, r11
     4ee:	b3 94       	inc	r11
                            break;
     4f0:	f0 cf       	rjmp	.-32     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
                // myrobot.rspeed = - (myrobot.prevLeftSpeed * 1.1);
                
                //myrobot.lspeed = - 40;
               // myrobot.rspeed = - 30;

            } else if (myrobot.inLightField == 1) {
     4f2:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <myrobot+0x23>
     4f6:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <myrobot+0x24>
     4fa:	21 30       	cpi	r18, 0x01	; 1
     4fc:	31 05       	cpc	r19, r1
     4fe:	91 f5       	brne	.+100    	; 0x564 <__FUSE_REGION_LENGTH__+0x164>

                // light field mode

                robo_LED_toggle();
     500:	25 b1       	in	r18, 0x05	; 5
     502:	31 e0       	ldi	r19, 0x01	; 1
     504:	23 27       	eor	r18, r19
     506:	25 b9       	out	0x05, r18	; 5

                switch (sensorValue) {
     508:	08 97       	sbiw	r24, 0x08	; 8
     50a:	f0 f4       	brcc	.+60     	; 0x548 <__FUSE_REGION_LENGTH__+0x148>
     50c:	e6 57       	subi	r30, 0x76	; 118
     50e:	fd 4f       	sbci	r31, 0xFD	; 253
     510:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__tablejump2__>
     514:	92 02       	muls	r25, r18
     516:	ad 02       	muls	r26, r29
     518:	92 02       	muls	r25, r18
     51a:	97 02       	muls	r25, r23
     51c:	9c 02       	muls	r25, r28
     51e:	92 02       	muls	r25, r18
     520:	9f 02       	muls	r25, r31
     522:	92 02       	muls	r25, r18
                    case 2: sense = 1000;
     524:	38 ee       	ldi	r19, 0xE8	; 232
     526:	a3 2e       	mov	r10, r19
     528:	33 e0       	ldi	r19, 0x03	; 3
     52a:	b3 2e       	mov	r11, r19
     52c:	d2 cf       	rjmp	.-92     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 2500;
     52e:	24 ec       	ldi	r18, 0xC4	; 196
     530:	a2 2e       	mov	r10, r18
     532:	29 e0       	ldi	r18, 0x09	; 9
     534:	b2 2e       	mov	r11, r18
                            break;
     536:	cd cf       	rjmp	.-102    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>

                    case 4: sense = 0;
     538:	b1 2c       	mov	r11, r1
     53a:	a1 2c       	mov	r10, r1
                            break;
     53c:	ca cf       	rjmp	.-108    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>

                    case 5: sense = 1000;
                            break;

                    case 6: sense = -500;
     53e:	9c e0       	ldi	r25, 0x0C	; 12
     540:	a9 2e       	mov	r10, r25
     542:	9e ef       	ldi	r25, 0xFE	; 254
     544:	b9 2e       	mov	r11, r25
                            break;
     546:	c5 cf       	rjmp	.-118    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
                            break;
                    case 0:
                            sense = 1000;
                            break;               
                    
                    default: myrobot.lspeed = -30;
     548:	d0 93 c9 02 	sts	0x02C9, r29	; 0x8002c9 <myrobot+0x3>
     54c:	c0 93 c8 02 	sts	0x02C8, r28	; 0x8002c8 <myrobot+0x2>
                             myrobot.rspeed = -30;
     550:	d0 93 c7 02 	sts	0x02C7, r29	; 0x8002c7 <myrobot+0x1>
     554:	c0 93 c6 02 	sts	0x02C6, r28	; 0x8002c6 <myrobot>
                             break;
     558:	bc cf       	rjmp	.-136    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>

                switch (sensorValue) {
                    case 2: sense = 1000;
                            break;
                    
                    case 1: sense = 2000;
     55a:	80 ed       	ldi	r24, 0xD0	; 208
     55c:	a8 2e       	mov	r10, r24
     55e:	87 e0       	ldi	r24, 0x07	; 7
     560:	b8 2e       	mov	r11, r24
     562:	b7 cf       	rjmp	.-146    	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
                             break;
                }

                pidControl(sense);

            } else if (myrobot.inBlackBox == 1) {
     564:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <myrobot+0x25>
     568:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <myrobot+0x26>
     56c:	21 30       	cpi	r18, 0x01	; 1
     56e:	31 05       	cpc	r19, r1
     570:	09 f0       	breq	.+2      	; 0x574 <__FUSE_REGION_LENGTH__+0x174>
     572:	3a c0       	rjmp	.+116    	; 0x5e8 <__FUSE_REGION_LENGTH__+0x1e8>

                switch (sensorValue) {
     574:	08 97       	sbiw	r24, 0x08	; 8
     576:	08 f0       	brcs	.+2      	; 0x57a <__FUSE_REGION_LENGTH__+0x17a>
     578:	ae c0       	rjmp	.+348    	; 0x6d6 <__FUSE_REGION_LENGTH__+0x2d6>
     57a:	ef 53       	subi	r30, 0x3F	; 63
     57c:	fd 4f       	sbci	r31, 0xFD	; 253
     57e:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__tablejump2__>
     582:	eb 02       	muls	r30, r27
     584:	0c 03       	fmul	r16, r20
     586:	03 03       	mulsu	r16, r19
     588:	15 03       	mulsu	r17, r21
     58a:	1a 03       	fmul	r17, r18
     58c:	c9 02       	muls	r28, r25
     58e:	2e 03       	fmul	r18, r22
     590:	e4 02       	muls	r30, r20

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
                            break;

                    case 5: myrobot.lspeed = 75;
     592:	8b e4       	ldi	r24, 0x4B	; 75
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <myrobot+0x3>
     59a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <myrobot+0x2>
                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
     59e:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <myrobot+0x1>
     5a2:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <myrobot>
                             myrobot.rspeed = -30;
                             break;
                }

                if(sensorValue != 0) {
                    myrobot.prevLeftSpeed = myrobot.lspeed;
     5a6:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <myrobot+0x2>
     5aa:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <myrobot+0x3>
     5ae:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <myrobot+0x1c>
     5b2:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <myrobot+0x1b>
                    myrobot.prevRightSpeed = myrobot.rspeed;
     5b6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <myrobot>
     5ba:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <myrobot+0x1>
     5be:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <myrobot+0x1e>
     5c2:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <myrobot+0x1d>
     5c6:	88 cf       	rjmp	.-240    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     5c8:	10 93 c9 02 	sts	0x02C9, r17	; 0x8002c9 <myrobot+0x3>
     5cc:	00 93 c8 02 	sts	0x02C8, r16	; 0x8002c8 <myrobot+0x2>
                            myrobot.rspeed = 75;
     5d0:	8b e4       	ldi	r24, 0x4B	; 75
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	e4 cf       	rjmp	.-56     	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
                            break;

                    case 0: myrobot.lspeed = 30;
     5d6:	90 92 c9 02 	sts	0x02C9, r9	; 0x8002c9 <myrobot+0x3>
     5da:	80 92 c8 02 	sts	0x02C8, r8	; 0x8002c8 <myrobot+0x2>
                            myrobot.rspeed = 60;
     5de:	30 92 c7 02 	sts	0x02C7, r3	; 0x8002c7 <myrobot+0x1>
     5e2:	20 92 c6 02 	sts	0x02C6, r2	; 0x8002c6 <myrobot>
     5e6:	78 cf       	rjmp	.-272    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
                }

            } else {

                // normal mode
                switch (sensorValue) {
     5e8:	08 97       	sbiw	r24, 0x08	; 8
     5ea:	08 f0       	brcs	.+2      	; 0x5ee <__FUSE_REGION_LENGTH__+0x1ee>
     5ec:	74 c0       	rjmp	.+232    	; 0x6d6 <__FUSE_REGION_LENGTH__+0x2d6>
     5ee:	e5 50       	subi	r30, 0x05	; 5
     5f0:	fd 4f       	sbci	r31, 0xFD	; 253
     5f2:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__tablejump2__>
     5f6:	3a 03       	fmul	r19, r18
     5f8:	0c 03       	fmul	r16, r20
     5fa:	03 03       	mulsu	r16, r19
     5fc:	15 03       	mulsu	r17, r21
     5fe:	1a 03       	fmul	r17, r18
     600:	23 03       	mulsu	r18, r19
     602:	2e 03       	fmul	r18, r22
     604:	33 03       	mulsu	r19, r19
                    case 2: myrobot.lspeed = 50;
     606:	d0 92 c9 02 	sts	0x02C9, r13	; 0x8002c9 <myrobot+0x3>
     60a:	c0 92 c8 02 	sts	0x02C8, r12	; 0x8002c8 <myrobot+0x2>
                            myrobot.rspeed = 50;
     60e:	d0 92 c7 02 	sts	0x02C7, r13	; 0x8002c7 <myrobot+0x1>
     612:	c0 92 c6 02 	sts	0x02C6, r12	; 0x8002c6 <myrobot>
                            break;
     616:	c7 cf       	rjmp	.-114    	; 0x5a6 <__FUSE_REGION_LENGTH__+0x1a6>
                    
                    case 1: myrobot.lspeed = 45;
     618:	70 92 c9 02 	sts	0x02C9, r7	; 0x8002c9 <myrobot+0x3>
     61c:	60 92 c8 02 	sts	0x02C8, r6	; 0x8002c8 <myrobot+0x2>
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
     620:	f0 92 c7 02 	sts	0x02C7, r15	; 0x8002c7 <myrobot+0x1>
     624:	e0 92 c6 02 	sts	0x02C6, r14	; 0x8002c6 <myrobot>
                            break;
     628:	be cf       	rjmp	.-132    	; 0x5a6 <__FUSE_REGION_LENGTH__+0x1a6>
                    
                    case 1: myrobot.lspeed = 45;
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
     62a:	10 93 c9 02 	sts	0x02C9, r17	; 0x8002c9 <myrobot+0x3>
     62e:	00 93 c8 02 	sts	0x02C8, r16	; 0x8002c8 <myrobot+0x2>
     632:	f6 cf       	rjmp	.-20     	; 0x620 <__FUSE_REGION_LENGTH__+0x220>
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
     634:	f0 92 c9 02 	sts	0x02C9, r15	; 0x8002c9 <myrobot+0x3>
     638:	e0 92 c8 02 	sts	0x02C8, r14	; 0x8002c8 <myrobot+0x2>
                            myrobot.rspeed = 45;
     63c:	70 92 c7 02 	sts	0x02C7, r7	; 0x8002c7 <myrobot+0x1>
     640:	60 92 c6 02 	sts	0x02C6, r6	; 0x8002c6 <myrobot>
                            break;
     644:	b0 cf       	rjmp	.-160    	; 0x5a6 <__FUSE_REGION_LENGTH__+0x1a6>

                    case 5: myrobot.lspeed = - 65;
     646:	8f eb       	ldi	r24, 0xBF	; 191
     648:	9f ef       	ldi	r25, 0xFF	; 255
     64a:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <myrobot+0x3>
     64e:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <myrobot+0x2>
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
     652:	10 93 c7 02 	sts	0x02C7, r17	; 0x8002c7 <myrobot+0x1>
     656:	00 93 c6 02 	sts	0x02C6, r16	; 0x8002c6 <myrobot>
                            break;
     65a:	a5 cf       	rjmp	.-182    	; 0x5a6 <__FUSE_REGION_LENGTH__+0x1a6>

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     65c:	f0 92 c9 02 	sts	0x02C9, r15	; 0x8002c9 <myrobot+0x3>
     660:	e0 92 c8 02 	sts	0x02C8, r14	; 0x8002c8 <myrobot+0x2>
     664:	f6 cf       	rjmp	.-20     	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     666:	10 93 c9 02 	sts	0x02C9, r17	; 0x8002c9 <myrobot+0x3>
     66a:	00 93 c8 02 	sts	0x02C8, r16	; 0x8002c8 <myrobot+0x2>
                            myrobot.rspeed = - 65;
     66e:	8f eb       	ldi	r24, 0xBF	; 191
     670:	9f ef       	ldi	r25, 0xFF	; 255
     672:	95 cf       	rjmp	.-214    	; 0x59e <__FUSE_REGION_LENGTH__+0x19e>
                            break;

                    case 0: //myrobot.lspeed = - 50;
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
     674:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <myrobot+0x1d>
     678:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <myrobot+0x1e>
     67c:	66 5f       	subi	r22, 0xF6	; 246
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	07 2e       	mov	r0, r23
     682:	00 0c       	add	r0, r0
     684:	88 0b       	sbc	r24, r24
     686:	99 0b       	sbc	r25, r25
     688:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__floatsisf>
     68c:	2a e9       	ldi	r18, 0x9A	; 154
     68e:	39 e9       	ldi	r19, 0x99	; 153
     690:	49 e1       	ldi	r20, 0x19	; 25
     692:	5f e3       	ldi	r21, 0x3F	; 63
     694:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__mulsf3>
     698:	90 58       	subi	r25, 0x80	; 128
     69a:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixsfsi>
     69e:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <myrobot+0x3>
     6a2:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <myrobot+0x2>
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
     6a6:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <myrobot+0x1b>
     6aa:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <myrobot+0x1c>
     6ae:	07 2e       	mov	r0, r23
     6b0:	00 0c       	add	r0, r0
     6b2:	88 0b       	sbc	r24, r24
     6b4:	99 0b       	sbc	r25, r25
     6b6:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__floatsisf>
     6ba:	2a e9       	ldi	r18, 0x9A	; 154
     6bc:	39 e9       	ldi	r19, 0x99	; 153
     6be:	49 e1       	ldi	r20, 0x19	; 25
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__mulsf3>
     6c6:	90 58       	subi	r25, 0x80	; 128
     6c8:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixsfsi>
     6cc:	70 93 c7 02 	sts	0x02C7, r23	; 0x8002c7 <myrobot+0x1>
     6d0:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <myrobot>
     6d4:	01 cf       	rjmp	.-510    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     6d6:	d0 93 c9 02 	sts	0x02C9, r29	; 0x8002c9 <myrobot+0x3>
     6da:	c0 93 c8 02 	sts	0x02C8, r28	; 0x8002c8 <myrobot+0x2>
                             myrobot.rspeed = -30;
     6de:	d0 93 c7 02 	sts	0x02C7, r29	; 0x8002c7 <myrobot+0x1>
     6e2:	c0 93 c6 02 	sts	0x02C6, r28	; 0x8002c6 <myrobot>
                             break;
     6e6:	5f cf       	rjmp	.-322    	; 0x5a6 <__FUSE_REGION_LENGTH__+0x1a6>

000006e8 <ADC_init>:
     6e8:	80 e4       	ldi	r24, 0x40	; 64
     6ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     6ee:	86 e8       	ldi	r24, 0x86	; 134
     6f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6f4:	08 95       	ret

000006f6 <ADC_read>:
     6f6:	f8 94       	cli
     6f8:	80 64       	ori	r24, 0x40	; 64
     6fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     6fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     702:	80 64       	ori	r24, 0x40	; 64
     704:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     708:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     70c:	84 ff       	sbrs	r24, 4
     70e:	fc cf       	rjmp	.-8      	; 0x708 <ADC_read+0x12>
     710:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     714:	80 61       	ori	r24, 0x10	; 16
     716:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     71a:	78 94       	sei
     71c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     720:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     724:	93 70       	andi	r25, 0x03	; 3
     726:	08 95       	ret

00000728 <PWM8_write>:
     728:	81 11       	cpse	r24, r1
     72a:	05 c0       	rjmp	.+10     	; 0x736 <PWM8_write+0xe>
     72c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     730:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     734:	08 95       	ret
     736:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     73a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     73e:	08 95       	ret

00000740 <motor_init>:
     740:	8a b1       	in	r24, 0x0a	; 10
     742:	80 6f       	ori	r24, 0xF0	; 240
     744:	8a b9       	out	0x0a, r24	; 10
     746:	8b b1       	in	r24, 0x0b	; 11
     748:	8f 70       	andi	r24, 0x0F	; 15
     74a:	8b b9       	out	0x0b, r24	; 11
     74c:	81 ea       	ldi	r24, 0xA1	; 161
     74e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     758:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     75c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     760:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     764:	a8 e8       	ldi	r26, 0x88	; 136
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	1c 92       	st	X, r1
     76a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     76e:	ea e8       	ldi	r30, 0x8A	; 138
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	10 82       	st	Z, r1
     774:	84 b1       	in	r24, 0x04	; 4
     776:	86 60       	ori	r24, 0x06	; 6
     778:	84 b9       	out	0x04, r24	; 4
     77a:	11 96       	adiw	r26, 0x01	; 1
     77c:	1c 92       	st	X, r1
     77e:	1e 92       	st	-X, r1
     780:	11 82       	std	Z+1, r1	; 0x01
     782:	10 82       	st	Z, r1
     784:	08 95       	ret

00000786 <motor_set_speed>:
     786:	77 ff       	sbrs	r23, 7
     788:	02 c0       	rjmp	.+4      	; 0x78e <motor_set_speed+0x8>
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	65 36       	cpi	r22, 0x65	; 101
     790:	71 05       	cpc	r23, r1
     792:	14 f0       	brlt	.+4      	; 0x798 <motor_set_speed+0x12>
     794:	64 e6       	ldi	r22, 0x64	; 100
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	9b 01       	movw	r18, r22
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	75 95       	asr	r23
     7a0:	67 95       	ror	r22
     7a2:	62 0f       	add	r22, r18
     7a4:	73 1f       	adc	r23, r19
     7a6:	81 11       	cpse	r24, r1
     7a8:	09 c0       	rjmp	.+18     	; 0x7bc <motor_set_speed+0x36>
     7aa:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     7ae:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     7b2:	70 93 70 04 	sts	0x0470, r23	; 0x800470 <rightWst+0x1>
     7b6:	60 93 6f 04 	sts	0x046F, r22	; 0x80046f <rightWst>
     7ba:	08 95       	ret
     7bc:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     7c0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     7c4:	70 93 74 04 	sts	0x0474, r23	; 0x800474 <leftWst+0x1>
     7c8:	60 93 73 04 	sts	0x0473, r22	; 0x800473 <leftWst>
     7cc:	08 95       	ret

000007ce <motor_set_dir>:
     7ce:	cf 93       	push	r28
     7d0:	c6 2f       	mov	r28, r22
     7d2:	26 2f       	mov	r18, r22
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	81 11       	cpse	r24, r1
     7d8:	2b c0       	rjmp	.+86     	; 0x830 <motor_set_dir+0x62>
     7da:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <rightWst+0x2>
     7de:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <rightWst+0x3>
     7e2:	82 17       	cp	r24, r18
     7e4:	93 07       	cpc	r25, r19
     7e6:	59 f0       	breq	.+22     	; 0x7fe <motor_set_dir+0x30>
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 c3 03 	call	0x786	; 0x786 <motor_set_speed>
     7f2:	8f e9       	ldi	r24, 0x9F	; 159
     7f4:	9f e0       	ldi	r25, 0x0F	; 15
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <motor_set_dir+0x28>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <motor_set_dir+0x2e>
     7fc:	00 00       	nop
     7fe:	c1 11       	cpse	r28, r1
     800:	0e c0       	rjmp	.+28     	; 0x81e <motor_set_dir+0x50>
     802:	5e 98       	cbi	0x0b, 6	; 11
     804:	5f 9a       	sbi	0x0b, 7	; 11
     806:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <rightWst+0x3>
     80a:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <rightWst+0x2>
     80e:	8f e3       	ldi	r24, 0x3F	; 63
     810:	9c e9       	ldi	r25, 0x9C	; 156
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <motor_set_dir+0x44>
     816:	00 c0       	rjmp	.+0      	; 0x818 <motor_set_dir+0x4a>
     818:	00 00       	nop
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret
     81e:	5e 9a       	sbi	0x0b, 6	; 11
     820:	5f 98       	cbi	0x0b, 7	; 11
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <rightWst+0x3>
     82a:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <rightWst+0x2>
     82e:	ef cf       	rjmp	.-34     	; 0x80e <motor_set_dir+0x40>
     830:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <leftWst+0x2>
     834:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <leftWst+0x3>
     838:	82 17       	cp	r24, r18
     83a:	93 07       	cpc	r25, r19
     83c:	59 f0       	breq	.+22     	; 0x854 <motor_set_dir+0x86>
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	0e 94 c3 03 	call	0x786	; 0x786 <motor_set_speed>
     848:	8f e9       	ldi	r24, 0x9F	; 159
     84a:	9f e0       	ldi	r25, 0x0F	; 15
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <motor_set_dir+0x7e>
     850:	00 c0       	rjmp	.+0      	; 0x852 <motor_set_dir+0x84>
     852:	00 00       	nop
     854:	c1 11       	cpse	r28, r1
     856:	07 c0       	rjmp	.+14     	; 0x866 <motor_set_dir+0x98>
     858:	5c 9a       	sbi	0x0b, 4	; 11
     85a:	5d 98       	cbi	0x0b, 5	; 11
     85c:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <leftWst+0x3>
     860:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <leftWst+0x2>
     864:	d4 cf       	rjmp	.-88     	; 0x80e <motor_set_dir+0x40>
     866:	5c 98       	cbi	0x0b, 4	; 11
     868:	5d 9a       	sbi	0x0b, 5	; 11
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <leftWst+0x3>
     872:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <leftWst+0x2>
     876:	cb cf       	rjmp	.-106    	; 0x80e <motor_set_dir+0x40>

00000878 <robo_motorSpeed>:
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
     882:	8b 01       	movw	r16, r22
     884:	97 ff       	sbrs	r25, 7
     886:	1c c0       	rjmp	.+56     	; 0x8c0 <robo_motorSpeed+0x48>
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <motor_set_dir>
     890:	d1 95       	neg	r29
     892:	c1 95       	neg	r28
     894:	d1 09       	sbc	r29, r1
     896:	17 ff       	sbrs	r17, 7
     898:	18 c0       	rjmp	.+48     	; 0x8ca <robo_motorSpeed+0x52>
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <motor_set_dir>
     8a2:	11 95       	neg	r17
     8a4:	01 95       	neg	r16
     8a6:	11 09       	sbc	r17, r1
     8a8:	b8 01       	movw	r22, r16
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	0e 94 c3 03 	call	0x786	; 0x786 <motor_set_speed>
     8b0:	be 01       	movw	r22, r28
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	0c 94 c3 03 	jmp	0x786	; 0x786 <motor_set_speed>
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <motor_set_dir>
     8c8:	e6 cf       	rjmp	.-52     	; 0x896 <robo_motorSpeed+0x1e>
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 e7 03 	call	0x7ce	; 0x7ce <motor_set_dir>
     8d2:	ea cf       	rjmp	.-44     	; 0x8a8 <robo_motorSpeed+0x30>

000008d4 <USART0_init>:
     8d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     8d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     8dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     8e0:	88 e1       	ldi	r24, 0x18	; 24
     8e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     8e6:	86 e0       	ldi	r24, 0x06	; 6
     8e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     8ec:	08 95       	ret

000008ee <cputchar>:
     8ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     8f2:	95 ff       	sbrs	r25, 5
     8f4:	fc cf       	rjmp	.-8      	; 0x8ee <cputchar>
     8f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     8fa:	08 95       	ret

000008fc <cgetchar>:
     8fc:	cf 93       	push	r28
     8fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     902:	87 ff       	sbrs	r24, 7
     904:	fc cf       	rjmp	.-8      	; 0x8fe <cgetchar+0x2>
     906:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     90a:	8c 2f       	mov	r24, r28
     90c:	0e 94 77 04 	call	0x8ee	; 0x8ee <cputchar>
     910:	8c 2f       	mov	r24, r28
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <cputs>:
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
     91c:	89 91       	ld	r24, Y+
     91e:	81 11       	cpse	r24, r1
     920:	03 c0       	rjmp	.+6      	; 0x928 <cputs+0x12>
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret
     928:	0e 94 77 04 	call	0x8ee	; 0x8ee <cputchar>
     92c:	f7 cf       	rjmp	.-18     	; 0x91c <cputs+0x6>

0000092e <robo_proxSensor>:
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <ADC_read>
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	84 36       	cpi	r24, 0x64	; 100
     93a:	91 05       	cpc	r25, r1
     93c:	10 f0       	brcs	.+4      	; 0x942 <robo_proxSensor+0x14>
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	c9 01       	movw	r24, r18
     944:	08 95       	ret

00000946 <robo_lightSensor>:
     946:	84 e0       	ldi	r24, 0x04	; 4
     948:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <ADC_read>
     94c:	2b ef       	ldi	r18, 0xFB	; 251
     94e:	ac 01       	movw	r20, r24
     950:	24 03       	mulsu	r18, r20
     952:	c0 01       	movw	r24, r0
     954:	25 9f       	mul	r18, r21
     956:	90 0d       	add	r25, r0
     958:	11 24       	eor	r1, r1
     95a:	85 50       	subi	r24, 0x05	; 5
     95c:	9c 4e       	sbci	r25, 0xEC	; 236
     95e:	63 e3       	ldi	r22, 0x33	; 51
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__divmodhi4>
     966:	cb 01       	movw	r24, r22
     968:	65 36       	cpi	r22, 0x65	; 101
     96a:	71 05       	cpc	r23, r1
     96c:	14 f0       	brlt	.+4      	; 0x972 <robo_lightSensor+0x2c>
     96e:	84 e6       	ldi	r24, 0x64	; 100
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	08 95       	ret

00000974 <robo_lineSensor>:
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	d1 e0       	ldi	r29, 0x01	; 1
     97c:	cc 0f       	add	r28, r28
     97e:	8d 2f       	mov	r24, r29
     980:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <ADC_read>
     984:	8c 32       	cpi	r24, 0x2C	; 44
     986:	91 40       	sbci	r25, 0x01	; 1
     988:	0c f4       	brge	.+2      	; 0x98c <robo_lineSensor+0x18>
     98a:	c1 60       	ori	r28, 0x01	; 1
     98c:	df 5f       	subi	r29, 0xFF	; 255
     98e:	d4 30       	cpi	r29, 0x04	; 4
     990:	a9 f7       	brne	.-22     	; 0x97c <robo_lineSensor+0x8>
     992:	8c 2f       	mov	r24, r28
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <robo_bumpSensorR>:
     99c:	83 b1       	in	r24, 0x03	; 3
     99e:	82 95       	swap	r24
     9a0:	8f 70       	andi	r24, 0x0F	; 15
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	89 27       	eor	r24, r25
     9a6:	81 70       	andi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	08 95       	ret

000009ac <robo_bumpSensorL>:
     9ac:	83 b1       	in	r24, 0x03	; 3
     9ae:	86 95       	lsr	r24
     9b0:	86 95       	lsr	r24
     9b2:	86 95       	lsr	r24
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	89 27       	eor	r24, r25
     9b8:	81 70       	andi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	08 95       	ret

000009be <robo_Honk>:
     9be:	5b 9a       	sbi	0x0b, 3	; 11
     9c0:	2f ef       	ldi	r18, 0xFF	; 255
     9c2:	85 ea       	ldi	r24, 0xA5	; 165
     9c4:	9e e0       	ldi	r25, 0x0E	; 14
     9c6:	21 50       	subi	r18, 0x01	; 1
     9c8:	80 40       	sbci	r24, 0x00	; 0
     9ca:	90 40       	sbci	r25, 0x00	; 0
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <robo_Honk+0x8>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <robo_Honk+0x12>
     9d0:	00 00       	nop
     9d2:	5b 98       	cbi	0x0b, 3	; 11
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	85 ea       	ldi	r24, 0xA5	; 165
     9d8:	9e e0       	ldi	r25, 0x0E	; 14
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	80 40       	sbci	r24, 0x00	; 0
     9de:	90 40       	sbci	r25, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <robo_Honk+0x1c>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <robo_Honk+0x26>
     9e4:	00 00       	nop
     9e6:	08 95       	ret

000009e8 <robo_checkBattery>:
     9e8:	85 e0       	ldi	r24, 0x05	; 5
     9ea:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <ADC_read>
     9ee:	84 3f       	cpi	r24, 0xF4	; 244
     9f0:	91 40       	sbci	r25, 0x01	; 1
     9f2:	10 f4       	brcc	.+4      	; 0x9f8 <robo_checkBattery+0x10>
     9f4:	28 9a       	sbi	0x05, 0	; 5
     9f6:	08 95       	ret
     9f8:	28 98       	cbi	0x05, 0	; 5
     9fa:	08 95       	ret

000009fc <robo_goPressed>:
     9fc:	89 b1       	in	r24, 0x09	; 9
     9fe:	82 fb       	bst	r24, 2
     a00:	88 27       	eor	r24, r24
     a02:	80 f9       	bld	r24, 0
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	89 27       	eor	r24, r25
     a08:	08 95       	ret

00000a0a <robo_wait4goPress>:
     a0a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <robo_goPressed>
     a0e:	88 23       	and	r24, r24
     a10:	e1 f3       	breq	.-8      	; 0xa0a <robo_wait4goPress>
     a12:	08 95       	ret

00000a14 <OS_ticks_init>:
     a14:	f8 94       	cli
     a16:	85 e0       	ldi	r24, 0x05	; 5
     a18:	85 bd       	out	0x25, r24	; 37
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     a20:	84 e6       	ldi	r24, 0x64	; 100
     a22:	86 bd       	out	0x26, r24	; 38
     a24:	78 94       	sei
     a26:	08 95       	ret

00000a28 <HAL_init>:
     a28:	87 e6       	ldi	r24, 0x67	; 103
     a2a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <USART0_init>
     a2e:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <ADC_init>

00000a32 <robo_Setup>:
     a32:	0e 94 14 05 	call	0xa28	; 0xa28 <HAL_init>
     a36:	0e 94 a0 03 	call	0x740	; 0x740 <motor_init>
     a3a:	53 9a       	sbi	0x0a, 3	; 10
     a3c:	5b 98       	cbi	0x0b, 3	; 11
     a3e:	20 9a       	sbi	0x04, 0	; 4
     a40:	52 98       	cbi	0x0a, 2	; 10
     a42:	5a 9a       	sbi	0x0b, 2	; 11
     a44:	24 98       	cbi	0x04, 4	; 4
     a46:	23 98       	cbi	0x04, 3	; 4
     a48:	85 b1       	in	r24, 0x05	; 5
     a4a:	88 61       	ori	r24, 0x18	; 24
     a4c:	85 b9       	out	0x05, r24	; 5
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 e7 03 	call	0x7ce	; 0x7ce <motor_set_dir>
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <motor_set_dir>
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	0c 94 3c 04 	jmp	0x878	; 0x878 <robo_motorSpeed>

00000a6a <cprintf>:
     a6a:	4f 92       	push	r4
     a6c:	5f 92       	push	r5
     a6e:	6f 92       	push	r6
     a70:	7f 92       	push	r7
     a72:	8f 92       	push	r8
     a74:	9f 92       	push	r9
     a76:	af 92       	push	r10
     a78:	bf 92       	push	r11
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	de 01       	movw	r26, r28
     a90:	53 96       	adiw	r26, 0x13	; 19
     a92:	ed 91       	ld	r30, X+
     a94:	fd 91       	ld	r31, X+
     a96:	8d 01       	movw	r16, r26
     a98:	5a e0       	ldi	r21, 0x0A	; 10
     a9a:	65 2e       	mov	r6, r21
     a9c:	71 2c       	mov	r7, r1
     a9e:	80 81       	ld	r24, Z
     aa0:	85 32       	cpi	r24, 0x25	; 37
     aa2:	81 f4       	brne	.+32     	; 0xac4 <cprintf+0x5a>
     aa4:	5f 01       	movw	r10, r30
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	a8 0e       	add	r10, r24
     aaa:	b1 1c       	adc	r11, r1
     aac:	81 81       	ldd	r24, Z+1	; 0x01
     aae:	84 36       	cpi	r24, 0x64	; 100
     ab0:	09 f4       	brne	.+2      	; 0xab4 <cprintf+0x4a>
     ab2:	50 c0       	rjmp	.+160    	; 0xb54 <cprintf+0xea>
     ab4:	90 f4       	brcc	.+36     	; 0xada <cprintf+0x70>
     ab6:	83 36       	cpi	r24, 0x63	; 99
     ab8:	61 f4       	brne	.+24     	; 0xad2 <cprintf+0x68>
     aba:	f8 01       	movw	r30, r16
     abc:	80 81       	ld	r24, Z
     abe:	0e 5f       	subi	r16, 0xFE	; 254
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <cprintf+0x68>
     ac4:	88 23       	and	r24, r24
     ac6:	09 f4       	brne	.+2      	; 0xaca <cprintf+0x60>
     ac8:	5d c0       	rjmp	.+186    	; 0xb84 <cprintf+0x11a>
     aca:	5f 01       	movw	r10, r30
     acc:	9f ef       	ldi	r25, 0xFF	; 255
     ace:	a9 1a       	sub	r10, r25
     ad0:	b9 0a       	sbc	r11, r25
     ad2:	0e 94 77 04 	call	0x8ee	; 0x8ee <cputchar>
     ad6:	f5 01       	movw	r30, r10
     ad8:	e2 cf       	rjmp	.-60     	; 0xa9e <cprintf+0x34>
     ada:	83 37       	cpi	r24, 0x73	; 115
     adc:	71 f1       	breq	.+92     	; 0xb3a <cprintf+0xd0>
     ade:	30 e1       	ldi	r19, 0x10	; 16
     ae0:	83 2e       	mov	r8, r19
     ae2:	91 2c       	mov	r9, r1
     ae4:	e1 2c       	mov	r14, r1
     ae6:	40 e1       	ldi	r20, 0x10	; 16
     ae8:	f4 2e       	mov	r15, r20
     aea:	88 37       	cpi	r24, 0x78	; 120
     aec:	91 f7       	brne	.-28     	; 0xad2 <cprintf+0x68>
     aee:	f8 01       	movw	r30, r16
     af0:	c0 80       	ld	r12, Z
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	0e 5f       	subi	r16, 0xFE	; 254
     af6:	1f 4f       	sbci	r17, 0xFF	; 255
     af8:	84 36       	cpi	r24, 0x64	; 100
     afa:	59 f4       	brne	.+22     	; 0xb12 <cprintf+0xa8>
     afc:	d7 fe       	sbrs	r13, 7
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <cprintf+0xa2>
     b00:	d1 94       	neg	r13
     b02:	c1 94       	neg	r12
     b04:	d1 08       	sbc	r13, r1
     b06:	8d e2       	ldi	r24, 0x2D	; 45
     b08:	0e 94 77 04 	call	0x8ee	; 0x8ee <cputchar>
     b0c:	ce 14       	cp	r12, r14
     b0e:	df 04       	cpc	r13, r15
     b10:	48 f1       	brcs	.+82     	; 0xb64 <cprintf+0xfa>
     b12:	c6 01       	movw	r24, r12
     b14:	b7 01       	movw	r22, r14
     b16:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     b1a:	2c 01       	movw	r4, r24
     b1c:	68 5f       	subi	r22, 0xF8	; 248
     b1e:	7d 4f       	sbci	r23, 0xFD	; 253
     b20:	fb 01       	movw	r30, r22
     b22:	80 81       	ld	r24, Z
     b24:	0e 94 77 04 	call	0x8ee	; 0x8ee <cputchar>
     b28:	62 01       	movw	r12, r4
     b2a:	c7 01       	movw	r24, r14
     b2c:	b4 01       	movw	r22, r8
     b2e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     b32:	7b 01       	movw	r14, r22
     b34:	67 2b       	or	r22, r23
     b36:	69 f7       	brne	.-38     	; 0xb12 <cprintf+0xa8>
     b38:	ce cf       	rjmp	.-100    	; 0xad6 <cprintf+0x6c>
     b3a:	f8 01       	movw	r30, r16
     b3c:	e0 80       	ld	r14, Z
     b3e:	f1 80       	ldd	r15, Z+1	; 0x01
     b40:	0e 5f       	subi	r16, 0xFE	; 254
     b42:	1f 4f       	sbci	r17, 0xFF	; 255
     b44:	f7 01       	movw	r30, r14
     b46:	81 91       	ld	r24, Z+
     b48:	7f 01       	movw	r14, r30
     b4a:	88 23       	and	r24, r24
     b4c:	21 f2       	breq	.-120    	; 0xad6 <cprintf+0x6c>
     b4e:	0e 94 77 04 	call	0x8ee	; 0x8ee <cputchar>
     b52:	f8 cf       	rjmp	.-16     	; 0xb44 <cprintf+0xda>
     b54:	9a e0       	ldi	r25, 0x0A	; 10
     b56:	89 2e       	mov	r8, r25
     b58:	91 2c       	mov	r9, r1
     b5a:	20 e1       	ldi	r18, 0x10	; 16
     b5c:	e2 2e       	mov	r14, r18
     b5e:	27 e2       	ldi	r18, 0x27	; 39
     b60:	f2 2e       	mov	r15, r18
     b62:	c5 cf       	rjmp	.-118    	; 0xaee <cprintf+0x84>
     b64:	c7 01       	movw	r24, r14
     b66:	b3 01       	movw	r22, r6
     b68:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     b6c:	7b 01       	movw	r14, r22
     b6e:	62 30       	cpi	r22, 0x02	; 2
     b70:	71 05       	cpc	r23, r1
     b72:	60 f6       	brcc	.-104    	; 0xb0c <cprintf+0xa2>
     b74:	c6 01       	movw	r24, r12
     b76:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
     b7a:	fb 01       	movw	r30, r22
     b7c:	e8 5f       	subi	r30, 0xF8	; 248
     b7e:	fd 4f       	sbci	r31, 0xFD	; 253
     b80:	80 81       	ld	r24, Z
     b82:	a7 cf       	rjmp	.-178    	; 0xad2 <cprintf+0x68>
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	9f 90       	pop	r9
     b9e:	8f 90       	pop	r8
     ba0:	7f 90       	pop	r7
     ba2:	6f 90       	pop	r6
     ba4:	5f 90       	pop	r5
     ba6:	4f 90       	pop	r4
     ba8:	08 95       	ret

00000baa <OSStartHighRdy>:
     baa:	00 91 78 04 	lds	r16, 0x0478	; 0x800478 <OSRunning>
     bae:	03 95       	inc	r16
     bb0:	00 93 78 04 	sts	0x0478, r16	; 0x800478 <OSRunning>
     bb4:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <OSTCBHighRdy>
     bb8:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <OSTCBHighRdy+0x1>
     bbc:	c1 91       	ld	r28, Z+
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	d1 91       	ld	r29, Z+
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f 91       	pop	r16
     bc6:	0f bf       	out	0x3f, r16	; 63
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	3f 90       	pop	r3
     c02:	2f 90       	pop	r2
     c04:	1f 90       	pop	r1
     c06:	0f 90       	pop	r0
     c08:	08 95       	ret

00000c0a <OSCtxSw>:
     c0a:	0f 92       	push	r0
     c0c:	1f 92       	push	r1
     c0e:	2f 92       	push	r2
     c10:	3f 92       	push	r3
     c12:	4f 92       	push	r4
     c14:	5f 92       	push	r5
     c16:	6f 92       	push	r6
     c18:	7f 92       	push	r7
     c1a:	8f 92       	push	r8
     c1c:	9f 92       	push	r9
     c1e:	af 92       	push	r10
     c20:	bf 92       	push	r11
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	2f 93       	push	r18
     c30:	3f 93       	push	r19
     c32:	4f 93       	push	r20
     c34:	5f 93       	push	r21
     c36:	6f 93       	push	r22
     c38:	7f 93       	push	r23
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	af 93       	push	r26
     c40:	bf 93       	push	r27
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ef 93       	push	r30
     c48:	ff 93       	push	r31
     c4a:	0f b7       	in	r16, 0x3f	; 63
     c4c:	0f 93       	push	r16
     c4e:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <OSTCBCur>
     c52:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <OSTCBCur+0x1>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	c1 93       	st	Z+, r28
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	d1 93       	st	Z+, r29
     c5e:	00 91 7d 04 	lds	r16, 0x047D	; 0x80047d <OSPrioHighRdy>
     c62:	00 93 7e 04 	sts	0x047E, r16	; 0x80047e <OSPrioCur>
     c66:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <OSTCBHighRdy>
     c6a:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <OSTCBHighRdy+0x1>
     c6e:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <OSTCBCur>
     c72:	f0 93 91 04 	sts	0x0491, r31	; 0x800491 <OSTCBCur+0x1>
     c76:	c1 91       	ld	r28, Z+
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	d1 91       	ld	r29, Z+
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f 91       	pop	r16
     c80:	0f bf       	out	0x3f, r16	; 63
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	9f 90       	pop	r9
     cb0:	8f 90       	pop	r8
     cb2:	7f 90       	pop	r7
     cb4:	6f 90       	pop	r6
     cb6:	5f 90       	pop	r5
     cb8:	4f 90       	pop	r4
     cba:	3f 90       	pop	r3
     cbc:	2f 90       	pop	r2
     cbe:	1f 90       	pop	r1
     cc0:	0f 90       	pop	r0
     cc2:	08 95       	ret

00000cc4 <OSIntCtxSw>:
     cc4:	00 91 7d 04 	lds	r16, 0x047D	; 0x80047d <OSPrioHighRdy>
     cc8:	00 93 7e 04 	sts	0x047E, r16	; 0x80047e <OSPrioCur>
     ccc:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <OSTCBHighRdy>
     cd0:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <OSTCBHighRdy+0x1>
     cd4:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <OSTCBCur>
     cd8:	f0 93 91 04 	sts	0x0491, r31	; 0x800491 <OSTCBCur+0x1>
     cdc:	c1 91       	ld	r28, Z+
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	d1 91       	ld	r29, Z+
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f 91       	pop	r16
     ce6:	0f bf       	out	0x3f, r16	; 63
     ce8:	ff 91       	pop	r31
     cea:	ef 91       	pop	r30
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	bf 91       	pop	r27
     cf2:	af 91       	pop	r26
     cf4:	9f 91       	pop	r25
     cf6:	8f 91       	pop	r24
     cf8:	7f 91       	pop	r23
     cfa:	6f 91       	pop	r22
     cfc:	5f 91       	pop	r21
     cfe:	4f 91       	pop	r20
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	7f 90       	pop	r7
     d1a:	6f 90       	pop	r6
     d1c:	5f 90       	pop	r5
     d1e:	4f 90       	pop	r4
     d20:	3f 90       	pop	r3
     d22:	2f 90       	pop	r2
     d24:	1f 90       	pop	r1
     d26:	0f 90       	pop	r0
     d28:	08 95       	ret

00000d2a <OSTickISR>:
     d2a:	0f 92       	push	r0
     d2c:	1f 92       	push	r1
     d2e:	2f 92       	push	r2
     d30:	3f 92       	push	r3
     d32:	4f 92       	push	r4
     d34:	5f 92       	push	r5
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
     d6a:	0f b7       	in	r16, 0x3f	; 63
     d6c:	00 68       	ori	r16, 0x80	; 128
     d6e:	0f 93       	push	r16
     d70:	00 91 8f 04 	lds	r16, 0x048F	; 0x80048f <OSIntNesting>
     d74:	03 95       	inc	r16
     d76:	00 93 8f 04 	sts	0x048F, r16	; 0x80048f <OSIntNesting>
     d7a:	01 30       	cpi	r16, 0x01	; 1
     d7c:	41 f4       	brne	.+16     	; 0xd8e <_not_first_int>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <OSTCBCur>
     d86:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <OSTCBCur+0x1>
     d8a:	c1 93       	st	Z+, r28
     d8c:	d1 93       	st	Z+, r29

00000d8e <_not_first_int>:
     d8e:	04 e6       	ldi	r16, 0x64	; 100
     d90:	06 bd       	out	0x26, r16	; 38
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	1f 2e       	mov	r1, r31
     d96:	78 94       	sei
     d98:	0e 94 f8 07 	call	0xff0	; 0xff0 <OSTimeTick>
     d9c:	00 00       	nop
     d9e:	0e 94 6b 07 	call	0xed6	; 0xed6 <OSIntExit>
     da2:	0f 91       	pop	r16
     da4:	0f bf       	out	0x3f, r16	; 63
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	7f 91       	pop	r23
     db8:	6f 91       	pop	r22
     dba:	5f 91       	pop	r21
     dbc:	4f 91       	pop	r20
     dbe:	3f 91       	pop	r19
     dc0:	2f 91       	pop	r18
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	af 90       	pop	r10
     dd2:	9f 90       	pop	r9
     dd4:	8f 90       	pop	r8
     dd6:	7f 90       	pop	r7
     dd8:	6f 90       	pop	r6
     dda:	5f 90       	pop	r5
     ddc:	4f 90       	pop	r4
     dde:	3f 90       	pop	r3
     de0:	2f 90       	pop	r2
     de2:	1f 90       	pop	r1
     de4:	0f 90       	pop	r0
     de6:	08 95       	ret

00000de8 <OSTaskStkInit>:
     de8:	fa 01       	movw	r30, r20
     dea:	80 83       	st	Z, r24
     dec:	31 97       	sbiw	r30, 0x01	; 1
     dee:	90 83       	st	Z, r25
     df0:	31 97       	sbiw	r30, 0x01	; 1
     df2:	10 82       	st	Z, r1
     df4:	31 97       	sbiw	r30, 0x01	; 1
     df6:	10 82       	st	Z, r1
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	10 82       	st	Z, r1
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	10 82       	st	Z, r1
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	10 82       	st	Z, r1
     e04:	31 97       	sbiw	r30, 0x01	; 1
     e06:	10 82       	st	Z, r1
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	10 82       	st	Z, r1
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	10 82       	st	Z, r1
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	10 82       	st	Z, r1
     e14:	31 97       	sbiw	r30, 0x01	; 1
     e16:	10 82       	st	Z, r1
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	10 82       	st	Z, r1
     e1c:	31 97       	sbiw	r30, 0x01	; 1
     e1e:	10 82       	st	Z, r1
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	10 82       	st	Z, r1
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	10 82       	st	Z, r1
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	10 82       	st	Z, r1
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	10 82       	st	Z, r1
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	10 82       	st	Z, r1
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	10 82       	st	Z, r1
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	10 82       	st	Z, r1
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	10 82       	st	Z, r1
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	10 82       	st	Z, r1
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	10 82       	st	Z, r1
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	10 82       	st	Z, r1
     e4c:	31 97       	sbiw	r30, 0x01	; 1
     e4e:	10 82       	st	Z, r1
     e50:	31 97       	sbiw	r30, 0x01	; 1
     e52:	60 83       	st	Z, r22
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	70 83       	st	Z, r23
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	10 82       	st	Z, r1
     e5c:	31 97       	sbiw	r30, 0x01	; 1
     e5e:	10 82       	st	Z, r1
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	10 82       	st	Z, r1
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	10 82       	st	Z, r1
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	10 82       	st	Z, r1
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	10 82       	st	Z, r1
     e70:	31 97       	sbiw	r30, 0x01	; 1
     e72:	80 e8       	ldi	r24, 0x80	; 128
     e74:	80 83       	st	Z, r24
     e76:	ca 01       	movw	r24, r20
     e78:	83 97       	sbiw	r24, 0x23	; 35
     e7a:	08 95       	ret

00000e7c <OSTaskCreateHook>:
     e7c:	08 95       	ret

00000e7e <OSTaskDelHook>:
     e7e:	08 95       	ret

00000e80 <OSTaskSwHook>:
     e80:	08 95       	ret

00000e82 <OSTaskStatHook>:
     e82:	08 95       	ret

00000e84 <OSTimeTickHook>:
     e84:	08 95       	ret

00000e86 <OSInitHookBegin>:
     e86:	08 95       	ret

00000e88 <OSInitHookEnd>:
     e88:	08 95       	ret

00000e8a <OSTaskIdleHook>:
     e8a:	08 95       	ret

00000e8c <OSTCBInitHook>:
     e8c:	08 95       	ret

00000e8e <OS_TaskIdle>:
     e8e:	f8 94       	cli
     e90:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <OSIdleCtr>
     e94:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <OSIdleCtr+0x1>
     e98:	a0 91 7b 04 	lds	r26, 0x047B	; 0x80047b <OSIdleCtr+0x2>
     e9c:	b0 91 7c 04 	lds	r27, 0x047C	; 0x80047c <OSIdleCtr+0x3>
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	a1 1d       	adc	r26, r1
     ea4:	b1 1d       	adc	r27, r1
     ea6:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <OSIdleCtr>
     eaa:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <OSIdleCtr+0x1>
     eae:	a0 93 7b 04 	sts	0x047B, r26	; 0x80047b <OSIdleCtr+0x2>
     eb2:	b0 93 7c 04 	sts	0x047C, r27	; 0x80047c <OSIdleCtr+0x3>
     eb6:	78 94       	sei
     eb8:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSTaskIdleHook>
     ebc:	e8 cf       	rjmp	.-48     	; 0xe8e <OS_TaskIdle>

00000ebe <OSIntEnter>:
     ebe:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <OSRunning>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	39 f4       	brne	.+14     	; 0xed4 <OSIntEnter+0x16>
     ec6:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <OSIntNesting>
     eca:	8f 3f       	cpi	r24, 0xFF	; 255
     ecc:	19 f0       	breq	.+6      	; 0xed4 <OSIntEnter+0x16>
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <OSIntNesting>
     ed4:	08 95       	ret

00000ed6 <OSIntExit>:
     ed6:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <OSRunning>
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	09 f0       	breq	.+2      	; 0xee0 <OSIntExit+0xa>
     ede:	4c c0       	rjmp	.+152    	; 0xf78 <OSIntExit+0xa2>
     ee0:	f8 94       	cli
     ee2:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <OSIntNesting>
     ee6:	88 23       	and	r24, r24
     ee8:	19 f0       	breq	.+6      	; 0xef0 <OSIntExit+0x1a>
     eea:	81 50       	subi	r24, 0x01	; 1
     eec:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <OSIntNesting>
     ef0:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <OSIntNesting>
     ef4:	81 11       	cpse	r24, r1
     ef6:	3f c0       	rjmp	.+126    	; 0xf76 <OSIntExit+0xa0>
     ef8:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <OSLockNesting>
     efc:	81 11       	cpse	r24, r1
     efe:	3b c0       	rjmp	.+118    	; 0xf76 <OSIntExit+0xa0>
     f00:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <OSRdyGrp>
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	e0 50       	subi	r30, 0x00	; 0
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	e0 81       	ld	r30, Z
     f0c:	e0 93 8e 04 	sts	0x048E, r30	; 0x80048e <OSIntExitY>
     f10:	ae 2f       	mov	r26, r30
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	a5 57       	subi	r26, 0x75	; 117
     f16:	bb 4f       	sbci	r27, 0xFB	; 251
     f18:	ac 91       	ld	r26, X
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	a0 50       	subi	r26, 0x00	; 0
     f1e:	bf 4f       	sbci	r27, 0xFF	; 255
     f20:	ee 0f       	add	r30, r30
     f22:	ee 0f       	add	r30, r30
     f24:	ee 0f       	add	r30, r30
     f26:	8c 91       	ld	r24, X
     f28:	e8 0f       	add	r30, r24
     f2a:	e0 93 7d 04 	sts	0x047D, r30	; 0x80047d <OSPrioHighRdy>
     f2e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <OSPrioCur>
     f32:	e8 17       	cp	r30, r24
     f34:	01 f1       	breq	.+64     	; 0xf76 <OSIntExit+0xa0>
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	ef 52       	subi	r30, 0x2F	; 47
     f3e:	fa 4f       	sbci	r31, 0xFA	; 250
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <OSTCBHighRdy+0x1>
     f48:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <OSTCBHighRdy>
     f4c:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <OSCtxSwCtr>
     f50:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <OSCtxSwCtr+0x1>
     f54:	a0 91 83 04 	lds	r26, 0x0483	; 0x800483 <OSCtxSwCtr+0x2>
     f58:	b0 91 84 04 	lds	r27, 0x0484	; 0x800484 <OSCtxSwCtr+0x3>
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	a1 1d       	adc	r26, r1
     f60:	b1 1d       	adc	r27, r1
     f62:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <OSCtxSwCtr>
     f66:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <OSCtxSwCtr+0x1>
     f6a:	a0 93 83 04 	sts	0x0483, r26	; 0x800483 <OSCtxSwCtr+0x2>
     f6e:	b0 93 84 04 	sts	0x0484, r27	; 0x800484 <OSCtxSwCtr+0x3>
     f72:	0e 94 62 06 	call	0xcc4	; 0xcc4 <OSIntCtxSw>
     f76:	78 94       	sei
     f78:	08 95       	ret

00000f7a <OSSchedLock>:
     f7a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <OSRunning>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	49 f4       	brne	.+18     	; 0xf94 <OSSchedLock+0x1a>
     f82:	f8 94       	cli
     f84:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <OSLockNesting>
     f88:	8f 3f       	cpi	r24, 0xFF	; 255
     f8a:	19 f0       	breq	.+6      	; 0xf92 <OSSchedLock+0x18>
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <OSLockNesting>
     f92:	78 94       	sei
     f94:	08 95       	ret

00000f96 <OSStart>:
     f96:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <OSRunning>
     f9a:	81 11       	cpse	r24, r1
     f9c:	28 c0       	rjmp	.+80     	; 0xfee <OSStart+0x58>
     f9e:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <OSRdyGrp>
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	e0 50       	subi	r30, 0x00	; 0
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	e0 81       	ld	r30, Z
     faa:	ae 2f       	mov	r26, r30
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	a5 57       	subi	r26, 0x75	; 117
     fb0:	bb 4f       	sbci	r27, 0xFB	; 251
     fb2:	ac 91       	ld	r26, X
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	a0 50       	subi	r26, 0x00	; 0
     fb8:	bf 4f       	sbci	r27, 0xFF	; 255
     fba:	ee 0f       	add	r30, r30
     fbc:	ee 0f       	add	r30, r30
     fbe:	ee 0f       	add	r30, r30
     fc0:	8c 91       	ld	r24, X
     fc2:	e8 0f       	add	r30, r24
     fc4:	e0 93 7d 04 	sts	0x047D, r30	; 0x80047d <OSPrioHighRdy>
     fc8:	e0 93 7e 04 	sts	0x047E, r30	; 0x80047e <OSPrioCur>
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ef 52       	subi	r30, 0x2F	; 47
     fd4:	fa 4f       	sbci	r31, 0xFA	; 250
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <OSTCBHighRdy+0x1>
     fde:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <OSTCBHighRdy>
     fe2:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <OSTCBCur+0x1>
     fe6:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <OSTCBCur>
     fea:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <OSStartHighRdy>
     fee:	08 95       	ret

00000ff0 <OSTimeTick>:
     ff0:	0e 94 42 07 	call	0xe84	; 0xe84 <OSTimeTickHook>
     ff4:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <OSRunning>
     ff8:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <OSTCBList>
     ffc:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <OSTCBList+0x1>
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	01 f1       	breq	.+64     	; 0x1048 <OSTimeTick+0x58>
    1008:	08 95       	ret
    100a:	f8 94       	cli
    100c:	86 81       	ldd	r24, Z+6	; 0x06
    100e:	97 81       	ldd	r25, Z+7	; 0x07
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	b1 f0       	breq	.+44     	; 0x1040 <OSTimeTick+0x50>
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	97 83       	std	Z+7, r25	; 0x07
    1018:	86 83       	std	Z+6, r24	; 0x06
    101a:	89 2b       	or	r24, r25
    101c:	89 f4       	brne	.+34     	; 0x1040 <OSTimeTick+0x50>
    101e:	80 85       	ldd	r24, Z+8	; 0x08
    1020:	83 fd       	sbrc	r24, 3
    1022:	16 c0       	rjmp	.+44     	; 0x1050 <OSTimeTick+0x60>
    1024:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <OSRdyGrp>
    1028:	95 85       	ldd	r25, Z+13	; 0x0d
    102a:	89 2b       	or	r24, r25
    102c:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <OSRdyGrp>
    1030:	a3 85       	ldd	r26, Z+11	; 0x0b
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	a5 57       	subi	r26, 0x75	; 117
    1036:	bb 4f       	sbci	r27, 0xFB	; 251
    1038:	8c 91       	ld	r24, X
    103a:	94 85       	ldd	r25, Z+12	; 0x0c
    103c:	89 2b       	or	r24, r25
    103e:	8c 93       	st	X, r24
    1040:	02 80       	ldd	r0, Z+2	; 0x02
    1042:	f3 81       	ldd	r31, Z+3	; 0x03
    1044:	e0 2d       	mov	r30, r0
    1046:	78 94       	sei
    1048:	81 85       	ldd	r24, Z+9	; 0x09
    104a:	80 31       	cpi	r24, 0x10	; 16
    104c:	f1 f6       	brne	.-68     	; 0x100a <OSTimeTick+0x1a>
    104e:	dc cf       	rjmp	.-72     	; 0x1008 <OSTimeTick+0x18>
    1050:	37 83       	std	Z+7, r19	; 0x07
    1052:	26 83       	std	Z+6, r18	; 0x06
    1054:	f5 cf       	rjmp	.-22     	; 0x1040 <OSTimeTick+0x50>

00001056 <OSVersion>:
    1056:	8c ef       	ldi	r24, 0xFC	; 252
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	08 95       	ret

0000105c <OS_Dummy>:
    105c:	08 95       	ret

0000105e <OS_Sched>:
    105e:	f8 94       	cli
    1060:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <OSIntNesting>
    1064:	81 11       	cpse	r24, r1
    1066:	3d c0       	rjmp	.+122    	; 0x10e2 <OS_Sched+0x84>
    1068:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <OSLockNesting>
    106c:	81 11       	cpse	r24, r1
    106e:	39 c0       	rjmp	.+114    	; 0x10e2 <OS_Sched+0x84>
    1070:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <OSRdyGrp>
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	e0 50       	subi	r30, 0x00	; 0
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	e0 81       	ld	r30, Z
    107c:	ae 2f       	mov	r26, r30
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	a5 57       	subi	r26, 0x75	; 117
    1082:	bb 4f       	sbci	r27, 0xFB	; 251
    1084:	ac 91       	ld	r26, X
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	a0 50       	subi	r26, 0x00	; 0
    108a:	bf 4f       	sbci	r27, 0xFF	; 255
    108c:	ee 0f       	add	r30, r30
    108e:	ee 0f       	add	r30, r30
    1090:	ee 0f       	add	r30, r30
    1092:	8c 91       	ld	r24, X
    1094:	e8 0f       	add	r30, r24
    1096:	e0 93 7d 04 	sts	0x047D, r30	; 0x80047d <OSPrioHighRdy>
    109a:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <OSPrioCur>
    109e:	e8 17       	cp	r30, r24
    10a0:	01 f1       	breq	.+64     	; 0x10e2 <OS_Sched+0x84>
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	ef 52       	subi	r30, 0x2F	; 47
    10aa:	fa 4f       	sbci	r31, 0xFA	; 250
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <OSTCBHighRdy+0x1>
    10b4:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <OSTCBHighRdy>
    10b8:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <OSCtxSwCtr>
    10bc:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <OSCtxSwCtr+0x1>
    10c0:	a0 91 83 04 	lds	r26, 0x0483	; 0x800483 <OSCtxSwCtr+0x2>
    10c4:	b0 91 84 04 	lds	r27, 0x0484	; 0x800484 <OSCtxSwCtr+0x3>
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	a1 1d       	adc	r26, r1
    10cc:	b1 1d       	adc	r27, r1
    10ce:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <OSCtxSwCtr>
    10d2:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <OSCtxSwCtr+0x1>
    10d6:	a0 93 83 04 	sts	0x0483, r26	; 0x800483 <OSCtxSwCtr+0x2>
    10da:	b0 93 84 04 	sts	0x0484, r27	; 0x800484 <OSCtxSwCtr+0x3>
    10de:	0e 94 05 06 	call	0xc0a	; 0xc0a <OSCtxSw>
    10e2:	78 94       	sei
    10e4:	08 95       	ret

000010e6 <OSSchedUnlock>:
    10e6:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <OSRunning>
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 f4       	brne	.+36     	; 0x1112 <OSSchedUnlock+0x2c>
    10ee:	f8 94       	cli
    10f0:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <OSLockNesting>
    10f4:	88 23       	and	r24, r24
    10f6:	61 f0       	breq	.+24     	; 0x1110 <OSSchedUnlock+0x2a>
    10f8:	81 50       	subi	r24, 0x01	; 1
    10fa:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <OSLockNesting>
    10fe:	81 11       	cpse	r24, r1
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <OSSchedUnlock+0x2a>
    1102:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <OSIntNesting>
    1106:	81 11       	cpse	r24, r1
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <OSSchedUnlock+0x2a>
    110a:	78 94       	sei
    110c:	0c 94 2f 08 	jmp	0x105e	; 0x105e <OS_Sched>
    1110:	78 94       	sei
    1112:	08 95       	ret

00001114 <OSTimeDly.part.0>:
    1114:	ac 01       	movw	r20, r24
    1116:	f8 94       	cli
    1118:	a0 91 90 04 	lds	r26, 0x0490	; 0x800490 <OSTCBCur>
    111c:	b0 91 91 04 	lds	r27, 0x0491	; 0x800491 <OSTCBCur+0x1>
    1120:	1b 96       	adiw	r26, 0x0b	; 11
    1122:	ec 91       	ld	r30, X
    1124:	1b 97       	sbiw	r26, 0x0b	; 11
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	1c 96       	adiw	r26, 0x0c	; 12
    112a:	9c 91       	ld	r25, X
    112c:	1c 97       	sbiw	r26, 0x0c	; 12
    112e:	90 95       	com	r25
    1130:	e5 57       	subi	r30, 0x75	; 117
    1132:	fb 4f       	sbci	r31, 0xFB	; 251
    1134:	80 81       	ld	r24, Z
    1136:	98 23       	and	r25, r24
    1138:	90 83       	st	Z, r25
    113a:	91 11       	cpse	r25, r1
    113c:	0a c0       	rjmp	.+20     	; 0x1152 <OSTimeDly.part.0+0x3e>
    113e:	1d 96       	adiw	r26, 0x0d	; 13
    1140:	9c 91       	ld	r25, X
    1142:	1d 97       	sbiw	r26, 0x0d	; 13
    1144:	29 2f       	mov	r18, r25
    1146:	20 95       	com	r18
    1148:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <OSRdyGrp>
    114c:	92 23       	and	r25, r18
    114e:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <OSRdyGrp>
    1152:	17 96       	adiw	r26, 0x07	; 7
    1154:	5c 93       	st	X, r21
    1156:	4e 93       	st	-X, r20
    1158:	16 97       	sbiw	r26, 0x06	; 6
    115a:	78 94       	sei
    115c:	0c 94 2f 08 	jmp	0x105e	; 0x105e <OS_Sched>

00001160 <OS_TCBInit>:
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	f8 94       	cli
    1168:	c0 91 85 04 	lds	r28, 0x0485	; 0x800485 <OSTCBFreeList>
    116c:	d0 91 86 04 	lds	r29, 0x0486	; 0x800486 <OSTCBFreeList+0x1>
    1170:	20 97       	sbiw	r28, 0x00	; 0
    1172:	09 f4       	brne	.+2      	; 0x1176 <OS_TCBInit+0x16>
    1174:	54 c0       	rjmp	.+168    	; 0x121e <OS_TCBInit+0xbe>
    1176:	18 2f       	mov	r17, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <OSTCBFreeList+0x1>
    1180:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <OSTCBFreeList>
    1184:	78 94       	sei
    1186:	79 83       	std	Y+1, r23	; 0x01
    1188:	68 83       	st	Y, r22
    118a:	19 87       	std	Y+9, r17	; 0x09
    118c:	18 86       	std	Y+8, r1	; 0x08
    118e:	1f 82       	std	Y+7, r1	; 0x07
    1190:	1e 82       	std	Y+6, r1	; 0x06
    1192:	1e 86       	std	Y+14, r1	; 0x0e
    1194:	e1 2f       	mov	r30, r17
    1196:	e6 95       	lsr	r30
    1198:	e6 95       	lsr	r30
    119a:	e6 95       	lsr	r30
    119c:	eb 87       	std	Y+11, r30	; 0x0b
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	e0 50       	subi	r30, 0x00	; 0
    11a2:	fe 4f       	sbci	r31, 0xFE	; 254
    11a4:	80 81       	ld	r24, Z
    11a6:	8d 87       	std	Y+13, r24	; 0x0d
    11a8:	e1 2f       	mov	r30, r17
    11aa:	e7 70       	andi	r30, 0x07	; 7
    11ac:	ea 87       	std	Y+10, r30	; 0x0a
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	e0 50       	subi	r30, 0x00	; 0
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	80 81       	ld	r24, Z
    11b6:	8c 87       	std	Y+12, r24	; 0x0c
    11b8:	ce 01       	movw	r24, r28
    11ba:	0e 94 46 07 	call	0xe8c	; 0xe8c <OSTCBInitHook>
    11be:	ce 01       	movw	r24, r28
    11c0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <OSTaskCreateHook>
    11c4:	f8 94       	cli
    11c6:	e1 2f       	mov	r30, r17
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	ef 52       	subi	r30, 0x2F	; 47
    11d0:	fa 4f       	sbci	r31, 0xFA	; 250
    11d2:	d1 83       	std	Z+1, r29	; 0x01
    11d4:	c0 83       	st	Z, r28
    11d6:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <OSTCBList>
    11da:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <OSTCBList+0x1>
    11de:	fb 83       	std	Y+3, r31	; 0x03
    11e0:	ea 83       	std	Y+2, r30	; 0x02
    11e2:	1d 82       	std	Y+5, r1	; 0x05
    11e4:	1c 82       	std	Y+4, r1	; 0x04
    11e6:	30 97       	sbiw	r30, 0x00	; 0
    11e8:	11 f0       	breq	.+4      	; 0x11ee <OS_TCBInit+0x8e>
    11ea:	d5 83       	std	Z+5, r29	; 0x05
    11ec:	c4 83       	std	Z+4, r28	; 0x04
    11ee:	d0 93 80 04 	sts	0x0480, r29	; 0x800480 <OSTCBList+0x1>
    11f2:	c0 93 7f 04 	sts	0x047F, r28	; 0x80047f <OSTCBList>
    11f6:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <OSRdyGrp>
    11fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    11fc:	89 2b       	or	r24, r25
    11fe:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <OSRdyGrp>
    1202:	eb 85       	ldd	r30, Y+11	; 0x0b
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	e5 57       	subi	r30, 0x75	; 117
    1208:	fb 4f       	sbci	r31, 0xFB	; 251
    120a:	80 81       	ld	r24, Z
    120c:	9c 85       	ldd	r25, Y+12	; 0x0c
    120e:	89 2b       	or	r24, r25
    1210:	80 83       	st	Z, r24
    1212:	78 94       	sei
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	08 95       	ret
    121e:	78 94       	sei
    1220:	86 e4       	ldi	r24, 0x46	; 70
    1222:	f9 cf       	rjmp	.-14     	; 0x1216 <OS_TCBInit+0xb6>

00001224 <OSTaskCreate>:
    1224:	9f 92       	push	r9
    1226:	af 92       	push	r10
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	f8 94       	cli
    123c:	c2 2f       	mov	r28, r18
    123e:	d0 e0       	ldi	r29, 0x00	; 0
    1240:	cc 0f       	add	r28, r28
    1242:	dd 1f       	adc	r29, r29
    1244:	cf 52       	subi	r28, 0x2F	; 47
    1246:	da 4f       	sbci	r29, 0xFA	; 250
    1248:	e8 81       	ld	r30, Y
    124a:	f9 81       	ldd	r31, Y+1	; 0x01
    124c:	ef 2b       	or	r30, r31
    124e:	09 f0       	breq	.+2      	; 0x1252 <OSTaskCreate+0x2e>
    1250:	3b c0       	rjmp	.+118    	; 0x12c8 <OSTaskCreate+0xa4>
    1252:	92 2e       	mov	r9, r18
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	39 83       	std	Y+1, r19	; 0x01
    125a:	28 83       	st	Y, r18
    125c:	78 94       	sei
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	0e 94 f4 06 	call	0xde8	; 0xde8 <OSTaskStkInit>
    1266:	b1 2c       	mov	r11, r1
    1268:	a1 2c       	mov	r10, r1
    126a:	d1 2c       	mov	r13, r1
    126c:	c1 2c       	mov	r12, r1
    126e:	e1 2c       	mov	r14, r1
    1270:	f1 2c       	mov	r15, r1
    1272:	87 01       	movw	r16, r14
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	bc 01       	movw	r22, r24
    127e:	89 2d       	mov	r24, r9
    1280:	0e 94 b0 08 	call	0x1160	; 0x1160 <OS_TCBInit>
    1284:	18 2f       	mov	r17, r24
    1286:	81 11       	cpse	r24, r1
    1288:	1a c0       	rjmp	.+52     	; 0x12be <OSTaskCreate+0x9a>
    128a:	f8 94       	cli
    128c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <OSTaskCtr>
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <OSTaskCtr>
    1296:	78 94       	sei
    1298:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <OSRunning>
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	11 f4       	brne	.+4      	; 0x12a4 <OSTaskCreate+0x80>
    12a0:	0e 94 2f 08 	call	0x105e	; 0x105e <OS_Sched>
    12a4:	81 2f       	mov	r24, r17
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	9f 90       	pop	r9
    12bc:	08 95       	ret
    12be:	f8 94       	cli
    12c0:	19 82       	std	Y+1, r1	; 0x01
    12c2:	18 82       	st	Y, r1
    12c4:	78 94       	sei
    12c6:	ee cf       	rjmp	.-36     	; 0x12a4 <OSTaskCreate+0x80>
    12c8:	78 94       	sei
    12ca:	18 e2       	ldi	r17, 0x28	; 40
    12cc:	eb cf       	rjmp	.-42     	; 0x12a4 <OSTaskCreate+0x80>

000012ce <OSInit>:
    12ce:	0e 94 43 07 	call	0xe86	; 0xe86 <OSInitHookBegin>
    12d2:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <OSIntNesting>
    12d6:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <OSLockNesting>
    12da:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <OSTaskCtr>
    12de:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <OSRunning>
    12e2:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <OSCtxSwCtr>
    12e6:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <OSCtxSwCtr+0x1>
    12ea:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <OSCtxSwCtr+0x2>
    12ee:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <OSCtxSwCtr+0x3>
    12f2:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <OSIdleCtr>
    12f6:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <OSIdleCtr+0x1>
    12fa:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <OSIdleCtr+0x2>
    12fe:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <OSIdleCtr+0x3>
    1302:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <OSRdyGrp>
    1306:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <OSRdyTbl>
    130a:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <OSRdyTbl+0x1>
    130e:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <OSRdyTbl+0x2>
    1312:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <OSPrioCur>
    1316:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <OSPrioHighRdy>
    131a:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <OSTCBHighRdy+0x1>
    131e:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <OSTCBHighRdy>
    1322:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <OSTCBCur+0x1>
    1326:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <OSTCBCur>
    132a:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <OSTCBList+0x1>
    132e:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <OSTCBList>
    1332:	e1 ed       	ldi	r30, 0xD1	; 209
    1334:	f5 e0       	ldi	r31, 0x05	; 5
    1336:	11 92       	st	Z+, r1
    1338:	11 92       	st	Z+, r1
    133a:	85 e0       	ldi	r24, 0x05	; 5
    133c:	e3 3f       	cpi	r30, 0xF3	; 243
    133e:	f8 07       	cpc	r31, r24
    1340:	d1 f7       	brne	.-12     	; 0x1336 <OSInit+0x68>
    1342:	e2 ed       	ldi	r30, 0xD2	; 210
    1344:	f4 e0       	ldi	r31, 0x04	; 4
    1346:	cf 01       	movw	r24, r30
    1348:	0f 96       	adiw	r24, 0x0f	; 15
    134a:	93 83       	std	Z+3, r25	; 0x03
    134c:	82 83       	std	Z+2, r24	; 0x02
    134e:	fc 01       	movw	r30, r24
    1350:	85 e0       	ldi	r24, 0x05	; 5
    1352:	e2 3c       	cpi	r30, 0xC2	; 194
    1354:	f8 07       	cpc	r31, r24
    1356:	b9 f7       	brne	.-18     	; 0x1346 <OSInit+0x78>
    1358:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <OSTCBTbl+0xf3>
    135c:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <OSTCBTbl+0xf2>
    1360:	82 ed       	ldi	r24, 0xD2	; 210
    1362:	94 e0       	ldi	r25, 0x04	; 4
    1364:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <OSTCBFreeList+0x1>
    1368:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <OSTCBFreeList>
    136c:	20 e1       	ldi	r18, 0x10	; 16
    136e:	41 ed       	ldi	r20, 0xD1	; 209
    1370:	54 e0       	ldi	r21, 0x04	; 4
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	87 e4       	ldi	r24, 0x47	; 71
    1378:	97 e0       	ldi	r25, 0x07	; 7
    137a:	0e 94 12 09 	call	0x1224	; 0x1224 <OSTaskCreate>
    137e:	0c 94 44 07 	jmp	0xe88	; 0xe88 <OSInitHookEnd>

00001382 <OSTaskDel>:
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	f0 90 8f 04 	lds	r15, 0x048F	; 0x80048f <OSIntNesting>
    1390:	f1 10       	cpse	r15, r1
    1392:	76 c0       	rjmp	.+236    	; 0x1480 <OSTaskDel+0xfe>
    1394:	f8 94       	cli
    1396:	8f 3f       	cpi	r24, 0xFF	; 255
    1398:	29 f4       	brne	.+10     	; 0x13a4 <OSTaskDel+0x22>
    139a:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <OSTCBCur>
    139e:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <OSTCBCur+0x1>
    13a2:	81 85       	ldd	r24, Z+9	; 0x09
    13a4:	08 2f       	mov	r16, r24
    13a6:	10 e0       	ldi	r17, 0x00	; 0
    13a8:	00 0f       	add	r16, r16
    13aa:	11 1f       	adc	r17, r17
    13ac:	f8 01       	movw	r30, r16
    13ae:	ef 52       	subi	r30, 0x2F	; 47
    13b0:	fa 4f       	sbci	r31, 0xFA	; 250
    13b2:	c0 81       	ld	r28, Z
    13b4:	d1 81       	ldd	r29, Z+1	; 0x01
    13b6:	20 97       	sbiw	r28, 0x00	; 0
    13b8:	09 f4       	brne	.+2      	; 0x13bc <OSTaskDel+0x3a>
    13ba:	5e c0       	rjmp	.+188    	; 0x1478 <OSTaskDel+0xf6>
    13bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13c2:	80 95       	com	r24
    13c4:	e5 57       	subi	r30, 0x75	; 117
    13c6:	fb 4f       	sbci	r31, 0xFB	; 251
    13c8:	90 81       	ld	r25, Z
    13ca:	89 23       	and	r24, r25
    13cc:	80 83       	st	Z, r24
    13ce:	81 11       	cpse	r24, r1
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <OSTaskDel+0x60>
    13d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d4:	98 2f       	mov	r25, r24
    13d6:	90 95       	com	r25
    13d8:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <OSRdyGrp>
    13dc:	89 23       	and	r24, r25
    13de:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <OSRdyGrp>
    13e2:	1f 82       	std	Y+7, r1	; 0x07
    13e4:	1e 82       	std	Y+6, r1	; 0x06
    13e6:	18 86       	std	Y+8, r1	; 0x08
    13e8:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <OSLockNesting>
    13ec:	8f 3f       	cpi	r24, 0xFF	; 255
    13ee:	19 f0       	breq	.+6      	; 0x13f6 <OSTaskDel+0x74>
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <OSLockNesting>
    13f6:	78 94       	sei
    13f8:	f8 94       	cli
    13fa:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <OSLockNesting>
    13fe:	88 23       	and	r24, r24
    1400:	19 f0       	breq	.+6      	; 0x1408 <OSTaskDel+0x86>
    1402:	81 50       	subi	r24, 0x01	; 1
    1404:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <OSLockNesting>
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <OSTaskDelHook>
    140e:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <OSTaskCtr>
    1412:	81 50       	subi	r24, 0x01	; 1
    1414:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <OSTaskCtr>
    1418:	f8 01       	movw	r30, r16
    141a:	ef 52       	subi	r30, 0x2F	; 47
    141c:	fa 4f       	sbci	r31, 0xFA	; 250
    141e:	11 82       	std	Z+1, r1	; 0x01
    1420:	10 82       	st	Z, r1
    1422:	ec 81       	ldd	r30, Y+4	; 0x04
    1424:	fd 81       	ldd	r31, Y+5	; 0x05
    1426:	aa 81       	ldd	r26, Y+2	; 0x02
    1428:	bb 81       	ldd	r27, Y+3	; 0x03
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	e1 f4       	brne	.+56     	; 0x1466 <OSTaskDel+0xe4>
    142e:	15 96       	adiw	r26, 0x05	; 5
    1430:	1c 92       	st	X, r1
    1432:	1e 92       	st	-X, r1
    1434:	14 97       	sbiw	r26, 0x04	; 4
    1436:	b0 93 80 04 	sts	0x0480, r27	; 0x800480 <OSTCBList+0x1>
    143a:	a0 93 7f 04 	sts	0x047F, r26	; 0x80047f <OSTCBList>
    143e:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <OSTCBFreeList>
    1442:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <OSTCBFreeList+0x1>
    1446:	9b 83       	std	Y+3, r25	; 0x03
    1448:	8a 83       	std	Y+2, r24	; 0x02
    144a:	d0 93 86 04 	sts	0x0486, r29	; 0x800486 <OSTCBFreeList+0x1>
    144e:	c0 93 85 04 	sts	0x0485, r28	; 0x800485 <OSTCBFreeList>
    1452:	78 94       	sei
    1454:	0e 94 2f 08 	call	0x105e	; 0x105e <OS_Sched>
    1458:	8f 2d       	mov	r24, r15
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	08 95       	ret
    1466:	b3 83       	std	Z+3, r27	; 0x03
    1468:	a2 83       	std	Z+2, r26	; 0x02
    146a:	aa 81       	ldd	r26, Y+2	; 0x02
    146c:	bb 81       	ldd	r27, Y+3	; 0x03
    146e:	15 96       	adiw	r26, 0x05	; 5
    1470:	fc 93       	st	X, r31
    1472:	ee 93       	st	-X, r30
    1474:	14 97       	sbiw	r26, 0x04	; 4
    1476:	e3 cf       	rjmp	.-58     	; 0x143e <OSTaskDel+0xbc>
    1478:	78 94       	sei
    147a:	9c e3       	ldi	r25, 0x3C	; 60
    147c:	f9 2e       	mov	r15, r25
    147e:	ec cf       	rjmp	.-40     	; 0x1458 <OSTaskDel+0xd6>
    1480:	8f e3       	ldi	r24, 0x3F	; 63
    1482:	f8 2e       	mov	r15, r24
    1484:	e9 cf       	rjmp	.-46     	; 0x1458 <OSTaskDel+0xd6>

00001486 <OSTaskDelReq>:
    1486:	8f 3f       	cpi	r24, 0xFF	; 255
    1488:	41 f4       	brne	.+16     	; 0x149a <OSTaskDelReq+0x14>
    148a:	f8 94       	cli
    148c:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <OSTCBCur>
    1490:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <OSTCBCur+0x1>
    1494:	86 85       	ldd	r24, Z+14	; 0x0e
    1496:	78 94       	sei
    1498:	08 95       	ret
    149a:	f8 94       	cli
    149c:	e8 2f       	mov	r30, r24
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	ef 52       	subi	r30, 0x2F	; 47
    14a6:	fa 4f       	sbci	r31, 0xFA	; 250
    14a8:	01 90       	ld	r0, Z+
    14aa:	f0 81       	ld	r31, Z
    14ac:	e0 2d       	mov	r30, r0
    14ae:	8b e0       	ldi	r24, 0x0B	; 11
    14b0:	30 97       	sbiw	r30, 0x00	; 0
    14b2:	89 f3       	breq	.-30     	; 0x1496 <OSTaskDelReq+0x10>
    14b4:	8e e3       	ldi	r24, 0x3E	; 62
    14b6:	86 87       	std	Z+14, r24	; 0x0e
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	ed cf       	rjmp	.-38     	; 0x1496 <OSTaskDelReq+0x10>

000014bc <OSTimeDly>:
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	11 f0       	breq	.+4      	; 0x14c4 <OSTimeDly+0x8>
    14c0:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <OSTimeDly.part.0>
    14c4:	08 95       	ret

000014c6 <OSTimeDlyHMSM>:
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	81 11       	cpse	r24, r1
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <OSTimeDlyHMSM+0x26>
    14d2:	61 11       	cpse	r22, r1
    14d4:	0b c0       	rjmp	.+22     	; 0x14ec <OSTimeDlyHMSM+0x26>
    14d6:	41 11       	cpse	r20, r1
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <OSTimeDlyHMSM+0x2c>
    14da:	21 15       	cp	r18, r1
    14dc:	31 05       	cpc	r19, r1
    14de:	61 f4       	brne	.+24     	; 0x14f8 <OSTimeDlyHMSM+0x32>
    14e0:	84 e5       	ldi	r24, 0x54	; 84
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	08 95       	ret
    14ec:	6c 33       	cpi	r22, 0x3C	; 60
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <OSTimeDlyHMSM+0x2c>
    14f0:	4f c0       	rjmp	.+158    	; 0x1590 <OSTimeDlyHMSM+0xca>
    14f2:	4c 33       	cpi	r20, 0x3C	; 60
    14f4:	08 f0       	brcs	.+2      	; 0x14f8 <OSTimeDlyHMSM+0x32>
    14f6:	4e c0       	rjmp	.+156    	; 0x1594 <OSTimeDlyHMSM+0xce>
    14f8:	28 3e       	cpi	r18, 0xE8	; 232
    14fa:	93 e0       	ldi	r25, 0x03	; 3
    14fc:	39 07       	cpc	r19, r25
    14fe:	08 f0       	brcs	.+2      	; 0x1502 <OSTimeDlyHMSM+0x3c>
    1500:	4b c0       	rjmp	.+150    	; 0x1598 <OSTimeDlyHMSM+0xd2>
    1502:	f9 01       	movw	r30, r18
    1504:	58 2f       	mov	r21, r24
    1506:	26 2f       	mov	r18, r22
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	ac e3       	ldi	r26, 0x3C	; 60
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__umulhisi3>
    1512:	6b 01       	movw	r12, r22
    1514:	7c 01       	movw	r14, r24
    1516:	c4 0e       	add	r12, r20
    1518:	d1 1c       	adc	r13, r1
    151a:	e1 1c       	adc	r14, r1
    151c:	f1 1c       	adc	r15, r1
    151e:	25 2f       	mov	r18, r21
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	a0 e1       	ldi	r26, 0x10	; 16
    1524:	be e0       	ldi	r27, 0x0E	; 14
    1526:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__umulhisi3>
    152a:	a7 01       	movw	r20, r14
    152c:	96 01       	movw	r18, r12
    152e:	26 0f       	add	r18, r22
    1530:	37 1f       	adc	r19, r23
    1532:	48 1f       	adc	r20, r24
    1534:	59 1f       	adc	r21, r25
    1536:	a4 e6       	ldi	r26, 0x64	; 100
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__muluhisi3>
    153e:	6b 01       	movw	r12, r22
    1540:	7c 01       	movw	r14, r24
    1542:	9f 01       	movw	r18, r30
    1544:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__umulhisi3>
    1548:	6c 50       	subi	r22, 0x0C	; 12
    154a:	7e 4f       	sbci	r23, 0xFE	; 254
    154c:	8f 4f       	sbci	r24, 0xFF	; 255
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	28 ee       	ldi	r18, 0xE8	; 232
    1552:	33 e0       	ldi	r19, 0x03	; 3
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__udivmodsi4>
    155c:	d7 01       	movw	r26, r14
    155e:	c6 01       	movw	r24, r12
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	a4 1f       	adc	r26, r20
    1566:	b5 1f       	adc	r27, r21
    1568:	7d 01       	movw	r14, r26
    156a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <OSTimeDly>
    156e:	e1 14       	cp	r14, r1
    1570:	f1 04       	cpc	r15, r1
    1572:	11 f4       	brne	.+4      	; 0x1578 <OSTimeDlyHMSM+0xb2>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	b5 cf       	rjmp	.-150    	; 0x14e2 <OSTimeDlyHMSM+0x1c>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e8       	ldi	r25, 0x80	; 128
    157c:	0e 94 8a 08 	call	0x1114	; 0x1114 <OSTimeDly.part.0>
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e8       	ldi	r25, 0x80	; 128
    1584:	0e 94 8a 08 	call	0x1114	; 0x1114 <OSTimeDly.part.0>
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	e8 1a       	sub	r14, r24
    158c:	f1 08       	sbc	r15, r1
    158e:	ef cf       	rjmp	.-34     	; 0x156e <OSTimeDlyHMSM+0xa8>
    1590:	81 e5       	ldi	r24, 0x51	; 81
    1592:	a7 cf       	rjmp	.-178    	; 0x14e2 <OSTimeDlyHMSM+0x1c>
    1594:	82 e5       	ldi	r24, 0x52	; 82
    1596:	a5 cf       	rjmp	.-182    	; 0x14e2 <OSTimeDlyHMSM+0x1c>
    1598:	83 e5       	ldi	r24, 0x53	; 83
    159a:	a3 cf       	rjmp	.-186    	; 0x14e2 <OSTimeDlyHMSM+0x1c>

0000159c <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    159c:	0e 94 19 05 	call	0xa32	; 0xa32 <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    15a0:	0e 94 67 09 	call	0x12ce	; 0x12ce <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	0e 94 3c 04 	call	0x878	; 0x878 <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    15b0:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <myrobot+0x1>
    15b4:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    15b8:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <myrobot+0x3>
    15bc:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    15c0:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <myrobot+0x4>
    myrobot.KP = DEFAULT_KP; //0.03
    15c4:	84 ef       	ldi	r24, 0xF4	; 244
    15c6:	9d ef       	ldi	r25, 0xFD	; 253
    15c8:	a4 e5       	ldi	r26, 0x54	; 84
    15ca:	bd e3       	ldi	r27, 0x3D	; 61
    15cc:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <myrobot+0x5>
    15d0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <myrobot+0x6>
    15d4:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <myrobot+0x7>
    15d8:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <myrobot+0x8>
    myrobot.KD = DEFAULT_KD; //0.07
    15dc:	81 e3       	ldi	r24, 0x31	; 49
    15de:	98 e0       	ldi	r25, 0x08	; 8
    15e0:	ac e2       	ldi	r26, 0x2C	; 44
    15e2:	bd e3       	ldi	r27, 0x3D	; 61
    15e4:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <myrobot+0x9>
    15e8:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <myrobot+0xa>
    15ec:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <myrobot+0xb>
    15f0:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <myrobot+0xc>
    myrobot.KI = DEFAULT_KI; //0.0004
    15f4:	8c ea       	ldi	r24, 0xAC	; 172
    15f6:	95 ec       	ldi	r25, 0xC5	; 197
    15f8:	a7 ea       	ldi	r26, 0xA7	; 167
    15fa:	b7 e3       	ldi	r27, 0x37	; 55
    15fc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <myrobot+0xd>
    1600:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <myrobot+0xe>
    1604:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <myrobot+0xf>
    1608:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <myrobot+0x10>
    myrobot.lastError = 0.0;
    160c:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <myrobot+0x11>
    1610:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <myrobot+0x12>
    1614:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <myrobot+0x13>
    1618:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <myrobot+0x14>
    myrobot.integral = 0.0;
    161c:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <myrobot+0x15>
    1620:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <myrobot+0x16>
    1624:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <myrobot+0x17>
    1628:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <myrobot+0x18>
    myrobot.prevLeftSpeed = 0;
    162c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <myrobot+0x1c>
    1630:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <myrobot+0x1b>
    myrobot.prevRightSpeed = 0;
    1634:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <myrobot+0x1e>
    1638:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <myrobot+0x1d>
    myrobot.inRoundabout = 0;
    163c:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <myrobot+0x20>
    1640:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <myrobot+0x1f>
    myrobot.clickCount = 0;
    1644:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <myrobot+0x22>
    1648:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <myrobot+0x21>
    myrobot.inLightField = 0;
    164c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <myrobot+0x24>
    1650:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <myrobot+0x23>
    myrobot.inBlackBox = 0;
    1654:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <myrobot+0x26>
    1658:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <myrobot+0x25>
    myrobot.turn = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <myrobot+0x28>
    1664:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <myrobot+0x27>
    myrobot.goal = 1000;                                      /* goal is to follow on the middle sensor */
    1668:	88 ee       	ldi	r24, 0xE8	; 232
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <myrobot+0x1a>
    1670:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <myrobot+0x19>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    1674:	21 e0       	ldi	r18, 0x01	; 1
    1676:	4e ee       	ldi	r20, 0xEE	; 238
    1678:	53 e0       	ldi	r21, 0x03	; 3
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	87 e7       	ldi	r24, 0x77	; 119
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 12 09 	call	0x1224	; 0x1224 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    1686:	0e 94 df 04 	call	0x9be	; 0x9be <robo_Honk>
    168a:	0e 94 05 05 	call	0xa0a	; 0xa0a <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    168e:	0e 94 cb 07 	call	0xf96	; 0xf96 <OSStart>
    1692:	ff cf       	rjmp	.-2      	; 0x1692 <main+0xf6>

00001694 <__udivmodhi4>:
    1694:	aa 1b       	sub	r26, r26
    1696:	bb 1b       	sub	r27, r27
    1698:	51 e1       	ldi	r21, 0x11	; 17
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <__udivmodhi4_ep>

0000169c <__udivmodhi4_loop>:
    169c:	aa 1f       	adc	r26, r26
    169e:	bb 1f       	adc	r27, r27
    16a0:	a6 17       	cp	r26, r22
    16a2:	b7 07       	cpc	r27, r23
    16a4:	10 f0       	brcs	.+4      	; 0x16aa <__udivmodhi4_ep>
    16a6:	a6 1b       	sub	r26, r22
    16a8:	b7 0b       	sbc	r27, r23

000016aa <__udivmodhi4_ep>:
    16aa:	88 1f       	adc	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	5a 95       	dec	r21
    16b0:	a9 f7       	brne	.-22     	; 0x169c <__udivmodhi4_loop>
    16b2:	80 95       	com	r24
    16b4:	90 95       	com	r25
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	08 95       	ret

000016bc <__divmodhi4>:
    16bc:	97 fb       	bst	r25, 7
    16be:	07 2e       	mov	r0, r23
    16c0:	16 f4       	brtc	.+4      	; 0x16c6 <__divmodhi4+0xa>
    16c2:	00 94       	com	r0
    16c4:	07 d0       	rcall	.+14     	; 0x16d4 <__divmodhi4_neg1>
    16c6:	77 fd       	sbrc	r23, 7
    16c8:	09 d0       	rcall	.+18     	; 0x16dc <__divmodhi4_neg2>
    16ca:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodhi4>
    16ce:	07 fc       	sbrc	r0, 7
    16d0:	05 d0       	rcall	.+10     	; 0x16dc <__divmodhi4_neg2>
    16d2:	3e f4       	brtc	.+14     	; 0x16e2 <__divmodhi4_exit>

000016d4 <__divmodhi4_neg1>:
    16d4:	90 95       	com	r25
    16d6:	81 95       	neg	r24
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	08 95       	ret

000016dc <__divmodhi4_neg2>:
    16dc:	70 95       	com	r23
    16de:	61 95       	neg	r22
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255

000016e2 <__divmodhi4_exit>:
    16e2:	08 95       	ret

000016e4 <__udivmodsi4>:
    16e4:	a1 e2       	ldi	r26, 0x21	; 33
    16e6:	1a 2e       	mov	r1, r26
    16e8:	aa 1b       	sub	r26, r26
    16ea:	bb 1b       	sub	r27, r27
    16ec:	fd 01       	movw	r30, r26
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <__udivmodsi4_ep>

000016f0 <__udivmodsi4_loop>:
    16f0:	aa 1f       	adc	r26, r26
    16f2:	bb 1f       	adc	r27, r27
    16f4:	ee 1f       	adc	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	a2 17       	cp	r26, r18
    16fa:	b3 07       	cpc	r27, r19
    16fc:	e4 07       	cpc	r30, r20
    16fe:	f5 07       	cpc	r31, r21
    1700:	20 f0       	brcs	.+8      	; 0x170a <__udivmodsi4_ep>
    1702:	a2 1b       	sub	r26, r18
    1704:	b3 0b       	sbc	r27, r19
    1706:	e4 0b       	sbc	r30, r20
    1708:	f5 0b       	sbc	r31, r21

0000170a <__udivmodsi4_ep>:
    170a:	66 1f       	adc	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	1a 94       	dec	r1
    1714:	69 f7       	brne	.-38     	; 0x16f0 <__udivmodsi4_loop>
    1716:	60 95       	com	r22
    1718:	70 95       	com	r23
    171a:	80 95       	com	r24
    171c:	90 95       	com	r25
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	bd 01       	movw	r22, r26
    1724:	cf 01       	movw	r24, r30
    1726:	08 95       	ret

00001728 <__tablejump2__>:
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	05 90       	lpm	r0, Z+
    172e:	f4 91       	lpm	r31, Z
    1730:	e0 2d       	mov	r30, r0
    1732:	09 94       	ijmp

00001734 <__umulhisi3>:
    1734:	a2 9f       	mul	r26, r18
    1736:	b0 01       	movw	r22, r0
    1738:	b3 9f       	mul	r27, r19
    173a:	c0 01       	movw	r24, r0
    173c:	a3 9f       	mul	r26, r19
    173e:	70 0d       	add	r23, r0
    1740:	81 1d       	adc	r24, r1
    1742:	11 24       	eor	r1, r1
    1744:	91 1d       	adc	r25, r1
    1746:	b2 9f       	mul	r27, r18
    1748:	70 0d       	add	r23, r0
    174a:	81 1d       	adc	r24, r1
    174c:	11 24       	eor	r1, r1
    174e:	91 1d       	adc	r25, r1
    1750:	08 95       	ret

00001752 <__muluhisi3>:
    1752:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__umulhisi3>
    1756:	a5 9f       	mul	r26, r21
    1758:	90 0d       	add	r25, r0
    175a:	b4 9f       	mul	r27, r20
    175c:	90 0d       	add	r25, r0
    175e:	a4 9f       	mul	r26, r20
    1760:	80 0d       	add	r24, r0
    1762:	91 1d       	adc	r25, r1
    1764:	11 24       	eor	r1, r1
    1766:	08 95       	ret

00001768 <__subsf3>:
    1768:	50 58       	subi	r21, 0x80	; 128

0000176a <__addsf3>:
    176a:	bb 27       	eor	r27, r27
    176c:	aa 27       	eor	r26, r26
    176e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__addsf3x>
    1772:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__fp_round>
    1776:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscA>
    177a:	38 f0       	brcs	.+14     	; 0x178a <__addsf3+0x20>
    177c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__fp_pscB>
    1780:	20 f0       	brcs	.+8      	; 0x178a <__addsf3+0x20>
    1782:	39 f4       	brne	.+14     	; 0x1792 <__addsf3+0x28>
    1784:	9f 3f       	cpi	r25, 0xFF	; 255
    1786:	19 f4       	brne	.+6      	; 0x178e <__addsf3+0x24>
    1788:	26 f4       	brtc	.+8      	; 0x1792 <__addsf3+0x28>
    178a:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__fp_nan>
    178e:	0e f4       	brtc	.+2      	; 0x1792 <__addsf3+0x28>
    1790:	e0 95       	com	r30
    1792:	e7 fb       	bst	r30, 7
    1794:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_inf>

00001798 <__addsf3x>:
    1798:	e9 2f       	mov	r30, r25
    179a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fp_split3>
    179e:	58 f3       	brcs	.-42     	; 0x1776 <__addsf3+0xc>
    17a0:	ba 17       	cp	r27, r26
    17a2:	62 07       	cpc	r22, r18
    17a4:	73 07       	cpc	r23, r19
    17a6:	84 07       	cpc	r24, r20
    17a8:	95 07       	cpc	r25, r21
    17aa:	20 f0       	brcs	.+8      	; 0x17b4 <__addsf3x+0x1c>
    17ac:	79 f4       	brne	.+30     	; 0x17cc <__addsf3x+0x34>
    17ae:	a6 f5       	brtc	.+104    	; 0x1818 <__addsf3x+0x80>
    17b0:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__fp_zero>
    17b4:	0e f4       	brtc	.+2      	; 0x17b8 <__addsf3x+0x20>
    17b6:	e0 95       	com	r30
    17b8:	0b 2e       	mov	r0, r27
    17ba:	ba 2f       	mov	r27, r26
    17bc:	a0 2d       	mov	r26, r0
    17be:	0b 01       	movw	r0, r22
    17c0:	b9 01       	movw	r22, r18
    17c2:	90 01       	movw	r18, r0
    17c4:	0c 01       	movw	r0, r24
    17c6:	ca 01       	movw	r24, r20
    17c8:	a0 01       	movw	r20, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	ff 27       	eor	r31, r31
    17ce:	59 1b       	sub	r21, r25
    17d0:	99 f0       	breq	.+38     	; 0x17f8 <__addsf3x+0x60>
    17d2:	59 3f       	cpi	r21, 0xF9	; 249
    17d4:	50 f4       	brcc	.+20     	; 0x17ea <__addsf3x+0x52>
    17d6:	50 3e       	cpi	r21, 0xE0	; 224
    17d8:	68 f1       	brcs	.+90     	; 0x1834 <__addsf3x+0x9c>
    17da:	1a 16       	cp	r1, r26
    17dc:	f0 40       	sbci	r31, 0x00	; 0
    17de:	a2 2f       	mov	r26, r18
    17e0:	23 2f       	mov	r18, r19
    17e2:	34 2f       	mov	r19, r20
    17e4:	44 27       	eor	r20, r20
    17e6:	58 5f       	subi	r21, 0xF8	; 248
    17e8:	f3 cf       	rjmp	.-26     	; 0x17d0 <__addsf3x+0x38>
    17ea:	46 95       	lsr	r20
    17ec:	37 95       	ror	r19
    17ee:	27 95       	ror	r18
    17f0:	a7 95       	ror	r26
    17f2:	f0 40       	sbci	r31, 0x00	; 0
    17f4:	53 95       	inc	r21
    17f6:	c9 f7       	brne	.-14     	; 0x17ea <__addsf3x+0x52>
    17f8:	7e f4       	brtc	.+30     	; 0x1818 <__addsf3x+0x80>
    17fa:	1f 16       	cp	r1, r31
    17fc:	ba 0b       	sbc	r27, r26
    17fe:	62 0b       	sbc	r22, r18
    1800:	73 0b       	sbc	r23, r19
    1802:	84 0b       	sbc	r24, r20
    1804:	ba f0       	brmi	.+46     	; 0x1834 <__addsf3x+0x9c>
    1806:	91 50       	subi	r25, 0x01	; 1
    1808:	a1 f0       	breq	.+40     	; 0x1832 <__addsf3x+0x9a>
    180a:	ff 0f       	add	r31, r31
    180c:	bb 1f       	adc	r27, r27
    180e:	66 1f       	adc	r22, r22
    1810:	77 1f       	adc	r23, r23
    1812:	88 1f       	adc	r24, r24
    1814:	c2 f7       	brpl	.-16     	; 0x1806 <__addsf3x+0x6e>
    1816:	0e c0       	rjmp	.+28     	; 0x1834 <__addsf3x+0x9c>
    1818:	ba 0f       	add	r27, r26
    181a:	62 1f       	adc	r22, r18
    181c:	73 1f       	adc	r23, r19
    181e:	84 1f       	adc	r24, r20
    1820:	48 f4       	brcc	.+18     	; 0x1834 <__addsf3x+0x9c>
    1822:	87 95       	ror	r24
    1824:	77 95       	ror	r23
    1826:	67 95       	ror	r22
    1828:	b7 95       	ror	r27
    182a:	f7 95       	ror	r31
    182c:	9e 3f       	cpi	r25, 0xFE	; 254
    182e:	08 f0       	brcs	.+2      	; 0x1832 <__addsf3x+0x9a>
    1830:	b0 cf       	rjmp	.-160    	; 0x1792 <__addsf3+0x28>
    1832:	93 95       	inc	r25
    1834:	88 0f       	add	r24, r24
    1836:	08 f0       	brcs	.+2      	; 0x183a <__addsf3x+0xa2>
    1838:	99 27       	eor	r25, r25
    183a:	ee 0f       	add	r30, r30
    183c:	97 95       	ror	r25
    183e:	87 95       	ror	r24
    1840:	08 95       	ret

00001842 <__fixsfsi>:
    1842:	0e 94 28 0c 	call	0x1850	; 0x1850 <__fixunssfsi>
    1846:	68 94       	set
    1848:	b1 11       	cpse	r27, r1
    184a:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__fp_szero>
    184e:	08 95       	ret

00001850 <__fixunssfsi>:
    1850:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_splitA>
    1854:	88 f0       	brcs	.+34     	; 0x1878 <__fixunssfsi+0x28>
    1856:	9f 57       	subi	r25, 0x7F	; 127
    1858:	98 f0       	brcs	.+38     	; 0x1880 <__fixunssfsi+0x30>
    185a:	b9 2f       	mov	r27, r25
    185c:	99 27       	eor	r25, r25
    185e:	b7 51       	subi	r27, 0x17	; 23
    1860:	b0 f0       	brcs	.+44     	; 0x188e <__fixunssfsi+0x3e>
    1862:	e1 f0       	breq	.+56     	; 0x189c <__fixunssfsi+0x4c>
    1864:	66 0f       	add	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	1a f0       	brmi	.+6      	; 0x1874 <__fixunssfsi+0x24>
    186e:	ba 95       	dec	r27
    1870:	c9 f7       	brne	.-14     	; 0x1864 <__fixunssfsi+0x14>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <__fixunssfsi+0x4c>
    1874:	b1 30       	cpi	r27, 0x01	; 1
    1876:	91 f0       	breq	.+36     	; 0x189c <__fixunssfsi+0x4c>
    1878:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__fp_zero>
    187c:	b1 e0       	ldi	r27, 0x01	; 1
    187e:	08 95       	ret
    1880:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__fp_zero>
    1884:	67 2f       	mov	r22, r23
    1886:	78 2f       	mov	r23, r24
    1888:	88 27       	eor	r24, r24
    188a:	b8 5f       	subi	r27, 0xF8	; 248
    188c:	39 f0       	breq	.+14     	; 0x189c <__fixunssfsi+0x4c>
    188e:	b9 3f       	cpi	r27, 0xF9	; 249
    1890:	cc f3       	brlt	.-14     	; 0x1884 <__fixunssfsi+0x34>
    1892:	86 95       	lsr	r24
    1894:	77 95       	ror	r23
    1896:	67 95       	ror	r22
    1898:	b3 95       	inc	r27
    189a:	d9 f7       	brne	.-10     	; 0x1892 <__fixunssfsi+0x42>
    189c:	3e f4       	brtc	.+14     	; 0x18ac <__fixunssfsi+0x5c>
    189e:	90 95       	com	r25
    18a0:	80 95       	com	r24
    18a2:	70 95       	com	r23
    18a4:	61 95       	neg	r22
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	8f 4f       	sbci	r24, 0xFF	; 255
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	08 95       	ret

000018ae <__floatunsisf>:
    18ae:	e8 94       	clt
    18b0:	09 c0       	rjmp	.+18     	; 0x18c4 <__floatsisf+0x12>

000018b2 <__floatsisf>:
    18b2:	97 fb       	bst	r25, 7
    18b4:	3e f4       	brtc	.+14     	; 0x18c4 <__floatsisf+0x12>
    18b6:	90 95       	com	r25
    18b8:	80 95       	com	r24
    18ba:	70 95       	com	r23
    18bc:	61 95       	neg	r22
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	8f 4f       	sbci	r24, 0xFF	; 255
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	99 23       	and	r25, r25
    18c6:	a9 f0       	breq	.+42     	; 0x18f2 <__floatsisf+0x40>
    18c8:	f9 2f       	mov	r31, r25
    18ca:	96 e9       	ldi	r25, 0x96	; 150
    18cc:	bb 27       	eor	r27, r27
    18ce:	93 95       	inc	r25
    18d0:	f6 95       	lsr	r31
    18d2:	87 95       	ror	r24
    18d4:	77 95       	ror	r23
    18d6:	67 95       	ror	r22
    18d8:	b7 95       	ror	r27
    18da:	f1 11       	cpse	r31, r1
    18dc:	f8 cf       	rjmp	.-16     	; 0x18ce <__floatsisf+0x1c>
    18de:	fa f4       	brpl	.+62     	; 0x191e <__floatsisf+0x6c>
    18e0:	bb 0f       	add	r27, r27
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <__floatsisf+0x36>
    18e4:	60 ff       	sbrs	r22, 0
    18e6:	1b c0       	rjmp	.+54     	; 0x191e <__floatsisf+0x6c>
    18e8:	6f 5f       	subi	r22, 0xFF	; 255
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	16 c0       	rjmp	.+44     	; 0x191e <__floatsisf+0x6c>
    18f2:	88 23       	and	r24, r24
    18f4:	11 f0       	breq	.+4      	; 0x18fa <__floatsisf+0x48>
    18f6:	96 e9       	ldi	r25, 0x96	; 150
    18f8:	11 c0       	rjmp	.+34     	; 0x191c <__floatsisf+0x6a>
    18fa:	77 23       	and	r23, r23
    18fc:	21 f0       	breq	.+8      	; 0x1906 <__floatsisf+0x54>
    18fe:	9e e8       	ldi	r25, 0x8E	; 142
    1900:	87 2f       	mov	r24, r23
    1902:	76 2f       	mov	r23, r22
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <__floatsisf+0x5e>
    1906:	66 23       	and	r22, r22
    1908:	71 f0       	breq	.+28     	; 0x1926 <__floatsisf+0x74>
    190a:	96 e8       	ldi	r25, 0x86	; 134
    190c:	86 2f       	mov	r24, r22
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	2a f0       	brmi	.+10     	; 0x191e <__floatsisf+0x6c>
    1914:	9a 95       	dec	r25
    1916:	66 0f       	add	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	88 1f       	adc	r24, r24
    191c:	da f7       	brpl	.-10     	; 0x1914 <__floatsisf+0x62>
    191e:	88 0f       	add	r24, r24
    1920:	96 95       	lsr	r25
    1922:	87 95       	ror	r24
    1924:	97 f9       	bld	r25, 7
    1926:	08 95       	ret

00001928 <__fp_inf>:
    1928:	97 f9       	bld	r25, 7
    192a:	9f 67       	ori	r25, 0x7F	; 127
    192c:	80 e8       	ldi	r24, 0x80	; 128
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	08 95       	ret

00001934 <__fp_nan>:
    1934:	9f ef       	ldi	r25, 0xFF	; 255
    1936:	80 ec       	ldi	r24, 0xC0	; 192
    1938:	08 95       	ret

0000193a <__fp_pscA>:
    193a:	00 24       	eor	r0, r0
    193c:	0a 94       	dec	r0
    193e:	16 16       	cp	r1, r22
    1940:	17 06       	cpc	r1, r23
    1942:	18 06       	cpc	r1, r24
    1944:	09 06       	cpc	r0, r25
    1946:	08 95       	ret

00001948 <__fp_pscB>:
    1948:	00 24       	eor	r0, r0
    194a:	0a 94       	dec	r0
    194c:	12 16       	cp	r1, r18
    194e:	13 06       	cpc	r1, r19
    1950:	14 06       	cpc	r1, r20
    1952:	05 06       	cpc	r0, r21
    1954:	08 95       	ret

00001956 <__fp_round>:
    1956:	09 2e       	mov	r0, r25
    1958:	03 94       	inc	r0
    195a:	00 0c       	add	r0, r0
    195c:	11 f4       	brne	.+4      	; 0x1962 <__fp_round+0xc>
    195e:	88 23       	and	r24, r24
    1960:	52 f0       	brmi	.+20     	; 0x1976 <__fp_round+0x20>
    1962:	bb 0f       	add	r27, r27
    1964:	40 f4       	brcc	.+16     	; 0x1976 <__fp_round+0x20>
    1966:	bf 2b       	or	r27, r31
    1968:	11 f4       	brne	.+4      	; 0x196e <__fp_round+0x18>
    196a:	60 ff       	sbrs	r22, 0
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <__fp_round+0x20>
    196e:	6f 5f       	subi	r22, 0xFF	; 255
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	8f 4f       	sbci	r24, 0xFF	; 255
    1974:	9f 4f       	sbci	r25, 0xFF	; 255
    1976:	08 95       	ret

00001978 <__fp_split3>:
    1978:	57 fd       	sbrc	r21, 7
    197a:	90 58       	subi	r25, 0x80	; 128
    197c:	44 0f       	add	r20, r20
    197e:	55 1f       	adc	r21, r21
    1980:	59 f0       	breq	.+22     	; 0x1998 <__fp_splitA+0x10>
    1982:	5f 3f       	cpi	r21, 0xFF	; 255
    1984:	71 f0       	breq	.+28     	; 0x19a2 <__fp_splitA+0x1a>
    1986:	47 95       	ror	r20

00001988 <__fp_splitA>:
    1988:	88 0f       	add	r24, r24
    198a:	97 fb       	bst	r25, 7
    198c:	99 1f       	adc	r25, r25
    198e:	61 f0       	breq	.+24     	; 0x19a8 <__fp_splitA+0x20>
    1990:	9f 3f       	cpi	r25, 0xFF	; 255
    1992:	79 f0       	breq	.+30     	; 0x19b2 <__fp_splitA+0x2a>
    1994:	87 95       	ror	r24
    1996:	08 95       	ret
    1998:	12 16       	cp	r1, r18
    199a:	13 06       	cpc	r1, r19
    199c:	14 06       	cpc	r1, r20
    199e:	55 1f       	adc	r21, r21
    19a0:	f2 cf       	rjmp	.-28     	; 0x1986 <__fp_split3+0xe>
    19a2:	46 95       	lsr	r20
    19a4:	f1 df       	rcall	.-30     	; 0x1988 <__fp_splitA>
    19a6:	08 c0       	rjmp	.+16     	; 0x19b8 <__fp_splitA+0x30>
    19a8:	16 16       	cp	r1, r22
    19aa:	17 06       	cpc	r1, r23
    19ac:	18 06       	cpc	r1, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	f1 cf       	rjmp	.-30     	; 0x1994 <__fp_splitA+0xc>
    19b2:	86 95       	lsr	r24
    19b4:	71 05       	cpc	r23, r1
    19b6:	61 05       	cpc	r22, r1
    19b8:	08 94       	sec
    19ba:	08 95       	ret

000019bc <__fp_zero>:
    19bc:	e8 94       	clt

000019be <__fp_szero>:
    19be:	bb 27       	eor	r27, r27
    19c0:	66 27       	eor	r22, r22
    19c2:	77 27       	eor	r23, r23
    19c4:	cb 01       	movw	r24, r22
    19c6:	97 f9       	bld	r25, 7
    19c8:	08 95       	ret

000019ca <__mulsf3>:
    19ca:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__mulsf3x>
    19ce:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__fp_round>
    19d2:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscA>
    19d6:	38 f0       	brcs	.+14     	; 0x19e6 <__mulsf3+0x1c>
    19d8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__fp_pscB>
    19dc:	20 f0       	brcs	.+8      	; 0x19e6 <__mulsf3+0x1c>
    19de:	95 23       	and	r25, r21
    19e0:	11 f0       	breq	.+4      	; 0x19e6 <__mulsf3+0x1c>
    19e2:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_inf>
    19e6:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__fp_nan>
    19ea:	11 24       	eor	r1, r1
    19ec:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__fp_szero>

000019f0 <__mulsf3x>:
    19f0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fp_split3>
    19f4:	70 f3       	brcs	.-36     	; 0x19d2 <__mulsf3+0x8>

000019f6 <__mulsf3_pse>:
    19f6:	95 9f       	mul	r25, r21
    19f8:	c1 f3       	breq	.-16     	; 0x19ea <__mulsf3+0x20>
    19fa:	95 0f       	add	r25, r21
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	55 1f       	adc	r21, r21
    1a00:	62 9f       	mul	r22, r18
    1a02:	f0 01       	movw	r30, r0
    1a04:	72 9f       	mul	r23, r18
    1a06:	bb 27       	eor	r27, r27
    1a08:	f0 0d       	add	r31, r0
    1a0a:	b1 1d       	adc	r27, r1
    1a0c:	63 9f       	mul	r22, r19
    1a0e:	aa 27       	eor	r26, r26
    1a10:	f0 0d       	add	r31, r0
    1a12:	b1 1d       	adc	r27, r1
    1a14:	aa 1f       	adc	r26, r26
    1a16:	64 9f       	mul	r22, r20
    1a18:	66 27       	eor	r22, r22
    1a1a:	b0 0d       	add	r27, r0
    1a1c:	a1 1d       	adc	r26, r1
    1a1e:	66 1f       	adc	r22, r22
    1a20:	82 9f       	mul	r24, r18
    1a22:	22 27       	eor	r18, r18
    1a24:	b0 0d       	add	r27, r0
    1a26:	a1 1d       	adc	r26, r1
    1a28:	62 1f       	adc	r22, r18
    1a2a:	73 9f       	mul	r23, r19
    1a2c:	b0 0d       	add	r27, r0
    1a2e:	a1 1d       	adc	r26, r1
    1a30:	62 1f       	adc	r22, r18
    1a32:	83 9f       	mul	r24, r19
    1a34:	a0 0d       	add	r26, r0
    1a36:	61 1d       	adc	r22, r1
    1a38:	22 1f       	adc	r18, r18
    1a3a:	74 9f       	mul	r23, r20
    1a3c:	33 27       	eor	r19, r19
    1a3e:	a0 0d       	add	r26, r0
    1a40:	61 1d       	adc	r22, r1
    1a42:	23 1f       	adc	r18, r19
    1a44:	84 9f       	mul	r24, r20
    1a46:	60 0d       	add	r22, r0
    1a48:	21 1d       	adc	r18, r1
    1a4a:	82 2f       	mov	r24, r18
    1a4c:	76 2f       	mov	r23, r22
    1a4e:	6a 2f       	mov	r22, r26
    1a50:	11 24       	eor	r1, r1
    1a52:	9f 57       	subi	r25, 0x7F	; 127
    1a54:	50 40       	sbci	r21, 0x00	; 0
    1a56:	9a f0       	brmi	.+38     	; 0x1a7e <__mulsf3_pse+0x88>
    1a58:	f1 f0       	breq	.+60     	; 0x1a96 <__mulsf3_pse+0xa0>
    1a5a:	88 23       	and	r24, r24
    1a5c:	4a f0       	brmi	.+18     	; 0x1a70 <__mulsf3_pse+0x7a>
    1a5e:	ee 0f       	add	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	bb 1f       	adc	r27, r27
    1a64:	66 1f       	adc	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	91 50       	subi	r25, 0x01	; 1
    1a6c:	50 40       	sbci	r21, 0x00	; 0
    1a6e:	a9 f7       	brne	.-22     	; 0x1a5a <__mulsf3_pse+0x64>
    1a70:	9e 3f       	cpi	r25, 0xFE	; 254
    1a72:	51 05       	cpc	r21, r1
    1a74:	80 f0       	brcs	.+32     	; 0x1a96 <__mulsf3_pse+0xa0>
    1a76:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__fp_inf>
    1a7a:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__fp_szero>
    1a7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a80:	e4 f3       	brlt	.-8      	; 0x1a7a <__mulsf3_pse+0x84>
    1a82:	98 3e       	cpi	r25, 0xE8	; 232
    1a84:	d4 f3       	brlt	.-12     	; 0x1a7a <__mulsf3_pse+0x84>
    1a86:	86 95       	lsr	r24
    1a88:	77 95       	ror	r23
    1a8a:	67 95       	ror	r22
    1a8c:	b7 95       	ror	r27
    1a8e:	f7 95       	ror	r31
    1a90:	e7 95       	ror	r30
    1a92:	9f 5f       	subi	r25, 0xFF	; 255
    1a94:	c1 f7       	brne	.-16     	; 0x1a86 <__mulsf3_pse+0x90>
    1a96:	fe 2b       	or	r31, r30
    1a98:	88 0f       	add	r24, r24
    1a9a:	91 1d       	adc	r25, r1
    1a9c:	96 95       	lsr	r25
    1a9e:	87 95       	ror	r24
    1aa0:	97 f9       	bld	r25, 7
    1aa2:	08 95       	ret

00001aa4 <_exit>:
    1aa4:	f8 94       	cli

00001aa6 <__stop_program>:
    1aa6:	ff cf       	rjmp	.-2      	; 0x1aa6 <__stop_program>
