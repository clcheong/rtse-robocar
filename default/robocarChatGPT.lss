
robocarChatGPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00001704  00001798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a5  00800226  00800226  000018be  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001910  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001544  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000885  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1c  00000000  00000000  00003821  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00004240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a4  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019a  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00004af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e0       	ldi	r30, 0x04	; 4
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 32       	cpi	r26, 0x26	; 38
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a6 e2       	ldi	r26, 0x26	; 38
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3c       	cpi	r26, 0xCB	; 203
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 14 09 	call	0x1228	; 0x1228 <main>
      9e:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      a8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      b0:	c0 93 aa 02 	sts	0x02AA, r28	; 0x8002aa <myrobot+0x4>
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 a9 08 	call	0x1152	; 0x1152 <OSTimeDlyHMSM>
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      c4:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <myrobot>
      ce:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <myrobot+0x1>
      d2:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <myrobot+0x2>
      d6:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <myrobot+0x3>
      da:	0e 94 82 02 	call	0x504	; 0x504 <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 250 ms              */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 a9 08 	call	0x1152	; 0x1152 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:

                // Store error for the next iteration
                myrobot.lastError = error;

                // Adjust motors
                myrobot.lspeed = constrain((60 - adjustment), -100 , 100);
      ee:	cc e3       	ldi	r28, 0x3C	; 60
      f0:	d0 e0       	ldi	r29, 0x00	; 0
        // if(myrobot.timer == 350) {
        //     robo_Honk();
        //     myrobot.KP = 0.03;
        // }

        if (myrobot.obstacle == 1) {
      f2:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <myrobot+0x4>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	49 f4       	brne	.+18     	; 0x10c <Navig+0x1e>
            myrobot.lspeed = STOP_SPEED;
      fa:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <myrobot+0x3>
      fe:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <myrobot+0x2>
            myrobot.rspeed = STOP_SPEED;
     102:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <myrobot+0x1>
     106:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <myrobot>
     10a:	f3 cf       	rjmp	.-26     	; 0xf2 <Navig+0x4>
        } else {


            int sense = myrobot.goal;

            int sensorValue = robo_lineSensor();
     10c:	0e 94 00 03 	call	0x600	; 0x600 <robo_lineSensor>

            if (myrobot.inRoundabout == 1) {
     110:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <myrobot+0x1f>
     114:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <myrobot+0x20>
     118:	21 30       	cpi	r18, 0x01	; 1
     11a:	31 05       	cpc	r19, r1
     11c:	09 f0       	breq	.+2      	; 0x120 <Navig+0x32>
     11e:	51 c0       	rjmp	.+162    	; 0x1c2 <Navig+0xd4>
                // myrobot.lspeed = LOW_SPEED;
                // myrobot.rspeed = LOW_SPEED;
                myrobot.KP = 1.2;
     120:	2a e9       	ldi	r18, 0x9A	; 154
     122:	39 e9       	ldi	r19, 0x99	; 153
     124:	49 e9       	ldi	r20, 0x99	; 153
     126:	5f e3       	ldi	r21, 0x3F	; 63
            } else {
                myrobot.KP = 0.03;
     128:	20 93 ab 02 	sts	0x02AB, r18	; 0x8002ab <myrobot+0x5>
     12c:	30 93 ac 02 	sts	0x02AC, r19	; 0x8002ac <myrobot+0x6>
     130:	40 93 ad 02 	sts	0x02AD, r20	; 0x8002ad <myrobot+0x7>
     134:	50 93 ae 02 	sts	0x02AE, r21	; 0x8002ae <myrobot+0x8>
            }

            if(sensorValue == 0) {
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	09 f0       	breq	.+2      	; 0x13e <Navig+0x50>
     13c:	47 c0       	rjmp	.+142    	; 0x1cc <Navig+0xde>
                //     robo_Honk();
                //     robo_LED_toggle();
                //     myrobot.inRoundabout = 1;
                // }

                myrobot.lspeed = - (myrobot.prevRightSpeed * 1.1);
     13e:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <myrobot+0x1d>
     142:	70 91 c4 02 	lds	r23, 0x02C4	; 0x8002c4 <myrobot+0x1e>
     146:	07 2e       	mov	r0, r23
     148:	00 0c       	add	r0, r0
     14a:	88 0b       	sbc	r24, r24
     14c:	99 0b       	sbc	r25, r25
     14e:	0e 94 87 0a 	call	0x150e	; 0x150e <__floatsisf>
     152:	2d ec       	ldi	r18, 0xCD	; 205
     154:	3c ec       	ldi	r19, 0xCC	; 204
     156:	4c e8       	ldi	r20, 0x8C	; 140
     158:	5f e3       	ldi	r21, 0x3F	; 63
     15a:	0e 94 13 0b 	call	0x1626	; 0x1626 <__mulsf3>
     15e:	90 58       	subi	r25, 0x80	; 128
     160:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fixsfsi>
     164:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <myrobot+0x3>
     168:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <myrobot+0x2>
                myrobot.rspeed = - (myrobot.prevLeftSpeed * 1.1);
     16c:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <myrobot+0x1b>
     170:	70 91 c2 02 	lds	r23, 0x02C2	; 0x8002c2 <myrobot+0x1c>
     174:	07 2e       	mov	r0, r23
     176:	00 0c       	add	r0, r0
     178:	88 0b       	sbc	r24, r24
     17a:	99 0b       	sbc	r25, r25
     17c:	0e 94 87 0a 	call	0x150e	; 0x150e <__floatsisf>
     180:	2d ec       	ldi	r18, 0xCD	; 205
     182:	3c ec       	ldi	r19, 0xCC	; 204
     184:	4c e8       	ldi	r20, 0x8C	; 140
     186:	5f e3       	ldi	r21, 0x3F	; 63
     188:	0e 94 13 0b 	call	0x1626	; 0x1626 <__mulsf3>
     18c:	90 58       	subi	r25, 0x80	; 128
     18e:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fixsfsi>
     192:	70 93 a7 02 	sts	0x02A7, r23	; 0x8002a7 <myrobot+0x1>
     196:	60 93 a6 02 	sts	0x02A6, r22	; 0x8002a6 <myrobot>


                myrobot.KI = 0.0008; // 0.0008
     19a:	87 e1       	ldi	r24, 0x17	; 23
     19c:	97 eb       	ldi	r25, 0xB7	; 183
     19e:	a1 e5       	ldi	r26, 0x51	; 81
     1a0:	ba e3       	ldi	r27, 0x3A	; 58
     1a2:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <myrobot+0xd>
     1a6:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <myrobot+0xe>
     1aa:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <myrobot+0xf>
     1ae:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <myrobot+0x10>
                myrobot.prevRightSpeed = myrobot.rspeed;
                // myrobot.prev2Sense = myrobot.prevSense;
                // myrobot.prevSense = sensorValue;
            }

            OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
     1b2:	2a e0       	ldi	r18, 0x0A	; 10
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	0e 94 a9 08 	call	0x1152	; 0x1152 <OSTimeDlyHMSM>
     1c0:	98 cf       	rjmp	.-208    	; 0xf2 <Navig+0x4>
            if (myrobot.inRoundabout == 1) {
                // myrobot.lspeed = LOW_SPEED;
                // myrobot.rspeed = LOW_SPEED;
                myrobot.KP = 1.2;
            } else {
                myrobot.KP = 0.03;
     1c2:	2f e8       	ldi	r18, 0x8F	; 143
     1c4:	32 ec       	ldi	r19, 0xC2	; 194
     1c6:	45 ef       	ldi	r20, 0xF5	; 245
     1c8:	5c e3       	ldi	r21, 0x3C	; 60
     1ca:	ae cf       	rjmp	.-164    	; 0x128 <Navig+0x3a>
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	86 30       	cpi	r24, 0x06	; 6
     1d0:	91 05       	cpc	r25, r1
     1d2:	08 f0       	brcs	.+2      	; 0x1d6 <Navig+0xe8>
     1d4:	9d c0       	rjmp	.+314    	; 0x310 <Navig+0x222>
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	fc 01       	movw	r30, r24
     1dc:	e8 5f       	subi	r30, 0xF8	; 248
     1de:	fd 4f       	sbci	r31, 0xFD	; 253
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
                }


                // Calculate error

                int error = myrobot.goal - sense;
     1e4:	60 91 bf 02 	lds	r22, 0x02BF	; 0x8002bf <myrobot+0x19>
     1e8:	70 91 c0 02 	lds	r23, 0x02C0	; 0x8002c0 <myrobot+0x1a>
     1ec:	68 1b       	sub	r22, r24
     1ee:	79 0b       	sbc	r23, r25

                myrobot.integral = myrobot.integral + error;
     1f0:	07 2e       	mov	r0, r23
     1f2:	00 0c       	add	r0, r0
     1f4:	88 0b       	sbc	r24, r24
     1f6:	99 0b       	sbc	r25, r25
     1f8:	0e 94 87 0a 	call	0x150e	; 0x150e <__floatsisf>
     1fc:	6b 01       	movw	r12, r22
     1fe:	7c 01       	movw	r14, r24
     200:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <myrobot+0x15>
     204:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <myrobot+0x16>
     208:	40 91 bd 02 	lds	r20, 0x02BD	; 0x8002bd <myrobot+0x17>
     20c:	50 91 be 02 	lds	r21, 0x02BE	; 0x8002be <myrobot+0x18>
     210:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__addsf3>
     214:	4b 01       	movw	r8, r22
     216:	5c 01       	movw	r10, r24
     218:	80 92 bb 02 	sts	0x02BB, r8	; 0x8002bb <myrobot+0x15>
     21c:	90 92 bc 02 	sts	0x02BC, r9	; 0x8002bc <myrobot+0x16>
     220:	a0 92 bd 02 	sts	0x02BD, r10	; 0x8002bd <myrobot+0x17>
     224:	b0 92 be 02 	sts	0x02BE, r11	; 0x8002be <myrobot+0x18>


                // Calculate motor adjustments
                int adjustment = (myrobot.KP * error) + (myrobot.KI * (myrobot.integral)) + (myrobot.KD * (error - myrobot.lastError));
     228:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <myrobot+0x5>
     22c:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <myrobot+0x6>
     230:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <myrobot+0x7>
     234:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <myrobot+0x8>
     238:	c7 01       	movw	r24, r14
     23a:	b6 01       	movw	r22, r12
     23c:	0e 94 13 0b 	call	0x1626	; 0x1626 <__mulsf3>
     240:	2b 01       	movw	r4, r22
     242:	3c 01       	movw	r6, r24
     244:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <myrobot+0xd>
     248:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <myrobot+0xe>
     24c:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <myrobot+0xf>
     250:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <myrobot+0x10>
     254:	c5 01       	movw	r24, r10
     256:	b4 01       	movw	r22, r8
     258:	0e 94 13 0b 	call	0x1626	; 0x1626 <__mulsf3>
     25c:	9b 01       	movw	r18, r22
     25e:	ac 01       	movw	r20, r24
     260:	c3 01       	movw	r24, r6
     262:	b2 01       	movw	r22, r4
     264:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__addsf3>
     268:	4b 01       	movw	r8, r22
     26a:	5c 01       	movw	r10, r24
     26c:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <myrobot+0x11>
     270:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <myrobot+0x12>
     274:	40 91 b9 02 	lds	r20, 0x02B9	; 0x8002b9 <myrobot+0x13>
     278:	50 91 ba 02 	lds	r21, 0x02BA	; 0x8002ba <myrobot+0x14>
     27c:	c7 01       	movw	r24, r14
     27e:	b6 01       	movw	r22, r12
     280:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__subsf3>
     284:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <myrobot+0x9>
     288:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <myrobot+0xa>
     28c:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <myrobot+0xb>
     290:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <myrobot+0xc>
     294:	0e 94 13 0b 	call	0x1626	; 0x1626 <__mulsf3>
     298:	9b 01       	movw	r18, r22
     29a:	ac 01       	movw	r20, r24
     29c:	c5 01       	movw	r24, r10
     29e:	b4 01       	movw	r22, r8
     2a0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__addsf3>
     2a4:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fixsfsi>
                // int adjustment = (myrobot.KP * error) + (myrobot.KD * (error - myrobot.lastError));

                // Store error for the next iteration
                myrobot.lastError = error;
     2a8:	c0 92 b7 02 	sts	0x02B7, r12	; 0x8002b7 <myrobot+0x11>
     2ac:	d0 92 b8 02 	sts	0x02B8, r13	; 0x8002b8 <myrobot+0x12>
     2b0:	e0 92 b9 02 	sts	0x02B9, r14	; 0x8002b9 <myrobot+0x13>
     2b4:	f0 92 ba 02 	sts	0x02BA, r15	; 0x8002ba <myrobot+0x14>

                // Adjust motors
                myrobot.lspeed = constrain((60 - adjustment), -100 , 100);
     2b8:	9e 01       	movw	r18, r28
     2ba:	26 1b       	sub	r18, r22
     2bc:	37 0b       	sbc	r19, r23
     2be:	25 36       	cpi	r18, 0x65	; 101
     2c0:	31 05       	cpc	r19, r1
     2c2:	14 f0       	brlt	.+4      	; 0x2c8 <Navig+0x1da>
     2c4:	24 e6       	ldi	r18, 0x64	; 100
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	2c 39       	cpi	r18, 0x9C	; 156
     2ca:	af ef       	ldi	r26, 0xFF	; 255
     2cc:	3a 07       	cpc	r19, r26
     2ce:	14 f4       	brge	.+4      	; 0x2d4 <Navig+0x1e6>
     2d0:	2c e9       	ldi	r18, 0x9C	; 156
     2d2:	3f ef       	ldi	r19, 0xFF	; 255
     2d4:	30 93 a9 02 	sts	0x02A9, r19	; 0x8002a9 <myrobot+0x3>
     2d8:	20 93 a8 02 	sts	0x02A8, r18	; 0x8002a8 <myrobot+0x2>
                myrobot.rspeed = constrain((60 + adjustment), -100 , 100);
     2dc:	64 5c       	subi	r22, 0xC4	; 196
     2de:	7f 4f       	sbci	r23, 0xFF	; 255
     2e0:	65 36       	cpi	r22, 0x65	; 101
     2e2:	71 05       	cpc	r23, r1
     2e4:	14 f0       	brlt	.+4      	; 0x2ea <Navig+0x1fc>
     2e6:	64 e6       	ldi	r22, 0x64	; 100
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	6c 39       	cpi	r22, 0x9C	; 156
     2ec:	bf ef       	ldi	r27, 0xFF	; 255
     2ee:	7b 07       	cpc	r23, r27
     2f0:	14 f4       	brge	.+4      	; 0x2f6 <Navig+0x208>
     2f2:	6c e9       	ldi	r22, 0x9C	; 156
     2f4:	7f ef       	ldi	r23, 0xFF	; 255
     2f6:	70 93 a7 02 	sts	0x02A7, r23	; 0x8002a7 <myrobot+0x1>
     2fa:	60 93 a6 02 	sts	0x02A6, r22	; 0x8002a6 <myrobot>
                

                myrobot.prevLeftSpeed = myrobot.lspeed;
     2fe:	30 93 c2 02 	sts	0x02C2, r19	; 0x8002c2 <myrobot+0x1c>
     302:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <myrobot+0x1b>
                myrobot.prevRightSpeed = myrobot.rspeed;
     306:	70 93 c4 02 	sts	0x02C4, r23	; 0x8002c4 <myrobot+0x1e>
     30a:	60 93 c3 02 	sts	0x02C3, r22	; 0x8002c3 <myrobot+0x1d>
     30e:	51 cf       	rjmp	.-350    	; 0x1b2 <Navig+0xc4>

                myrobot.KI = 0.0008; // 0.0008
            } else {
                // myrobot.KP = 0.045; 

                switch (sensorValue) {
     310:	88 ee       	ldi	r24, 0xE8	; 232
     312:	93 e0       	ldi	r25, 0x03	; 3
     314:	67 cf       	rjmp	.-306    	; 0x1e4 <Navig+0xf6>

00000316 <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    OS_ticks_init();                                        /* enable RTOS timer tick        */
     316:	0e 94 50 03 	call	0x6a0	; 0x6a0 <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /* Task function                 */
     31a:	22 e0       	ldi	r18, 0x02	; 2
     31c:	45 ea       	ldi	r20, 0xA5	; 165
     31e:	52 e0       	ldi	r21, 0x02	; 2
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	83 e5       	ldi	r24, 0x53	; 83
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 58 07 	call	0xeb0	; 0xeb0 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     32c:	23 e0       	ldi	r18, 0x03	; 3
     32e:	46 e4       	ldi	r20, 0x46	; 70
     330:	53 e0       	ldi	r21, 0x03	; 3
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	85 e6       	ldi	r24, 0x65	; 101
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /* stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /* priority of task              */

    OSTaskCreate(Navig,                                     /* Task function                 */
     33e:	24 e0       	ldi	r18, 0x04	; 4
     340:	46 e4       	ldi	r20, 0x46	; 70
     342:	54 e0       	ldi	r21, 0x04	; 4
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	87 e7       	ldi	r24, 0x77	; 119
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <OSTaskCreate>
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	45 e0       	ldi	r20, 0x05	; 5
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 a9 08 	call	0x1152	; 0x1152 <OSTimeDlyHMSM>
     35e:	f8 cf       	rjmp	.-16     	; 0x350 <TaskStart+0x3a>

00000360 <constrain>:
    // int prevSense;
    // int prev2Sense;
} myrobot;

int constrain(int value, int lowerBound, int upperBound) {
    if (value < lowerBound) {
     360:	86 17       	cp	r24, r22
     362:	97 07       	cpc	r25, r23
     364:	2c f0       	brlt	.+10     	; 0x370 <constrain+0x10>
     366:	bc 01       	movw	r22, r24
     368:	48 17       	cp	r20, r24
     36a:	59 07       	cpc	r21, r25
     36c:	0c f4       	brge	.+2      	; 0x370 <constrain+0x10>
     36e:	ba 01       	movw	r22, r20
        return upperBound;
    }
    else {
        return value;
    }
}
     370:	cb 01       	movw	r24, r22
     372:	08 95       	ret

00000374 <ADC_init>:
     374:	80 e4       	ldi	r24, 0x40	; 64
     376:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     37a:	86 e8       	ldi	r24, 0x86	; 134
     37c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     380:	08 95       	ret

00000382 <ADC_read>:
     382:	f8 94       	cli
     384:	80 64       	ori	r24, 0x40	; 64
     386:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     38a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     38e:	80 64       	ori	r24, 0x40	; 64
     390:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     394:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     398:	84 ff       	sbrs	r24, 4
     39a:	fc cf       	rjmp	.-8      	; 0x394 <ADC_read+0x12>
     39c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3a0:	80 61       	ori	r24, 0x10	; 16
     3a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3a6:	78 94       	sei
     3a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     3ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     3b0:	93 70       	andi	r25, 0x03	; 3
     3b2:	08 95       	ret

000003b4 <PWM8_write>:
     3b4:	81 11       	cpse	r24, r1
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <PWM8_write+0xe>
     3b8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3bc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     3c0:	08 95       	ret
     3c2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     3c6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     3ca:	08 95       	ret

000003cc <motor_init>:
     3cc:	8a b1       	in	r24, 0x0a	; 10
     3ce:	80 6f       	ori	r24, 0xF0	; 240
     3d0:	8a b9       	out	0x0a, r24	; 10
     3d2:	8b b1       	in	r24, 0x0b	; 11
     3d4:	8f 70       	andi	r24, 0x0F	; 15
     3d6:	8b b9       	out	0x0b, r24	; 11
     3d8:	81 ea       	ldi	r24, 0xA1	; 161
     3da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     3e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     3e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     3ec:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3f0:	a8 e8       	ldi	r26, 0x88	; 136
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	1c 92       	st	X, r1
     3f6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     3fa:	ea e8       	ldi	r30, 0x8A	; 138
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	10 82       	st	Z, r1
     400:	84 b1       	in	r24, 0x04	; 4
     402:	86 60       	ori	r24, 0x06	; 6
     404:	84 b9       	out	0x04, r24	; 4
     406:	11 96       	adiw	r26, 0x01	; 1
     408:	1c 92       	st	X, r1
     40a:	1e 92       	st	-X, r1
     40c:	11 82       	std	Z+1, r1	; 0x01
     40e:	10 82       	st	Z, r1
     410:	08 95       	ret

00000412 <motor_set_speed>:
     412:	77 ff       	sbrs	r23, 7
     414:	02 c0       	rjmp	.+4      	; 0x41a <motor_set_speed+0x8>
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	65 36       	cpi	r22, 0x65	; 101
     41c:	71 05       	cpc	r23, r1
     41e:	14 f0       	brlt	.+4      	; 0x424 <motor_set_speed+0x12>
     420:	64 e6       	ldi	r22, 0x64	; 100
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	9b 01       	movw	r18, r22
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	75 95       	asr	r23
     42c:	67 95       	ror	r22
     42e:	62 0f       	add	r22, r18
     430:	73 1f       	adc	r23, r19
     432:	81 11       	cpse	r24, r1
     434:	09 c0       	rjmp	.+18     	; 0x448 <motor_set_speed+0x36>
     436:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     43a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     43e:	70 93 48 04 	sts	0x0448, r23	; 0x800448 <rightWst+0x1>
     442:	60 93 47 04 	sts	0x0447, r22	; 0x800447 <rightWst>
     446:	08 95       	ret
     448:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     44c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     450:	70 93 4c 04 	sts	0x044C, r23	; 0x80044c <leftWst+0x1>
     454:	60 93 4b 04 	sts	0x044B, r22	; 0x80044b <leftWst>
     458:	08 95       	ret

0000045a <motor_set_dir>:
     45a:	cf 93       	push	r28
     45c:	c6 2f       	mov	r28, r22
     45e:	26 2f       	mov	r18, r22
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	81 11       	cpse	r24, r1
     464:	2b c0       	rjmp	.+86     	; 0x4bc <motor_set_dir+0x62>
     466:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <rightWst+0x2>
     46a:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <rightWst+0x3>
     46e:	82 17       	cp	r24, r18
     470:	93 07       	cpc	r25, r19
     472:	59 f0       	breq	.+22     	; 0x48a <motor_set_dir+0x30>
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 09 02 	call	0x412	; 0x412 <motor_set_speed>
     47e:	8f e9       	ldi	r24, 0x9F	; 159
     480:	9f e0       	ldi	r25, 0x0F	; 15
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <motor_set_dir+0x28>
     486:	00 c0       	rjmp	.+0      	; 0x488 <motor_set_dir+0x2e>
     488:	00 00       	nop
     48a:	c1 11       	cpse	r28, r1
     48c:	0e c0       	rjmp	.+28     	; 0x4aa <motor_set_dir+0x50>
     48e:	5e 98       	cbi	0x0b, 6	; 11
     490:	5f 9a       	sbi	0x0b, 7	; 11
     492:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <rightWst+0x3>
     496:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <rightWst+0x2>
     49a:	8f e3       	ldi	r24, 0x3F	; 63
     49c:	9c e9       	ldi	r25, 0x9C	; 156
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <motor_set_dir+0x44>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <motor_set_dir+0x4a>
     4a4:	00 00       	nop
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret
     4aa:	5e 9a       	sbi	0x0b, 6	; 11
     4ac:	5f 98       	cbi	0x0b, 7	; 11
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <rightWst+0x3>
     4b6:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <rightWst+0x2>
     4ba:	ef cf       	rjmp	.-34     	; 0x49a <motor_set_dir+0x40>
     4bc:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <leftWst+0x2>
     4c0:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <leftWst+0x3>
     4c4:	82 17       	cp	r24, r18
     4c6:	93 07       	cpc	r25, r19
     4c8:	59 f0       	breq	.+22     	; 0x4e0 <motor_set_dir+0x86>
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 09 02 	call	0x412	; 0x412 <motor_set_speed>
     4d4:	8f e9       	ldi	r24, 0x9F	; 159
     4d6:	9f e0       	ldi	r25, 0x0F	; 15
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <motor_set_dir+0x7e>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <motor_set_dir+0x84>
     4de:	00 00       	nop
     4e0:	c1 11       	cpse	r28, r1
     4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <motor_set_dir+0x98>
     4e4:	5c 9a       	sbi	0x0b, 4	; 11
     4e6:	5d 98       	cbi	0x0b, 5	; 11
     4e8:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <leftWst+0x3>
     4ec:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <leftWst+0x2>
     4f0:	d4 cf       	rjmp	.-88     	; 0x49a <motor_set_dir+0x40>
     4f2:	5c 98       	cbi	0x0b, 4	; 11
     4f4:	5d 9a       	sbi	0x0b, 5	; 11
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <leftWst+0x3>
     4fe:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <leftWst+0x2>
     502:	cb cf       	rjmp	.-106    	; 0x49a <motor_set_dir+0x40>

00000504 <robo_motorSpeed>:
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	ec 01       	movw	r28, r24
     50e:	8b 01       	movw	r16, r22
     510:	97 ff       	sbrs	r25, 7
     512:	1c c0       	rjmp	.+56     	; 0x54c <robo_motorSpeed+0x48>
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 2d 02 	call	0x45a	; 0x45a <motor_set_dir>
     51c:	d1 95       	neg	r29
     51e:	c1 95       	neg	r28
     520:	d1 09       	sbc	r29, r1
     522:	17 ff       	sbrs	r17, 7
     524:	18 c0       	rjmp	.+48     	; 0x556 <robo_motorSpeed+0x52>
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 2d 02 	call	0x45a	; 0x45a <motor_set_dir>
     52e:	11 95       	neg	r17
     530:	01 95       	neg	r16
     532:	11 09       	sbc	r17, r1
     534:	b8 01       	movw	r22, r16
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 09 02 	call	0x412	; 0x412 <motor_set_speed>
     53c:	be 01       	movw	r22, r28
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	0c 94 09 02 	jmp	0x412	; 0x412 <motor_set_speed>
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	0e 94 2d 02 	call	0x45a	; 0x45a <motor_set_dir>
     554:	e6 cf       	rjmp	.-52     	; 0x522 <robo_motorSpeed+0x1e>
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 2d 02 	call	0x45a	; 0x45a <motor_set_dir>
     55e:	ea cf       	rjmp	.-44     	; 0x534 <robo_motorSpeed+0x30>

00000560 <USART0_init>:
     560:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     564:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     568:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     56c:	88 e1       	ldi	r24, 0x18	; 24
     56e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     572:	86 e0       	ldi	r24, 0x06	; 6
     574:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     578:	08 95       	ret

0000057a <cputchar>:
     57a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     57e:	95 ff       	sbrs	r25, 5
     580:	fc cf       	rjmp	.-8      	; 0x57a <cputchar>
     582:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     586:	08 95       	ret

00000588 <cgetchar>:
     588:	cf 93       	push	r28
     58a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     58e:	87 ff       	sbrs	r24, 7
     590:	fc cf       	rjmp	.-8      	; 0x58a <cgetchar+0x2>
     592:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     596:	8c 2f       	mov	r24, r28
     598:	0e 94 bd 02 	call	0x57a	; 0x57a <cputchar>
     59c:	8c 2f       	mov	r24, r28
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <cputs>:
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
     5a8:	89 91       	ld	r24, Y+
     5aa:	81 11       	cpse	r24, r1
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <cputs+0x12>
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret
     5b4:	0e 94 bd 02 	call	0x57a	; 0x57a <cputchar>
     5b8:	f7 cf       	rjmp	.-18     	; 0x5a8 <cputs+0x6>

000005ba <robo_proxSensor>:
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 c1 01 	call	0x382	; 0x382 <ADC_read>
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	84 36       	cpi	r24, 0x64	; 100
     5c6:	91 05       	cpc	r25, r1
     5c8:	10 f0       	brcs	.+4      	; 0x5ce <robo_proxSensor+0x14>
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	c9 01       	movw	r24, r18
     5d0:	08 95       	ret

000005d2 <robo_lightSensor>:
     5d2:	84 e0       	ldi	r24, 0x04	; 4
     5d4:	0e 94 c1 01 	call	0x382	; 0x382 <ADC_read>
     5d8:	2b ef       	ldi	r18, 0xFB	; 251
     5da:	ac 01       	movw	r20, r24
     5dc:	24 03       	mulsu	r18, r20
     5de:	c0 01       	movw	r24, r0
     5e0:	25 9f       	mul	r18, r21
     5e2:	90 0d       	add	r25, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	85 50       	subi	r24, 0x05	; 5
     5e8:	9c 4e       	sbci	r25, 0xEC	; 236
     5ea:	63 e3       	ldi	r22, 0x33	; 51
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	0e 94 92 09 	call	0x1324	; 0x1324 <__divmodhi4>
     5f2:	cb 01       	movw	r24, r22
     5f4:	65 36       	cpi	r22, 0x65	; 101
     5f6:	71 05       	cpc	r23, r1
     5f8:	14 f0       	brlt	.+4      	; 0x5fe <robo_lightSensor+0x2c>
     5fa:	84 e6       	ldi	r24, 0x64	; 100
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	08 95       	ret

00000600 <robo_lineSensor>:
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	c0 e0       	ldi	r28, 0x00	; 0
     606:	d1 e0       	ldi	r29, 0x01	; 1
     608:	cc 0f       	add	r28, r28
     60a:	8d 2f       	mov	r24, r29
     60c:	0e 94 c1 01 	call	0x382	; 0x382 <ADC_read>
     610:	8c 32       	cpi	r24, 0x2C	; 44
     612:	91 40       	sbci	r25, 0x01	; 1
     614:	0c f4       	brge	.+2      	; 0x618 <robo_lineSensor+0x18>
     616:	c1 60       	ori	r28, 0x01	; 1
     618:	df 5f       	subi	r29, 0xFF	; 255
     61a:	d4 30       	cpi	r29, 0x04	; 4
     61c:	a9 f7       	brne	.-22     	; 0x608 <robo_lineSensor+0x8>
     61e:	8c 2f       	mov	r24, r28
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <robo_bumpSensorR>:
     628:	83 b1       	in	r24, 0x03	; 3
     62a:	82 95       	swap	r24
     62c:	8f 70       	andi	r24, 0x0F	; 15
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	89 27       	eor	r24, r25
     632:	81 70       	andi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	08 95       	ret

00000638 <robo_bumpSensorL>:
     638:	83 b1       	in	r24, 0x03	; 3
     63a:	86 95       	lsr	r24
     63c:	86 95       	lsr	r24
     63e:	86 95       	lsr	r24
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	89 27       	eor	r24, r25
     644:	81 70       	andi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	08 95       	ret

0000064a <robo_Honk>:
     64a:	5b 9a       	sbi	0x0b, 3	; 11
     64c:	2f ef       	ldi	r18, 0xFF	; 255
     64e:	85 ea       	ldi	r24, 0xA5	; 165
     650:	9e e0       	ldi	r25, 0x0E	; 14
     652:	21 50       	subi	r18, 0x01	; 1
     654:	80 40       	sbci	r24, 0x00	; 0
     656:	90 40       	sbci	r25, 0x00	; 0
     658:	e1 f7       	brne	.-8      	; 0x652 <robo_Honk+0x8>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <robo_Honk+0x12>
     65c:	00 00       	nop
     65e:	5b 98       	cbi	0x0b, 3	; 11
     660:	2f ef       	ldi	r18, 0xFF	; 255
     662:	85 ea       	ldi	r24, 0xA5	; 165
     664:	9e e0       	ldi	r25, 0x0E	; 14
     666:	21 50       	subi	r18, 0x01	; 1
     668:	80 40       	sbci	r24, 0x00	; 0
     66a:	90 40       	sbci	r25, 0x00	; 0
     66c:	e1 f7       	brne	.-8      	; 0x666 <robo_Honk+0x1c>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <robo_Honk+0x26>
     670:	00 00       	nop
     672:	08 95       	ret

00000674 <robo_checkBattery>:
     674:	85 e0       	ldi	r24, 0x05	; 5
     676:	0e 94 c1 01 	call	0x382	; 0x382 <ADC_read>
     67a:	84 3f       	cpi	r24, 0xF4	; 244
     67c:	91 40       	sbci	r25, 0x01	; 1
     67e:	10 f4       	brcc	.+4      	; 0x684 <robo_checkBattery+0x10>
     680:	28 9a       	sbi	0x05, 0	; 5
     682:	08 95       	ret
     684:	28 98       	cbi	0x05, 0	; 5
     686:	08 95       	ret

00000688 <robo_goPressed>:
     688:	89 b1       	in	r24, 0x09	; 9
     68a:	82 fb       	bst	r24, 2
     68c:	88 27       	eor	r24, r24
     68e:	80 f9       	bld	r24, 0
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	89 27       	eor	r24, r25
     694:	08 95       	ret

00000696 <robo_wait4goPress>:
     696:	0e 94 44 03 	call	0x688	; 0x688 <robo_goPressed>
     69a:	88 23       	and	r24, r24
     69c:	e1 f3       	breq	.-8      	; 0x696 <robo_wait4goPress>
     69e:	08 95       	ret

000006a0 <OS_ticks_init>:
     6a0:	f8 94       	cli
     6a2:	85 e0       	ldi	r24, 0x05	; 5
     6a4:	85 bd       	out	0x25, r24	; 37
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     6ac:	84 e6       	ldi	r24, 0x64	; 100
     6ae:	86 bd       	out	0x26, r24	; 38
     6b0:	78 94       	sei
     6b2:	08 95       	ret

000006b4 <HAL_init>:
     6b4:	87 e6       	ldi	r24, 0x67	; 103
     6b6:	0e 94 b0 02 	call	0x560	; 0x560 <USART0_init>
     6ba:	0c 94 ba 01 	jmp	0x374	; 0x374 <ADC_init>

000006be <robo_Setup>:
     6be:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <HAL_init>
     6c2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <motor_init>
     6c6:	53 9a       	sbi	0x0a, 3	; 10
     6c8:	5b 98       	cbi	0x0b, 3	; 11
     6ca:	20 9a       	sbi	0x04, 0	; 4
     6cc:	52 98       	cbi	0x0a, 2	; 10
     6ce:	5a 9a       	sbi	0x0b, 2	; 11
     6d0:	24 98       	cbi	0x04, 4	; 4
     6d2:	23 98       	cbi	0x04, 3	; 4
     6d4:	85 b1       	in	r24, 0x05	; 5
     6d6:	88 61       	ori	r24, 0x18	; 24
     6d8:	85 b9       	out	0x05, r24	; 5
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 2d 02 	call	0x45a	; 0x45a <motor_set_dir>
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 2d 02 	call	0x45a	; 0x45a <motor_set_dir>
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0c 94 82 02 	jmp	0x504	; 0x504 <robo_motorSpeed>

000006f6 <cprintf>:
     6f6:	4f 92       	push	r4
     6f8:	5f 92       	push	r5
     6fa:	6f 92       	push	r6
     6fc:	7f 92       	push	r7
     6fe:	8f 92       	push	r8
     700:	9f 92       	push	r9
     702:	af 92       	push	r10
     704:	bf 92       	push	r11
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	de 01       	movw	r26, r28
     71c:	53 96       	adiw	r26, 0x13	; 19
     71e:	ed 91       	ld	r30, X+
     720:	fd 91       	ld	r31, X+
     722:	8d 01       	movw	r16, r26
     724:	5a e0       	ldi	r21, 0x0A	; 10
     726:	65 2e       	mov	r6, r21
     728:	71 2c       	mov	r7, r1
     72a:	80 81       	ld	r24, Z
     72c:	85 32       	cpi	r24, 0x25	; 37
     72e:	81 f4       	brne	.+32     	; 0x750 <cprintf+0x5a>
     730:	5f 01       	movw	r10, r30
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	a8 0e       	add	r10, r24
     736:	b1 1c       	adc	r11, r1
     738:	81 81       	ldd	r24, Z+1	; 0x01
     73a:	84 36       	cpi	r24, 0x64	; 100
     73c:	09 f4       	brne	.+2      	; 0x740 <cprintf+0x4a>
     73e:	50 c0       	rjmp	.+160    	; 0x7e0 <cprintf+0xea>
     740:	90 f4       	brcc	.+36     	; 0x766 <cprintf+0x70>
     742:	83 36       	cpi	r24, 0x63	; 99
     744:	61 f4       	brne	.+24     	; 0x75e <cprintf+0x68>
     746:	f8 01       	movw	r30, r16
     748:	80 81       	ld	r24, Z
     74a:	0e 5f       	subi	r16, 0xFE	; 254
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	07 c0       	rjmp	.+14     	; 0x75e <cprintf+0x68>
     750:	88 23       	and	r24, r24
     752:	09 f4       	brne	.+2      	; 0x756 <cprintf+0x60>
     754:	5d c0       	rjmp	.+186    	; 0x810 <cprintf+0x11a>
     756:	5f 01       	movw	r10, r30
     758:	9f ef       	ldi	r25, 0xFF	; 255
     75a:	a9 1a       	sub	r10, r25
     75c:	b9 0a       	sbc	r11, r25
     75e:	0e 94 bd 02 	call	0x57a	; 0x57a <cputchar>
     762:	f5 01       	movw	r30, r10
     764:	e2 cf       	rjmp	.-60     	; 0x72a <cprintf+0x34>
     766:	83 37       	cpi	r24, 0x73	; 115
     768:	71 f1       	breq	.+92     	; 0x7c6 <cprintf+0xd0>
     76a:	30 e1       	ldi	r19, 0x10	; 16
     76c:	83 2e       	mov	r8, r19
     76e:	91 2c       	mov	r9, r1
     770:	e1 2c       	mov	r14, r1
     772:	40 e1       	ldi	r20, 0x10	; 16
     774:	f4 2e       	mov	r15, r20
     776:	88 37       	cpi	r24, 0x78	; 120
     778:	91 f7       	brne	.-28     	; 0x75e <cprintf+0x68>
     77a:	f8 01       	movw	r30, r16
     77c:	c0 80       	ld	r12, Z
     77e:	d1 80       	ldd	r13, Z+1	; 0x01
     780:	0e 5f       	subi	r16, 0xFE	; 254
     782:	1f 4f       	sbci	r17, 0xFF	; 255
     784:	84 36       	cpi	r24, 0x64	; 100
     786:	59 f4       	brne	.+22     	; 0x79e <cprintf+0xa8>
     788:	d7 fe       	sbrs	r13, 7
     78a:	06 c0       	rjmp	.+12     	; 0x798 <cprintf+0xa2>
     78c:	d1 94       	neg	r13
     78e:	c1 94       	neg	r12
     790:	d1 08       	sbc	r13, r1
     792:	8d e2       	ldi	r24, 0x2D	; 45
     794:	0e 94 bd 02 	call	0x57a	; 0x57a <cputchar>
     798:	ce 14       	cp	r12, r14
     79a:	df 04       	cpc	r13, r15
     79c:	48 f1       	brcs	.+82     	; 0x7f0 <cprintf+0xfa>
     79e:	c6 01       	movw	r24, r12
     7a0:	b7 01       	movw	r22, r14
     7a2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodhi4>
     7a6:	2c 01       	movw	r4, r24
     7a8:	6c 5e       	subi	r22, 0xEC	; 236
     7aa:	7d 4f       	sbci	r23, 0xFD	; 253
     7ac:	fb 01       	movw	r30, r22
     7ae:	80 81       	ld	r24, Z
     7b0:	0e 94 bd 02 	call	0x57a	; 0x57a <cputchar>
     7b4:	62 01       	movw	r12, r4
     7b6:	c7 01       	movw	r24, r14
     7b8:	b4 01       	movw	r22, r8
     7ba:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodhi4>
     7be:	7b 01       	movw	r14, r22
     7c0:	67 2b       	or	r22, r23
     7c2:	69 f7       	brne	.-38     	; 0x79e <cprintf+0xa8>
     7c4:	ce cf       	rjmp	.-100    	; 0x762 <cprintf+0x6c>
     7c6:	f8 01       	movw	r30, r16
     7c8:	e0 80       	ld	r14, Z
     7ca:	f1 80       	ldd	r15, Z+1	; 0x01
     7cc:	0e 5f       	subi	r16, 0xFE	; 254
     7ce:	1f 4f       	sbci	r17, 0xFF	; 255
     7d0:	f7 01       	movw	r30, r14
     7d2:	81 91       	ld	r24, Z+
     7d4:	7f 01       	movw	r14, r30
     7d6:	88 23       	and	r24, r24
     7d8:	21 f2       	breq	.-120    	; 0x762 <cprintf+0x6c>
     7da:	0e 94 bd 02 	call	0x57a	; 0x57a <cputchar>
     7de:	f8 cf       	rjmp	.-16     	; 0x7d0 <cprintf+0xda>
     7e0:	9a e0       	ldi	r25, 0x0A	; 10
     7e2:	89 2e       	mov	r8, r25
     7e4:	91 2c       	mov	r9, r1
     7e6:	20 e1       	ldi	r18, 0x10	; 16
     7e8:	e2 2e       	mov	r14, r18
     7ea:	27 e2       	ldi	r18, 0x27	; 39
     7ec:	f2 2e       	mov	r15, r18
     7ee:	c5 cf       	rjmp	.-118    	; 0x77a <cprintf+0x84>
     7f0:	c7 01       	movw	r24, r14
     7f2:	b3 01       	movw	r22, r6
     7f4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodhi4>
     7f8:	7b 01       	movw	r14, r22
     7fa:	62 30       	cpi	r22, 0x02	; 2
     7fc:	71 05       	cpc	r23, r1
     7fe:	60 f6       	brcc	.-104    	; 0x798 <cprintf+0xa2>
     800:	c6 01       	movw	r24, r12
     802:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodhi4>
     806:	fb 01       	movw	r30, r22
     808:	ec 5e       	subi	r30, 0xEC	; 236
     80a:	fd 4f       	sbci	r31, 0xFD	; 253
     80c:	80 81       	ld	r24, Z
     80e:	a7 cf       	rjmp	.-178    	; 0x75e <cprintf+0x68>
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	bf 90       	pop	r11
     826:	af 90       	pop	r10
     828:	9f 90       	pop	r9
     82a:	8f 90       	pop	r8
     82c:	7f 90       	pop	r7
     82e:	6f 90       	pop	r6
     830:	5f 90       	pop	r5
     832:	4f 90       	pop	r4
     834:	08 95       	ret

00000836 <OSStartHighRdy>:
     836:	00 91 50 04 	lds	r16, 0x0450	; 0x800450 <OSRunning>
     83a:	03 95       	inc	r16
     83c:	00 93 50 04 	sts	0x0450, r16	; 0x800450 <OSRunning>
     840:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <OSTCBHighRdy>
     844:	f0 91 61 04 	lds	r31, 0x0461	; 0x800461 <OSTCBHighRdy+0x1>
     848:	c1 91       	ld	r28, Z+
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	d1 91       	ld	r29, Z+
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f 91       	pop	r16
     852:	0f bf       	out	0x3f, r16	; 63
     854:	ff 91       	pop	r31
     856:	ef 91       	pop	r30
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	bf 91       	pop	r27
     85e:	af 91       	pop	r26
     860:	9f 91       	pop	r25
     862:	8f 91       	pop	r24
     864:	7f 91       	pop	r23
     866:	6f 91       	pop	r22
     868:	5f 91       	pop	r21
     86a:	4f 91       	pop	r20
     86c:	3f 91       	pop	r19
     86e:	2f 91       	pop	r18
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	9f 90       	pop	r9
     882:	8f 90       	pop	r8
     884:	7f 90       	pop	r7
     886:	6f 90       	pop	r6
     888:	5f 90       	pop	r5
     88a:	4f 90       	pop	r4
     88c:	3f 90       	pop	r3
     88e:	2f 90       	pop	r2
     890:	1f 90       	pop	r1
     892:	0f 90       	pop	r0
     894:	08 95       	ret

00000896 <OSCtxSw>:
     896:	0f 92       	push	r0
     898:	1f 92       	push	r1
     89a:	2f 92       	push	r2
     89c:	3f 92       	push	r3
     89e:	4f 92       	push	r4
     8a0:	5f 92       	push	r5
     8a2:	6f 92       	push	r6
     8a4:	7f 92       	push	r7
     8a6:	8f 92       	push	r8
     8a8:	9f 92       	push	r9
     8aa:	af 92       	push	r10
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	ef 93       	push	r30
     8d4:	ff 93       	push	r31
     8d6:	0f b7       	in	r16, 0x3f	; 63
     8d8:	0f 93       	push	r16
     8da:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <OSTCBCur>
     8de:	f0 91 69 04 	lds	r31, 0x0469	; 0x800469 <OSTCBCur+0x1>
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	c1 93       	st	Z+, r28
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	d1 93       	st	Z+, r29
     8ea:	00 91 55 04 	lds	r16, 0x0455	; 0x800455 <OSPrioHighRdy>
     8ee:	00 93 56 04 	sts	0x0456, r16	; 0x800456 <OSPrioCur>
     8f2:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <OSTCBHighRdy>
     8f6:	f0 91 61 04 	lds	r31, 0x0461	; 0x800461 <OSTCBHighRdy+0x1>
     8fa:	e0 93 68 04 	sts	0x0468, r30	; 0x800468 <OSTCBCur>
     8fe:	f0 93 69 04 	sts	0x0469, r31	; 0x800469 <OSTCBCur+0x1>
     902:	c1 91       	ld	r28, Z+
     904:	cd bf       	out	0x3d, r28	; 61
     906:	d1 91       	ld	r29, Z+
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f 91       	pop	r16
     90c:	0f bf       	out	0x3f, r16	; 63
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	9f 90       	pop	r9
     93c:	8f 90       	pop	r8
     93e:	7f 90       	pop	r7
     940:	6f 90       	pop	r6
     942:	5f 90       	pop	r5
     944:	4f 90       	pop	r4
     946:	3f 90       	pop	r3
     948:	2f 90       	pop	r2
     94a:	1f 90       	pop	r1
     94c:	0f 90       	pop	r0
     94e:	08 95       	ret

00000950 <OSIntCtxSw>:
     950:	00 91 55 04 	lds	r16, 0x0455	; 0x800455 <OSPrioHighRdy>
     954:	00 93 56 04 	sts	0x0456, r16	; 0x800456 <OSPrioCur>
     958:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <OSTCBHighRdy>
     95c:	f0 91 61 04 	lds	r31, 0x0461	; 0x800461 <OSTCBHighRdy+0x1>
     960:	e0 93 68 04 	sts	0x0468, r30	; 0x800468 <OSTCBCur>
     964:	f0 93 69 04 	sts	0x0469, r31	; 0x800469 <OSTCBCur+0x1>
     968:	c1 91       	ld	r28, Z+
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	d1 91       	ld	r29, Z+
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f 91       	pop	r16
     972:	0f bf       	out	0x3f, r16	; 63
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	7f 90       	pop	r7
     9a6:	6f 90       	pop	r6
     9a8:	5f 90       	pop	r5
     9aa:	4f 90       	pop	r4
     9ac:	3f 90       	pop	r3
     9ae:	2f 90       	pop	r2
     9b0:	1f 90       	pop	r1
     9b2:	0f 90       	pop	r0
     9b4:	08 95       	ret

000009b6 <OSTickISR>:
     9b6:	0f 92       	push	r0
     9b8:	1f 92       	push	r1
     9ba:	2f 92       	push	r2
     9bc:	3f 92       	push	r3
     9be:	4f 92       	push	r4
     9c0:	5f 92       	push	r5
     9c2:	6f 92       	push	r6
     9c4:	7f 92       	push	r7
     9c6:	8f 92       	push	r8
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
     9f6:	0f b7       	in	r16, 0x3f	; 63
     9f8:	00 68       	ori	r16, 0x80	; 128
     9fa:	0f 93       	push	r16
     9fc:	00 91 67 04 	lds	r16, 0x0467	; 0x800467 <OSIntNesting>
     a00:	03 95       	inc	r16
     a02:	00 93 67 04 	sts	0x0467, r16	; 0x800467 <OSIntNesting>
     a06:	01 30       	cpi	r16, 0x01	; 1
     a08:	41 f4       	brne	.+16     	; 0xa1a <_not_first_int>
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <OSTCBCur>
     a12:	f0 91 69 04 	lds	r31, 0x0469	; 0x800469 <OSTCBCur+0x1>
     a16:	c1 93       	st	Z+, r28
     a18:	d1 93       	st	Z+, r29

00000a1a <_not_first_int>:
     a1a:	04 e6       	ldi	r16, 0x64	; 100
     a1c:	06 bd       	out	0x26, r16	; 38
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	1f 2e       	mov	r1, r31
     a22:	78 94       	sei
     a24:	0e 94 3e 06 	call	0xc7c	; 0xc7c <OSTimeTick>
     a28:	00 00       	nop
     a2a:	0e 94 b1 05 	call	0xb62	; 0xb62 <OSIntExit>
     a2e:	0f 91       	pop	r16
     a30:	0f bf       	out	0x3f, r16	; 63
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	bf 91       	pop	r27
     a3c:	af 91       	pop	r26
     a3e:	9f 91       	pop	r25
     a40:	8f 91       	pop	r24
     a42:	7f 91       	pop	r23
     a44:	6f 91       	pop	r22
     a46:	5f 91       	pop	r21
     a48:	4f 91       	pop	r20
     a4a:	3f 91       	pop	r19
     a4c:	2f 91       	pop	r18
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	af 90       	pop	r10
     a5e:	9f 90       	pop	r9
     a60:	8f 90       	pop	r8
     a62:	7f 90       	pop	r7
     a64:	6f 90       	pop	r6
     a66:	5f 90       	pop	r5
     a68:	4f 90       	pop	r4
     a6a:	3f 90       	pop	r3
     a6c:	2f 90       	pop	r2
     a6e:	1f 90       	pop	r1
     a70:	0f 90       	pop	r0
     a72:	08 95       	ret

00000a74 <OSTaskStkInit>:
     a74:	fa 01       	movw	r30, r20
     a76:	80 83       	st	Z, r24
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	90 83       	st	Z, r25
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	10 82       	st	Z, r1
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	10 82       	st	Z, r1
     a84:	31 97       	sbiw	r30, 0x01	; 1
     a86:	10 82       	st	Z, r1
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	10 82       	st	Z, r1
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	10 82       	st	Z, r1
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	10 82       	st	Z, r1
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	10 82       	st	Z, r1
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	10 82       	st	Z, r1
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	10 82       	st	Z, r1
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	10 82       	st	Z, r1
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	10 82       	st	Z, r1
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	10 82       	st	Z, r1
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	10 82       	st	Z, r1
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	10 82       	st	Z, r1
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	10 82       	st	Z, r1
     ab8:	31 97       	sbiw	r30, 0x01	; 1
     aba:	10 82       	st	Z, r1
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	10 82       	st	Z, r1
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	10 82       	st	Z, r1
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	10 82       	st	Z, r1
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	10 82       	st	Z, r1
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	10 82       	st	Z, r1
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	10 82       	st	Z, r1
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	10 82       	st	Z, r1
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	10 82       	st	Z, r1
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	60 83       	st	Z, r22
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	70 83       	st	Z, r23
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	10 82       	st	Z, r1
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	10 82       	st	Z, r1
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	10 82       	st	Z, r1
     af0:	31 97       	sbiw	r30, 0x01	; 1
     af2:	10 82       	st	Z, r1
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	10 82       	st	Z, r1
     af8:	31 97       	sbiw	r30, 0x01	; 1
     afa:	10 82       	st	Z, r1
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	80 e8       	ldi	r24, 0x80	; 128
     b00:	80 83       	st	Z, r24
     b02:	ca 01       	movw	r24, r20
     b04:	83 97       	sbiw	r24, 0x23	; 35
     b06:	08 95       	ret

00000b08 <OSTaskCreateHook>:
     b08:	08 95       	ret

00000b0a <OSTaskDelHook>:
     b0a:	08 95       	ret

00000b0c <OSTaskSwHook>:
     b0c:	08 95       	ret

00000b0e <OSTaskStatHook>:
     b0e:	08 95       	ret

00000b10 <OSTimeTickHook>:
     b10:	08 95       	ret

00000b12 <OSInitHookBegin>:
     b12:	08 95       	ret

00000b14 <OSInitHookEnd>:
     b14:	08 95       	ret

00000b16 <OSTaskIdleHook>:
     b16:	08 95       	ret

00000b18 <OSTCBInitHook>:
     b18:	08 95       	ret

00000b1a <OS_TaskIdle>:
     b1a:	f8 94       	cli
     b1c:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <OSIdleCtr>
     b20:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <OSIdleCtr+0x1>
     b24:	a0 91 53 04 	lds	r26, 0x0453	; 0x800453 <OSIdleCtr+0x2>
     b28:	b0 91 54 04 	lds	r27, 0x0454	; 0x800454 <OSIdleCtr+0x3>
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	a1 1d       	adc	r26, r1
     b30:	b1 1d       	adc	r27, r1
     b32:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <OSIdleCtr>
     b36:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <OSIdleCtr+0x1>
     b3a:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <OSIdleCtr+0x2>
     b3e:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <OSIdleCtr+0x3>
     b42:	78 94       	sei
     b44:	0e 94 8b 05 	call	0xb16	; 0xb16 <OSTaskIdleHook>
     b48:	e8 cf       	rjmp	.-48     	; 0xb1a <OS_TaskIdle>

00000b4a <OSIntEnter>:
     b4a:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <OSRunning>
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	39 f4       	brne	.+14     	; 0xb60 <OSIntEnter+0x16>
     b52:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <OSIntNesting>
     b56:	8f 3f       	cpi	r24, 0xFF	; 255
     b58:	19 f0       	breq	.+6      	; 0xb60 <OSIntEnter+0x16>
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <OSIntNesting>
     b60:	08 95       	ret

00000b62 <OSIntExit>:
     b62:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <OSRunning>
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	09 f0       	breq	.+2      	; 0xb6c <OSIntExit+0xa>
     b6a:	4c c0       	rjmp	.+152    	; 0xc04 <OSIntExit+0xa2>
     b6c:	f8 94       	cli
     b6e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <OSIntNesting>
     b72:	88 23       	and	r24, r24
     b74:	19 f0       	breq	.+6      	; 0xb7c <OSIntExit+0x1a>
     b76:	81 50       	subi	r24, 0x01	; 1
     b78:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <OSIntNesting>
     b7c:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <OSIntNesting>
     b80:	81 11       	cpse	r24, r1
     b82:	3f c0       	rjmp	.+126    	; 0xc02 <OSIntExit+0xa0>
     b84:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <OSLockNesting>
     b88:	81 11       	cpse	r24, r1
     b8a:	3b c0       	rjmp	.+118    	; 0xc02 <OSIntExit+0xa0>
     b8c:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <OSRdyGrp>
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	e0 50       	subi	r30, 0x00	; 0
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	e0 81       	ld	r30, Z
     b98:	e0 93 66 04 	sts	0x0466, r30	; 0x800466 <OSIntExitY>
     b9c:	ae 2f       	mov	r26, r30
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ad 59       	subi	r26, 0x9D	; 157
     ba2:	bb 4f       	sbci	r27, 0xFB	; 251
     ba4:	ac 91       	ld	r26, X
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	a0 50       	subi	r26, 0x00	; 0
     baa:	bf 4f       	sbci	r27, 0xFF	; 255
     bac:	ee 0f       	add	r30, r30
     bae:	ee 0f       	add	r30, r30
     bb0:	ee 0f       	add	r30, r30
     bb2:	8c 91       	ld	r24, X
     bb4:	e8 0f       	add	r30, r24
     bb6:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <OSPrioHighRdy>
     bba:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <OSPrioCur>
     bbe:	e8 17       	cp	r30, r24
     bc0:	01 f1       	breq	.+64     	; 0xc02 <OSIntExit+0xa0>
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	e7 55       	subi	r30, 0x57	; 87
     bca:	fa 4f       	sbci	r31, 0xFA	; 250
     bcc:	80 81       	ld	r24, Z
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <OSTCBHighRdy+0x1>
     bd4:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <OSTCBHighRdy>
     bd8:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <OSCtxSwCtr>
     bdc:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <OSCtxSwCtr+0x1>
     be0:	a0 91 5b 04 	lds	r26, 0x045B	; 0x80045b <OSCtxSwCtr+0x2>
     be4:	b0 91 5c 04 	lds	r27, 0x045C	; 0x80045c <OSCtxSwCtr+0x3>
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	a1 1d       	adc	r26, r1
     bec:	b1 1d       	adc	r27, r1
     bee:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <OSCtxSwCtr>
     bf2:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <OSCtxSwCtr+0x1>
     bf6:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <OSCtxSwCtr+0x2>
     bfa:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <OSCtxSwCtr+0x3>
     bfe:	0e 94 a8 04 	call	0x950	; 0x950 <OSIntCtxSw>
     c02:	78 94       	sei
     c04:	08 95       	ret

00000c06 <OSSchedLock>:
     c06:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <OSRunning>
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	49 f4       	brne	.+18     	; 0xc20 <OSSchedLock+0x1a>
     c0e:	f8 94       	cli
     c10:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <OSLockNesting>
     c14:	8f 3f       	cpi	r24, 0xFF	; 255
     c16:	19 f0       	breq	.+6      	; 0xc1e <OSSchedLock+0x18>
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <OSLockNesting>
     c1e:	78 94       	sei
     c20:	08 95       	ret

00000c22 <OSStart>:
     c22:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <OSRunning>
     c26:	81 11       	cpse	r24, r1
     c28:	28 c0       	rjmp	.+80     	; 0xc7a <OSStart+0x58>
     c2a:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <OSRdyGrp>
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	e0 50       	subi	r30, 0x00	; 0
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	e0 81       	ld	r30, Z
     c36:	ae 2f       	mov	r26, r30
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ad 59       	subi	r26, 0x9D	; 157
     c3c:	bb 4f       	sbci	r27, 0xFB	; 251
     c3e:	ac 91       	ld	r26, X
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	a0 50       	subi	r26, 0x00	; 0
     c44:	bf 4f       	sbci	r27, 0xFF	; 255
     c46:	ee 0f       	add	r30, r30
     c48:	ee 0f       	add	r30, r30
     c4a:	ee 0f       	add	r30, r30
     c4c:	8c 91       	ld	r24, X
     c4e:	e8 0f       	add	r30, r24
     c50:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <OSPrioHighRdy>
     c54:	e0 93 56 04 	sts	0x0456, r30	; 0x800456 <OSPrioCur>
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	e7 55       	subi	r30, 0x57	; 87
     c60:	fa 4f       	sbci	r31, 0xFA	; 250
     c62:	80 81       	ld	r24, Z
     c64:	91 81       	ldd	r25, Z+1	; 0x01
     c66:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <OSTCBHighRdy+0x1>
     c6a:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <OSTCBHighRdy>
     c6e:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <OSTCBCur+0x1>
     c72:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <OSTCBCur>
     c76:	0c 94 1b 04 	jmp	0x836	; 0x836 <OSStartHighRdy>
     c7a:	08 95       	ret

00000c7c <OSTimeTick>:
     c7c:	0e 94 88 05 	call	0xb10	; 0xb10 <OSTimeTickHook>
     c80:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <OSRunning>
     c84:	e0 91 57 04 	lds	r30, 0x0457	; 0x800457 <OSTCBList>
     c88:	f0 91 58 04 	lds	r31, 0x0458	; 0x800458 <OSTCBList+0x1>
     c8c:	21 e0       	ldi	r18, 0x01	; 1
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	01 f1       	breq	.+64     	; 0xcd4 <OSTimeTick+0x58>
     c94:	08 95       	ret
     c96:	f8 94       	cli
     c98:	86 81       	ldd	r24, Z+6	; 0x06
     c9a:	97 81       	ldd	r25, Z+7	; 0x07
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	b1 f0       	breq	.+44     	; 0xccc <OSTimeTick+0x50>
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	97 83       	std	Z+7, r25	; 0x07
     ca4:	86 83       	std	Z+6, r24	; 0x06
     ca6:	89 2b       	or	r24, r25
     ca8:	89 f4       	brne	.+34     	; 0xccc <OSTimeTick+0x50>
     caa:	80 85       	ldd	r24, Z+8	; 0x08
     cac:	83 fd       	sbrc	r24, 3
     cae:	16 c0       	rjmp	.+44     	; 0xcdc <OSTimeTick+0x60>
     cb0:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <OSRdyGrp>
     cb4:	95 85       	ldd	r25, Z+13	; 0x0d
     cb6:	89 2b       	or	r24, r25
     cb8:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <OSRdyGrp>
     cbc:	a3 85       	ldd	r26, Z+11	; 0x0b
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ad 59       	subi	r26, 0x9D	; 157
     cc2:	bb 4f       	sbci	r27, 0xFB	; 251
     cc4:	8c 91       	ld	r24, X
     cc6:	94 85       	ldd	r25, Z+12	; 0x0c
     cc8:	89 2b       	or	r24, r25
     cca:	8c 93       	st	X, r24
     ccc:	02 80       	ldd	r0, Z+2	; 0x02
     cce:	f3 81       	ldd	r31, Z+3	; 0x03
     cd0:	e0 2d       	mov	r30, r0
     cd2:	78 94       	sei
     cd4:	81 85       	ldd	r24, Z+9	; 0x09
     cd6:	80 31       	cpi	r24, 0x10	; 16
     cd8:	f1 f6       	brne	.-68     	; 0xc96 <OSTimeTick+0x1a>
     cda:	dc cf       	rjmp	.-72     	; 0xc94 <OSTimeTick+0x18>
     cdc:	37 83       	std	Z+7, r19	; 0x07
     cde:	26 83       	std	Z+6, r18	; 0x06
     ce0:	f5 cf       	rjmp	.-22     	; 0xccc <OSTimeTick+0x50>

00000ce2 <OSVersion>:
     ce2:	8c ef       	ldi	r24, 0xFC	; 252
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	08 95       	ret

00000ce8 <OS_Dummy>:
     ce8:	08 95       	ret

00000cea <OS_Sched>:
     cea:	f8 94       	cli
     cec:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <OSIntNesting>
     cf0:	81 11       	cpse	r24, r1
     cf2:	3d c0       	rjmp	.+122    	; 0xd6e <OS_Sched+0x84>
     cf4:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <OSLockNesting>
     cf8:	81 11       	cpse	r24, r1
     cfa:	39 c0       	rjmp	.+114    	; 0xd6e <OS_Sched+0x84>
     cfc:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <OSRdyGrp>
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	e0 50       	subi	r30, 0x00	; 0
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	e0 81       	ld	r30, Z
     d08:	ae 2f       	mov	r26, r30
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ad 59       	subi	r26, 0x9D	; 157
     d0e:	bb 4f       	sbci	r27, 0xFB	; 251
     d10:	ac 91       	ld	r26, X
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	a0 50       	subi	r26, 0x00	; 0
     d16:	bf 4f       	sbci	r27, 0xFF	; 255
     d18:	ee 0f       	add	r30, r30
     d1a:	ee 0f       	add	r30, r30
     d1c:	ee 0f       	add	r30, r30
     d1e:	8c 91       	ld	r24, X
     d20:	e8 0f       	add	r30, r24
     d22:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <OSPrioHighRdy>
     d26:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <OSPrioCur>
     d2a:	e8 17       	cp	r30, r24
     d2c:	01 f1       	breq	.+64     	; 0xd6e <OS_Sched+0x84>
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	e7 55       	subi	r30, 0x57	; 87
     d36:	fa 4f       	sbci	r31, 0xFA	; 250
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <OSTCBHighRdy+0x1>
     d40:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <OSTCBHighRdy>
     d44:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <OSCtxSwCtr>
     d48:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <OSCtxSwCtr+0x1>
     d4c:	a0 91 5b 04 	lds	r26, 0x045B	; 0x80045b <OSCtxSwCtr+0x2>
     d50:	b0 91 5c 04 	lds	r27, 0x045C	; 0x80045c <OSCtxSwCtr+0x3>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	a1 1d       	adc	r26, r1
     d58:	b1 1d       	adc	r27, r1
     d5a:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <OSCtxSwCtr>
     d5e:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <OSCtxSwCtr+0x1>
     d62:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <OSCtxSwCtr+0x2>
     d66:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <OSCtxSwCtr+0x3>
     d6a:	0e 94 4b 04 	call	0x896	; 0x896 <OSCtxSw>
     d6e:	78 94       	sei
     d70:	08 95       	ret

00000d72 <OSSchedUnlock>:
     d72:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <OSRunning>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 f4       	brne	.+36     	; 0xd9e <OSSchedUnlock+0x2c>
     d7a:	f8 94       	cli
     d7c:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <OSLockNesting>
     d80:	88 23       	and	r24, r24
     d82:	61 f0       	breq	.+24     	; 0xd9c <OSSchedUnlock+0x2a>
     d84:	81 50       	subi	r24, 0x01	; 1
     d86:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <OSLockNesting>
     d8a:	81 11       	cpse	r24, r1
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <OSSchedUnlock+0x2a>
     d8e:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <OSIntNesting>
     d92:	81 11       	cpse	r24, r1
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <OSSchedUnlock+0x2a>
     d96:	78 94       	sei
     d98:	0c 94 75 06 	jmp	0xcea	; 0xcea <OS_Sched>
     d9c:	78 94       	sei
     d9e:	08 95       	ret

00000da0 <OSTimeDly.part.0>:
     da0:	ac 01       	movw	r20, r24
     da2:	f8 94       	cli
     da4:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <OSTCBCur>
     da8:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <OSTCBCur+0x1>
     dac:	1b 96       	adiw	r26, 0x0b	; 11
     dae:	ec 91       	ld	r30, X
     db0:	1b 97       	sbiw	r26, 0x0b	; 11
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	1c 96       	adiw	r26, 0x0c	; 12
     db6:	9c 91       	ld	r25, X
     db8:	1c 97       	sbiw	r26, 0x0c	; 12
     dba:	90 95       	com	r25
     dbc:	ed 59       	subi	r30, 0x9D	; 157
     dbe:	fb 4f       	sbci	r31, 0xFB	; 251
     dc0:	80 81       	ld	r24, Z
     dc2:	98 23       	and	r25, r24
     dc4:	90 83       	st	Z, r25
     dc6:	91 11       	cpse	r25, r1
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <OSTimeDly.part.0+0x3e>
     dca:	1d 96       	adiw	r26, 0x0d	; 13
     dcc:	9c 91       	ld	r25, X
     dce:	1d 97       	sbiw	r26, 0x0d	; 13
     dd0:	29 2f       	mov	r18, r25
     dd2:	20 95       	com	r18
     dd4:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <OSRdyGrp>
     dd8:	92 23       	and	r25, r18
     dda:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <OSRdyGrp>
     dde:	17 96       	adiw	r26, 0x07	; 7
     de0:	5c 93       	st	X, r21
     de2:	4e 93       	st	-X, r20
     de4:	16 97       	sbiw	r26, 0x06	; 6
     de6:	78 94       	sei
     de8:	0c 94 75 06 	jmp	0xcea	; 0xcea <OS_Sched>

00000dec <OS_TCBInit>:
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	f8 94       	cli
     df4:	c0 91 5d 04 	lds	r28, 0x045D	; 0x80045d <OSTCBFreeList>
     df8:	d0 91 5e 04 	lds	r29, 0x045E	; 0x80045e <OSTCBFreeList+0x1>
     dfc:	20 97       	sbiw	r28, 0x00	; 0
     dfe:	09 f4       	brne	.+2      	; 0xe02 <OS_TCBInit+0x16>
     e00:	54 c0       	rjmp	.+168    	; 0xeaa <OS_TCBInit+0xbe>
     e02:	18 2f       	mov	r17, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <OSTCBFreeList+0x1>
     e0c:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <OSTCBFreeList>
     e10:	78 94       	sei
     e12:	79 83       	std	Y+1, r23	; 0x01
     e14:	68 83       	st	Y, r22
     e16:	19 87       	std	Y+9, r17	; 0x09
     e18:	18 86       	std	Y+8, r1	; 0x08
     e1a:	1f 82       	std	Y+7, r1	; 0x07
     e1c:	1e 82       	std	Y+6, r1	; 0x06
     e1e:	1e 86       	std	Y+14, r1	; 0x0e
     e20:	e1 2f       	mov	r30, r17
     e22:	e6 95       	lsr	r30
     e24:	e6 95       	lsr	r30
     e26:	e6 95       	lsr	r30
     e28:	eb 87       	std	Y+11, r30	; 0x0b
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	e0 50       	subi	r30, 0x00	; 0
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	80 81       	ld	r24, Z
     e32:	8d 87       	std	Y+13, r24	; 0x0d
     e34:	e1 2f       	mov	r30, r17
     e36:	e7 70       	andi	r30, 0x07	; 7
     e38:	ea 87       	std	Y+10, r30	; 0x0a
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	e0 50       	subi	r30, 0x00	; 0
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 81       	ld	r24, Z
     e42:	8c 87       	std	Y+12, r24	; 0x0c
     e44:	ce 01       	movw	r24, r28
     e46:	0e 94 8c 05 	call	0xb18	; 0xb18 <OSTCBInitHook>
     e4a:	ce 01       	movw	r24, r28
     e4c:	0e 94 84 05 	call	0xb08	; 0xb08 <OSTaskCreateHook>
     e50:	f8 94       	cli
     e52:	e1 2f       	mov	r30, r17
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	e7 55       	subi	r30, 0x57	; 87
     e5c:	fa 4f       	sbci	r31, 0xFA	; 250
     e5e:	d1 83       	std	Z+1, r29	; 0x01
     e60:	c0 83       	st	Z, r28
     e62:	e0 91 57 04 	lds	r30, 0x0457	; 0x800457 <OSTCBList>
     e66:	f0 91 58 04 	lds	r31, 0x0458	; 0x800458 <OSTCBList+0x1>
     e6a:	fb 83       	std	Y+3, r31	; 0x03
     e6c:	ea 83       	std	Y+2, r30	; 0x02
     e6e:	1d 82       	std	Y+5, r1	; 0x05
     e70:	1c 82       	std	Y+4, r1	; 0x04
     e72:	30 97       	sbiw	r30, 0x00	; 0
     e74:	11 f0       	breq	.+4      	; 0xe7a <OS_TCBInit+0x8e>
     e76:	d5 83       	std	Z+5, r29	; 0x05
     e78:	c4 83       	std	Z+4, r28	; 0x04
     e7a:	d0 93 58 04 	sts	0x0458, r29	; 0x800458 <OSTCBList+0x1>
     e7e:	c0 93 57 04 	sts	0x0457, r28	; 0x800457 <OSTCBList>
     e82:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <OSRdyGrp>
     e86:	9d 85       	ldd	r25, Y+13	; 0x0d
     e88:	89 2b       	or	r24, r25
     e8a:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <OSRdyGrp>
     e8e:	eb 85       	ldd	r30, Y+11	; 0x0b
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	ed 59       	subi	r30, 0x9D	; 157
     e94:	fb 4f       	sbci	r31, 0xFB	; 251
     e96:	80 81       	ld	r24, Z
     e98:	9c 85       	ldd	r25, Y+12	; 0x0c
     e9a:	89 2b       	or	r24, r25
     e9c:	80 83       	st	Z, r24
     e9e:	78 94       	sei
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	08 95       	ret
     eaa:	78 94       	sei
     eac:	86 e4       	ldi	r24, 0x46	; 70
     eae:	f9 cf       	rjmp	.-14     	; 0xea2 <OS_TCBInit+0xb6>

00000eb0 <OSTaskCreate>:
     eb0:	9f 92       	push	r9
     eb2:	af 92       	push	r10
     eb4:	bf 92       	push	r11
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	f8 94       	cli
     ec8:	c2 2f       	mov	r28, r18
     eca:	d0 e0       	ldi	r29, 0x00	; 0
     ecc:	cc 0f       	add	r28, r28
     ece:	dd 1f       	adc	r29, r29
     ed0:	c7 55       	subi	r28, 0x57	; 87
     ed2:	da 4f       	sbci	r29, 0xFA	; 250
     ed4:	e8 81       	ld	r30, Y
     ed6:	f9 81       	ldd	r31, Y+1	; 0x01
     ed8:	ef 2b       	or	r30, r31
     eda:	09 f0       	breq	.+2      	; 0xede <OSTaskCreate+0x2e>
     edc:	3b c0       	rjmp	.+118    	; 0xf54 <OSTaskCreate+0xa4>
     ede:	92 2e       	mov	r9, r18
     ee0:	21 e0       	ldi	r18, 0x01	; 1
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	39 83       	std	Y+1, r19	; 0x01
     ee6:	28 83       	st	Y, r18
     ee8:	78 94       	sei
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	0e 94 3a 05 	call	0xa74	; 0xa74 <OSTaskStkInit>
     ef2:	b1 2c       	mov	r11, r1
     ef4:	a1 2c       	mov	r10, r1
     ef6:	d1 2c       	mov	r13, r1
     ef8:	c1 2c       	mov	r12, r1
     efa:	e1 2c       	mov	r14, r1
     efc:	f1 2c       	mov	r15, r1
     efe:	87 01       	movw	r16, r14
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	bc 01       	movw	r22, r24
     f0a:	89 2d       	mov	r24, r9
     f0c:	0e 94 f6 06 	call	0xdec	; 0xdec <OS_TCBInit>
     f10:	18 2f       	mov	r17, r24
     f12:	81 11       	cpse	r24, r1
     f14:	1a c0       	rjmp	.+52     	; 0xf4a <OSTaskCreate+0x9a>
     f16:	f8 94       	cli
     f18:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <OSTaskCtr>
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <OSTaskCtr>
     f22:	78 94       	sei
     f24:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <OSRunning>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	11 f4       	brne	.+4      	; 0xf30 <OSTaskCreate+0x80>
     f2c:	0e 94 75 06 	call	0xcea	; 0xcea <OS_Sched>
     f30:	81 2f       	mov	r24, r17
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	bf 90       	pop	r11
     f44:	af 90       	pop	r10
     f46:	9f 90       	pop	r9
     f48:	08 95       	ret
     f4a:	f8 94       	cli
     f4c:	19 82       	std	Y+1, r1	; 0x01
     f4e:	18 82       	st	Y, r1
     f50:	78 94       	sei
     f52:	ee cf       	rjmp	.-36     	; 0xf30 <OSTaskCreate+0x80>
     f54:	78 94       	sei
     f56:	18 e2       	ldi	r17, 0x28	; 40
     f58:	eb cf       	rjmp	.-42     	; 0xf30 <OSTaskCreate+0x80>

00000f5a <OSInit>:
     f5a:	0e 94 89 05 	call	0xb12	; 0xb12 <OSInitHookBegin>
     f5e:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <OSIntNesting>
     f62:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <OSLockNesting>
     f66:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <OSTaskCtr>
     f6a:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <OSRunning>
     f6e:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <OSCtxSwCtr>
     f72:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <OSCtxSwCtr+0x1>
     f76:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <OSCtxSwCtr+0x2>
     f7a:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <OSCtxSwCtr+0x3>
     f7e:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <OSIdleCtr>
     f82:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <OSIdleCtr+0x1>
     f86:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <OSIdleCtr+0x2>
     f8a:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <OSIdleCtr+0x3>
     f8e:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <OSRdyGrp>
     f92:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <OSRdyTbl>
     f96:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <OSRdyTbl+0x1>
     f9a:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <OSRdyTbl+0x2>
     f9e:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <OSPrioCur>
     fa2:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <OSPrioHighRdy>
     fa6:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <OSTCBHighRdy+0x1>
     faa:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <OSTCBHighRdy>
     fae:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <OSTCBCur+0x1>
     fb2:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <OSTCBCur>
     fb6:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <OSTCBList+0x1>
     fba:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <OSTCBList>
     fbe:	e9 ea       	ldi	r30, 0xA9	; 169
     fc0:	f5 e0       	ldi	r31, 0x05	; 5
     fc2:	11 92       	st	Z+, r1
     fc4:	11 92       	st	Z+, r1
     fc6:	85 e0       	ldi	r24, 0x05	; 5
     fc8:	eb 3c       	cpi	r30, 0xCB	; 203
     fca:	f8 07       	cpc	r31, r24
     fcc:	d1 f7       	brne	.-12     	; 0xfc2 <OSInit+0x68>
     fce:	ea ea       	ldi	r30, 0xAA	; 170
     fd0:	f4 e0       	ldi	r31, 0x04	; 4
     fd2:	cf 01       	movw	r24, r30
     fd4:	0f 96       	adiw	r24, 0x0f	; 15
     fd6:	93 83       	std	Z+3, r25	; 0x03
     fd8:	82 83       	std	Z+2, r24	; 0x02
     fda:	fc 01       	movw	r30, r24
     fdc:	85 e0       	ldi	r24, 0x05	; 5
     fde:	ea 39       	cpi	r30, 0x9A	; 154
     fe0:	f8 07       	cpc	r31, r24
     fe2:	b9 f7       	brne	.-18     	; 0xfd2 <OSInit+0x78>
     fe4:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <OSTCBTbl+0xf3>
     fe8:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <OSTCBTbl+0xf2>
     fec:	8a ea       	ldi	r24, 0xAA	; 170
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <OSTCBFreeList+0x1>
     ff4:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <OSTCBFreeList>
     ff8:	20 e1       	ldi	r18, 0x10	; 16
     ffa:	49 ea       	ldi	r20, 0xA9	; 169
     ffc:	54 e0       	ldi	r21, 0x04	; 4
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	8d e8       	ldi	r24, 0x8D	; 141
    1004:	95 e0       	ldi	r25, 0x05	; 5
    1006:	0e 94 58 07 	call	0xeb0	; 0xeb0 <OSTaskCreate>
    100a:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <OSInitHookEnd>

0000100e <OSTaskDel>:
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	f0 90 67 04 	lds	r15, 0x0467	; 0x800467 <OSIntNesting>
    101c:	f1 10       	cpse	r15, r1
    101e:	76 c0       	rjmp	.+236    	; 0x110c <OSTaskDel+0xfe>
    1020:	f8 94       	cli
    1022:	8f 3f       	cpi	r24, 0xFF	; 255
    1024:	29 f4       	brne	.+10     	; 0x1030 <OSTaskDel+0x22>
    1026:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <OSTCBCur>
    102a:	f0 91 69 04 	lds	r31, 0x0469	; 0x800469 <OSTCBCur+0x1>
    102e:	81 85       	ldd	r24, Z+9	; 0x09
    1030:	08 2f       	mov	r16, r24
    1032:	10 e0       	ldi	r17, 0x00	; 0
    1034:	00 0f       	add	r16, r16
    1036:	11 1f       	adc	r17, r17
    1038:	f8 01       	movw	r30, r16
    103a:	e7 55       	subi	r30, 0x57	; 87
    103c:	fa 4f       	sbci	r31, 0xFA	; 250
    103e:	c0 81       	ld	r28, Z
    1040:	d1 81       	ldd	r29, Z+1	; 0x01
    1042:	20 97       	sbiw	r28, 0x00	; 0
    1044:	09 f4       	brne	.+2      	; 0x1048 <OSTaskDel+0x3a>
    1046:	5e c0       	rjmp	.+188    	; 0x1104 <OSTaskDel+0xf6>
    1048:	eb 85       	ldd	r30, Y+11	; 0x0b
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	8c 85       	ldd	r24, Y+12	; 0x0c
    104e:	80 95       	com	r24
    1050:	ed 59       	subi	r30, 0x9D	; 157
    1052:	fb 4f       	sbci	r31, 0xFB	; 251
    1054:	90 81       	ld	r25, Z
    1056:	89 23       	and	r24, r25
    1058:	80 83       	st	Z, r24
    105a:	81 11       	cpse	r24, r1
    105c:	08 c0       	rjmp	.+16     	; 0x106e <OSTaskDel+0x60>
    105e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1060:	98 2f       	mov	r25, r24
    1062:	90 95       	com	r25
    1064:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <OSRdyGrp>
    1068:	89 23       	and	r24, r25
    106a:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <OSRdyGrp>
    106e:	1f 82       	std	Y+7, r1	; 0x07
    1070:	1e 82       	std	Y+6, r1	; 0x06
    1072:	18 86       	std	Y+8, r1	; 0x08
    1074:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <OSLockNesting>
    1078:	8f 3f       	cpi	r24, 0xFF	; 255
    107a:	19 f0       	breq	.+6      	; 0x1082 <OSTaskDel+0x74>
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <OSLockNesting>
    1082:	78 94       	sei
    1084:	f8 94       	cli
    1086:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <OSLockNesting>
    108a:	88 23       	and	r24, r24
    108c:	19 f0       	breq	.+6      	; 0x1094 <OSTaskDel+0x86>
    108e:	81 50       	subi	r24, 0x01	; 1
    1090:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <OSLockNesting>
    1094:	ce 01       	movw	r24, r28
    1096:	0e 94 85 05 	call	0xb0a	; 0xb0a <OSTaskDelHook>
    109a:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <OSTaskCtr>
    109e:	81 50       	subi	r24, 0x01	; 1
    10a0:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <OSTaskCtr>
    10a4:	f8 01       	movw	r30, r16
    10a6:	e7 55       	subi	r30, 0x57	; 87
    10a8:	fa 4f       	sbci	r31, 0xFA	; 250
    10aa:	11 82       	std	Z+1, r1	; 0x01
    10ac:	10 82       	st	Z, r1
    10ae:	ec 81       	ldd	r30, Y+4	; 0x04
    10b0:	fd 81       	ldd	r31, Y+5	; 0x05
    10b2:	aa 81       	ldd	r26, Y+2	; 0x02
    10b4:	bb 81       	ldd	r27, Y+3	; 0x03
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	e1 f4       	brne	.+56     	; 0x10f2 <OSTaskDel+0xe4>
    10ba:	15 96       	adiw	r26, 0x05	; 5
    10bc:	1c 92       	st	X, r1
    10be:	1e 92       	st	-X, r1
    10c0:	14 97       	sbiw	r26, 0x04	; 4
    10c2:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <OSTCBList+0x1>
    10c6:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <OSTCBList>
    10ca:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <OSTCBFreeList>
    10ce:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <OSTCBFreeList+0x1>
    10d2:	9b 83       	std	Y+3, r25	; 0x03
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    10d6:	d0 93 5e 04 	sts	0x045E, r29	; 0x80045e <OSTCBFreeList+0x1>
    10da:	c0 93 5d 04 	sts	0x045D, r28	; 0x80045d <OSTCBFreeList>
    10de:	78 94       	sei
    10e0:	0e 94 75 06 	call	0xcea	; 0xcea <OS_Sched>
    10e4:	8f 2d       	mov	r24, r15
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	08 95       	ret
    10f2:	b3 83       	std	Z+3, r27	; 0x03
    10f4:	a2 83       	std	Z+2, r26	; 0x02
    10f6:	aa 81       	ldd	r26, Y+2	; 0x02
    10f8:	bb 81       	ldd	r27, Y+3	; 0x03
    10fa:	15 96       	adiw	r26, 0x05	; 5
    10fc:	fc 93       	st	X, r31
    10fe:	ee 93       	st	-X, r30
    1100:	14 97       	sbiw	r26, 0x04	; 4
    1102:	e3 cf       	rjmp	.-58     	; 0x10ca <OSTaskDel+0xbc>
    1104:	78 94       	sei
    1106:	9c e3       	ldi	r25, 0x3C	; 60
    1108:	f9 2e       	mov	r15, r25
    110a:	ec cf       	rjmp	.-40     	; 0x10e4 <OSTaskDel+0xd6>
    110c:	8f e3       	ldi	r24, 0x3F	; 63
    110e:	f8 2e       	mov	r15, r24
    1110:	e9 cf       	rjmp	.-46     	; 0x10e4 <OSTaskDel+0xd6>

00001112 <OSTaskDelReq>:
    1112:	8f 3f       	cpi	r24, 0xFF	; 255
    1114:	41 f4       	brne	.+16     	; 0x1126 <OSTaskDelReq+0x14>
    1116:	f8 94       	cli
    1118:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <OSTCBCur>
    111c:	f0 91 69 04 	lds	r31, 0x0469	; 0x800469 <OSTCBCur+0x1>
    1120:	86 85       	ldd	r24, Z+14	; 0x0e
    1122:	78 94       	sei
    1124:	08 95       	ret
    1126:	f8 94       	cli
    1128:	e8 2f       	mov	r30, r24
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	ee 0f       	add	r30, r30
    112e:	ff 1f       	adc	r31, r31
    1130:	e7 55       	subi	r30, 0x57	; 87
    1132:	fa 4f       	sbci	r31, 0xFA	; 250
    1134:	01 90       	ld	r0, Z+
    1136:	f0 81       	ld	r31, Z
    1138:	e0 2d       	mov	r30, r0
    113a:	8b e0       	ldi	r24, 0x0B	; 11
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	89 f3       	breq	.-30     	; 0x1122 <OSTaskDelReq+0x10>
    1140:	8e e3       	ldi	r24, 0x3E	; 62
    1142:	86 87       	std	Z+14, r24	; 0x0e
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	ed cf       	rjmp	.-38     	; 0x1122 <OSTaskDelReq+0x10>

00001148 <OSTimeDly>:
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	11 f0       	breq	.+4      	; 0x1150 <OSTimeDly+0x8>
    114c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <OSTimeDly.part.0>
    1150:	08 95       	ret

00001152 <OSTimeDlyHMSM>:
    1152:	cf 92       	push	r12
    1154:	df 92       	push	r13
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	81 11       	cpse	r24, r1
    115c:	0d c0       	rjmp	.+26     	; 0x1178 <OSTimeDlyHMSM+0x26>
    115e:	61 11       	cpse	r22, r1
    1160:	0b c0       	rjmp	.+22     	; 0x1178 <OSTimeDlyHMSM+0x26>
    1162:	41 11       	cpse	r20, r1
    1164:	0c c0       	rjmp	.+24     	; 0x117e <OSTimeDlyHMSM+0x2c>
    1166:	21 15       	cp	r18, r1
    1168:	31 05       	cpc	r19, r1
    116a:	61 f4       	brne	.+24     	; 0x1184 <OSTimeDlyHMSM+0x32>
    116c:	84 e5       	ldi	r24, 0x54	; 84
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	08 95       	ret
    1178:	6c 33       	cpi	r22, 0x3C	; 60
    117a:	08 f0       	brcs	.+2      	; 0x117e <OSTimeDlyHMSM+0x2c>
    117c:	4f c0       	rjmp	.+158    	; 0x121c <OSTimeDlyHMSM+0xca>
    117e:	4c 33       	cpi	r20, 0x3C	; 60
    1180:	08 f0       	brcs	.+2      	; 0x1184 <OSTimeDlyHMSM+0x32>
    1182:	4e c0       	rjmp	.+156    	; 0x1220 <OSTimeDlyHMSM+0xce>
    1184:	28 3e       	cpi	r18, 0xE8	; 232
    1186:	93 e0       	ldi	r25, 0x03	; 3
    1188:	39 07       	cpc	r19, r25
    118a:	08 f0       	brcs	.+2      	; 0x118e <OSTimeDlyHMSM+0x3c>
    118c:	4b c0       	rjmp	.+150    	; 0x1224 <OSTimeDlyHMSM+0xd2>
    118e:	f9 01       	movw	r30, r18
    1190:	58 2f       	mov	r21, r24
    1192:	26 2f       	mov	r18, r22
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	ac e3       	ldi	r26, 0x3C	; 60
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	0e 94 c8 09 	call	0x1390	; 0x1390 <__umulhisi3>
    119e:	6b 01       	movw	r12, r22
    11a0:	7c 01       	movw	r14, r24
    11a2:	c4 0e       	add	r12, r20
    11a4:	d1 1c       	adc	r13, r1
    11a6:	e1 1c       	adc	r14, r1
    11a8:	f1 1c       	adc	r15, r1
    11aa:	25 2f       	mov	r18, r21
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	a0 e1       	ldi	r26, 0x10	; 16
    11b0:	be e0       	ldi	r27, 0x0E	; 14
    11b2:	0e 94 c8 09 	call	0x1390	; 0x1390 <__umulhisi3>
    11b6:	a7 01       	movw	r20, r14
    11b8:	96 01       	movw	r18, r12
    11ba:	26 0f       	add	r18, r22
    11bc:	37 1f       	adc	r19, r23
    11be:	48 1f       	adc	r20, r24
    11c0:	59 1f       	adc	r21, r25
    11c2:	a4 e6       	ldi	r26, 0x64	; 100
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__muluhisi3>
    11ca:	6b 01       	movw	r12, r22
    11cc:	7c 01       	movw	r14, r24
    11ce:	9f 01       	movw	r18, r30
    11d0:	0e 94 c8 09 	call	0x1390	; 0x1390 <__umulhisi3>
    11d4:	6c 50       	subi	r22, 0x0C	; 12
    11d6:	7e 4f       	sbci	r23, 0xFE	; 254
    11d8:	8f 4f       	sbci	r24, 0xFF	; 255
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	28 ee       	ldi	r18, 0xE8	; 232
    11de:	33 e0       	ldi	r19, 0x03	; 3
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	0e 94 a6 09 	call	0x134c	; 0x134c <__udivmodsi4>
    11e8:	d7 01       	movw	r26, r14
    11ea:	c6 01       	movw	r24, r12
    11ec:	82 0f       	add	r24, r18
    11ee:	93 1f       	adc	r25, r19
    11f0:	a4 1f       	adc	r26, r20
    11f2:	b5 1f       	adc	r27, r21
    11f4:	7d 01       	movw	r14, r26
    11f6:	0e 94 a4 08 	call	0x1148	; 0x1148 <OSTimeDly>
    11fa:	e1 14       	cp	r14, r1
    11fc:	f1 04       	cpc	r15, r1
    11fe:	11 f4       	brne	.+4      	; 0x1204 <OSTimeDlyHMSM+0xb2>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	b5 cf       	rjmp	.-150    	; 0x116e <OSTimeDlyHMSM+0x1c>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e8       	ldi	r25, 0x80	; 128
    1208:	0e 94 d0 06 	call	0xda0	; 0xda0 <OSTimeDly.part.0>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e8       	ldi	r25, 0x80	; 128
    1210:	0e 94 d0 06 	call	0xda0	; 0xda0 <OSTimeDly.part.0>
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	e8 1a       	sub	r14, r24
    1218:	f1 08       	sbc	r15, r1
    121a:	ef cf       	rjmp	.-34     	; 0x11fa <OSTimeDlyHMSM+0xa8>
    121c:	81 e5       	ldi	r24, 0x51	; 81
    121e:	a7 cf       	rjmp	.-178    	; 0x116e <OSTimeDlyHMSM+0x1c>
    1220:	82 e5       	ldi	r24, 0x52	; 82
    1222:	a5 cf       	rjmp	.-182    	; 0x116e <OSTimeDlyHMSM+0x1c>
    1224:	83 e5       	ldi	r24, 0x53	; 83
    1226:	a3 cf       	rjmp	.-186    	; 0x116e <OSTimeDlyHMSM+0x1c>

00001228 <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    1228:	0e 94 5f 03 	call	0x6be	; 0x6be <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    122c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 82 02 	call	0x504	; 0x504 <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    123c:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <myrobot+0x1>
    1240:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    1244:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <myrobot+0x3>
    1248:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    124c:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <myrobot+0x4>
    // myrobot.flag = false;
    myrobot.KP = 0.03; //0,03
    1250:	8f e8       	ldi	r24, 0x8F	; 143
    1252:	92 ec       	ldi	r25, 0xC2	; 194
    1254:	a5 ef       	ldi	r26, 0xF5	; 245
    1256:	bc e3       	ldi	r27, 0x3C	; 60
    1258:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <myrobot+0x5>
    125c:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <myrobot+0x6>
    1260:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <myrobot+0x7>
    1264:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <myrobot+0x8>
    myrobot.KD = 0.4; //0.07
    1268:	8d ec       	ldi	r24, 0xCD	; 205
    126a:	9c ec       	ldi	r25, 0xCC	; 204
    126c:	ac ec       	ldi	r26, 0xCC	; 204
    126e:	be e3       	ldi	r27, 0x3E	; 62
    1270:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <myrobot+0x9>
    1274:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <myrobot+0xa>
    1278:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <myrobot+0xb>
    127c:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <myrobot+0xc>
    myrobot.KI = 0.0005; //0.0004
    1280:	8f e6       	ldi	r24, 0x6F	; 111
    1282:	92 e1       	ldi	r25, 0x12	; 18
    1284:	a3 e0       	ldi	r26, 0x03	; 3
    1286:	ba e3       	ldi	r27, 0x3A	; 58
    1288:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <myrobot+0xd>
    128c:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <myrobot+0xe>
    1290:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <myrobot+0xf>
    1294:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <myrobot+0x10>
    myrobot.lastError = 0.0;
    1298:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <myrobot+0x11>
    129c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <myrobot+0x12>
    12a0:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <myrobot+0x13>
    12a4:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <myrobot+0x14>
    myrobot.integral = 0.0;
    12a8:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <myrobot+0x15>
    12ac:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <myrobot+0x16>
    12b0:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <myrobot+0x17>
    12b4:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <myrobot+0x18>
    // myrobot.timer = 0;
    myrobot.prevLeftSpeed = 0;
    12b8:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <myrobot+0x1c>
    12bc:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <myrobot+0x1b>
    myrobot.prevRightSpeed = 0;
    12c0:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <myrobot+0x1e>
    12c4:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <myrobot+0x1d>
    myrobot.inRoundabout = 0;
    12c8:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <myrobot+0x20>
    12cc:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <myrobot+0x1f>
    // myrobot.prevSense = 0;
    // myrobot.prev2Sense = 0;
    myrobot.goal = 1000;                                      /* goal is to follow on the middle sensor */
    12d0:	88 ee       	ldi	r24, 0xE8	; 232
    12d2:	93 e0       	ldi	r25, 0x03	; 3
    12d4:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <myrobot+0x1a>
    12d8:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <myrobot+0x19>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	46 ec       	ldi	r20, 0xC6	; 198
    12e0:	53 e0       	ldi	r21, 0x03	; 3
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	8b e8       	ldi	r24, 0x8B	; 139
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 58 07 	call	0xeb0	; 0xeb0 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    12ee:	0e 94 25 03 	call	0x64a	; 0x64a <robo_Honk>
    12f2:	0e 94 4b 03 	call	0x696	; 0x696 <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    12f6:	0e 94 11 06 	call	0xc22	; 0xc22 <OSStart>
    12fa:	ff cf       	rjmp	.-2      	; 0x12fa <main+0xd2>

000012fc <__udivmodhi4>:
    12fc:	aa 1b       	sub	r26, r26
    12fe:	bb 1b       	sub	r27, r27
    1300:	51 e1       	ldi	r21, 0x11	; 17
    1302:	07 c0       	rjmp	.+14     	; 0x1312 <__udivmodhi4_ep>

00001304 <__udivmodhi4_loop>:
    1304:	aa 1f       	adc	r26, r26
    1306:	bb 1f       	adc	r27, r27
    1308:	a6 17       	cp	r26, r22
    130a:	b7 07       	cpc	r27, r23
    130c:	10 f0       	brcs	.+4      	; 0x1312 <__udivmodhi4_ep>
    130e:	a6 1b       	sub	r26, r22
    1310:	b7 0b       	sbc	r27, r23

00001312 <__udivmodhi4_ep>:
    1312:	88 1f       	adc	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	5a 95       	dec	r21
    1318:	a9 f7       	brne	.-22     	; 0x1304 <__udivmodhi4_loop>
    131a:	80 95       	com	r24
    131c:	90 95       	com	r25
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	08 95       	ret

00001324 <__divmodhi4>:
    1324:	97 fb       	bst	r25, 7
    1326:	07 2e       	mov	r0, r23
    1328:	16 f4       	brtc	.+4      	; 0x132e <__divmodhi4+0xa>
    132a:	00 94       	com	r0
    132c:	07 d0       	rcall	.+14     	; 0x133c <__divmodhi4_neg1>
    132e:	77 fd       	sbrc	r23, 7
    1330:	09 d0       	rcall	.+18     	; 0x1344 <__divmodhi4_neg2>
    1332:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__udivmodhi4>
    1336:	07 fc       	sbrc	r0, 7
    1338:	05 d0       	rcall	.+10     	; 0x1344 <__divmodhi4_neg2>
    133a:	3e f4       	brtc	.+14     	; 0x134a <__divmodhi4_exit>

0000133c <__divmodhi4_neg1>:
    133c:	90 95       	com	r25
    133e:	81 95       	neg	r24
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	08 95       	ret

00001344 <__divmodhi4_neg2>:
    1344:	70 95       	com	r23
    1346:	61 95       	neg	r22
    1348:	7f 4f       	sbci	r23, 0xFF	; 255

0000134a <__divmodhi4_exit>:
    134a:	08 95       	ret

0000134c <__udivmodsi4>:
    134c:	a1 e2       	ldi	r26, 0x21	; 33
    134e:	1a 2e       	mov	r1, r26
    1350:	aa 1b       	sub	r26, r26
    1352:	bb 1b       	sub	r27, r27
    1354:	fd 01       	movw	r30, r26
    1356:	0d c0       	rjmp	.+26     	; 0x1372 <__udivmodsi4_ep>

00001358 <__udivmodsi4_loop>:
    1358:	aa 1f       	adc	r26, r26
    135a:	bb 1f       	adc	r27, r27
    135c:	ee 1f       	adc	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	a2 17       	cp	r26, r18
    1362:	b3 07       	cpc	r27, r19
    1364:	e4 07       	cpc	r30, r20
    1366:	f5 07       	cpc	r31, r21
    1368:	20 f0       	brcs	.+8      	; 0x1372 <__udivmodsi4_ep>
    136a:	a2 1b       	sub	r26, r18
    136c:	b3 0b       	sbc	r27, r19
    136e:	e4 0b       	sbc	r30, r20
    1370:	f5 0b       	sbc	r31, r21

00001372 <__udivmodsi4_ep>:
    1372:	66 1f       	adc	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	88 1f       	adc	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	1a 94       	dec	r1
    137c:	69 f7       	brne	.-38     	; 0x1358 <__udivmodsi4_loop>
    137e:	60 95       	com	r22
    1380:	70 95       	com	r23
    1382:	80 95       	com	r24
    1384:	90 95       	com	r25
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	bd 01       	movw	r22, r26
    138c:	cf 01       	movw	r24, r30
    138e:	08 95       	ret

00001390 <__umulhisi3>:
    1390:	a2 9f       	mul	r26, r18
    1392:	b0 01       	movw	r22, r0
    1394:	b3 9f       	mul	r27, r19
    1396:	c0 01       	movw	r24, r0
    1398:	a3 9f       	mul	r26, r19
    139a:	70 0d       	add	r23, r0
    139c:	81 1d       	adc	r24, r1
    139e:	11 24       	eor	r1, r1
    13a0:	91 1d       	adc	r25, r1
    13a2:	b2 9f       	mul	r27, r18
    13a4:	70 0d       	add	r23, r0
    13a6:	81 1d       	adc	r24, r1
    13a8:	11 24       	eor	r1, r1
    13aa:	91 1d       	adc	r25, r1
    13ac:	08 95       	ret

000013ae <__muluhisi3>:
    13ae:	0e 94 c8 09 	call	0x1390	; 0x1390 <__umulhisi3>
    13b2:	a5 9f       	mul	r26, r21
    13b4:	90 0d       	add	r25, r0
    13b6:	b4 9f       	mul	r27, r20
    13b8:	90 0d       	add	r25, r0
    13ba:	a4 9f       	mul	r26, r20
    13bc:	80 0d       	add	r24, r0
    13be:	91 1d       	adc	r25, r1
    13c0:	11 24       	eor	r1, r1
    13c2:	08 95       	ret

000013c4 <__subsf3>:
    13c4:	50 58       	subi	r21, 0x80	; 128

000013c6 <__addsf3>:
    13c6:	bb 27       	eor	r27, r27
    13c8:	aa 27       	eor	r26, r26
    13ca:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__addsf3x>
    13ce:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_round>
    13d2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fp_pscA>
    13d6:	38 f0       	brcs	.+14     	; 0x13e6 <__addsf3+0x20>
    13d8:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__fp_pscB>
    13dc:	20 f0       	brcs	.+8      	; 0x13e6 <__addsf3+0x20>
    13de:	39 f4       	brne	.+14     	; 0x13ee <__addsf3+0x28>
    13e0:	9f 3f       	cpi	r25, 0xFF	; 255
    13e2:	19 f4       	brne	.+6      	; 0x13ea <__addsf3+0x24>
    13e4:	26 f4       	brtc	.+8      	; 0x13ee <__addsf3+0x28>
    13e6:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__fp_nan>
    13ea:	0e f4       	brtc	.+2      	; 0x13ee <__addsf3+0x28>
    13ec:	e0 95       	com	r30
    13ee:	e7 fb       	bst	r30, 7
    13f0:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__fp_inf>

000013f4 <__addsf3x>:
    13f4:	e9 2f       	mov	r30, r25
    13f6:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_split3>
    13fa:	58 f3       	brcs	.-42     	; 0x13d2 <__addsf3+0xc>
    13fc:	ba 17       	cp	r27, r26
    13fe:	62 07       	cpc	r22, r18
    1400:	73 07       	cpc	r23, r19
    1402:	84 07       	cpc	r24, r20
    1404:	95 07       	cpc	r25, r21
    1406:	20 f0       	brcs	.+8      	; 0x1410 <__addsf3x+0x1c>
    1408:	79 f4       	brne	.+30     	; 0x1428 <__addsf3x+0x34>
    140a:	a6 f5       	brtc	.+104    	; 0x1474 <__addsf3x+0x80>
    140c:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__fp_zero>
    1410:	0e f4       	brtc	.+2      	; 0x1414 <__addsf3x+0x20>
    1412:	e0 95       	com	r30
    1414:	0b 2e       	mov	r0, r27
    1416:	ba 2f       	mov	r27, r26
    1418:	a0 2d       	mov	r26, r0
    141a:	0b 01       	movw	r0, r22
    141c:	b9 01       	movw	r22, r18
    141e:	90 01       	movw	r18, r0
    1420:	0c 01       	movw	r0, r24
    1422:	ca 01       	movw	r24, r20
    1424:	a0 01       	movw	r20, r0
    1426:	11 24       	eor	r1, r1
    1428:	ff 27       	eor	r31, r31
    142a:	59 1b       	sub	r21, r25
    142c:	99 f0       	breq	.+38     	; 0x1454 <__addsf3x+0x60>
    142e:	59 3f       	cpi	r21, 0xF9	; 249
    1430:	50 f4       	brcc	.+20     	; 0x1446 <__addsf3x+0x52>
    1432:	50 3e       	cpi	r21, 0xE0	; 224
    1434:	68 f1       	brcs	.+90     	; 0x1490 <__addsf3x+0x9c>
    1436:	1a 16       	cp	r1, r26
    1438:	f0 40       	sbci	r31, 0x00	; 0
    143a:	a2 2f       	mov	r26, r18
    143c:	23 2f       	mov	r18, r19
    143e:	34 2f       	mov	r19, r20
    1440:	44 27       	eor	r20, r20
    1442:	58 5f       	subi	r21, 0xF8	; 248
    1444:	f3 cf       	rjmp	.-26     	; 0x142c <__addsf3x+0x38>
    1446:	46 95       	lsr	r20
    1448:	37 95       	ror	r19
    144a:	27 95       	ror	r18
    144c:	a7 95       	ror	r26
    144e:	f0 40       	sbci	r31, 0x00	; 0
    1450:	53 95       	inc	r21
    1452:	c9 f7       	brne	.-14     	; 0x1446 <__addsf3x+0x52>
    1454:	7e f4       	brtc	.+30     	; 0x1474 <__addsf3x+0x80>
    1456:	1f 16       	cp	r1, r31
    1458:	ba 0b       	sbc	r27, r26
    145a:	62 0b       	sbc	r22, r18
    145c:	73 0b       	sbc	r23, r19
    145e:	84 0b       	sbc	r24, r20
    1460:	ba f0       	brmi	.+46     	; 0x1490 <__addsf3x+0x9c>
    1462:	91 50       	subi	r25, 0x01	; 1
    1464:	a1 f0       	breq	.+40     	; 0x148e <__addsf3x+0x9a>
    1466:	ff 0f       	add	r31, r31
    1468:	bb 1f       	adc	r27, r27
    146a:	66 1f       	adc	r22, r22
    146c:	77 1f       	adc	r23, r23
    146e:	88 1f       	adc	r24, r24
    1470:	c2 f7       	brpl	.-16     	; 0x1462 <__addsf3x+0x6e>
    1472:	0e c0       	rjmp	.+28     	; 0x1490 <__addsf3x+0x9c>
    1474:	ba 0f       	add	r27, r26
    1476:	62 1f       	adc	r22, r18
    1478:	73 1f       	adc	r23, r19
    147a:	84 1f       	adc	r24, r20
    147c:	48 f4       	brcc	.+18     	; 0x1490 <__addsf3x+0x9c>
    147e:	87 95       	ror	r24
    1480:	77 95       	ror	r23
    1482:	67 95       	ror	r22
    1484:	b7 95       	ror	r27
    1486:	f7 95       	ror	r31
    1488:	9e 3f       	cpi	r25, 0xFE	; 254
    148a:	08 f0       	brcs	.+2      	; 0x148e <__addsf3x+0x9a>
    148c:	b0 cf       	rjmp	.-160    	; 0x13ee <__addsf3+0x28>
    148e:	93 95       	inc	r25
    1490:	88 0f       	add	r24, r24
    1492:	08 f0       	brcs	.+2      	; 0x1496 <__addsf3x+0xa2>
    1494:	99 27       	eor	r25, r25
    1496:	ee 0f       	add	r30, r30
    1498:	97 95       	ror	r25
    149a:	87 95       	ror	r24
    149c:	08 95       	ret

0000149e <__fixsfsi>:
    149e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    14a2:	68 94       	set
    14a4:	b1 11       	cpse	r27, r1
    14a6:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__fp_szero>
    14aa:	08 95       	ret

000014ac <__fixunssfsi>:
    14ac:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_splitA>
    14b0:	88 f0       	brcs	.+34     	; 0x14d4 <__fixunssfsi+0x28>
    14b2:	9f 57       	subi	r25, 0x7F	; 127
    14b4:	98 f0       	brcs	.+38     	; 0x14dc <__fixunssfsi+0x30>
    14b6:	b9 2f       	mov	r27, r25
    14b8:	99 27       	eor	r25, r25
    14ba:	b7 51       	subi	r27, 0x17	; 23
    14bc:	b0 f0       	brcs	.+44     	; 0x14ea <__fixunssfsi+0x3e>
    14be:	e1 f0       	breq	.+56     	; 0x14f8 <__fixunssfsi+0x4c>
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	1a f0       	brmi	.+6      	; 0x14d0 <__fixunssfsi+0x24>
    14ca:	ba 95       	dec	r27
    14cc:	c9 f7       	brne	.-14     	; 0x14c0 <__fixunssfsi+0x14>
    14ce:	14 c0       	rjmp	.+40     	; 0x14f8 <__fixunssfsi+0x4c>
    14d0:	b1 30       	cpi	r27, 0x01	; 1
    14d2:	91 f0       	breq	.+36     	; 0x14f8 <__fixunssfsi+0x4c>
    14d4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_zero>
    14d8:	b1 e0       	ldi	r27, 0x01	; 1
    14da:	08 95       	ret
    14dc:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__fp_zero>
    14e0:	67 2f       	mov	r22, r23
    14e2:	78 2f       	mov	r23, r24
    14e4:	88 27       	eor	r24, r24
    14e6:	b8 5f       	subi	r27, 0xF8	; 248
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <__fixunssfsi+0x4c>
    14ea:	b9 3f       	cpi	r27, 0xF9	; 249
    14ec:	cc f3       	brlt	.-14     	; 0x14e0 <__fixunssfsi+0x34>
    14ee:	86 95       	lsr	r24
    14f0:	77 95       	ror	r23
    14f2:	67 95       	ror	r22
    14f4:	b3 95       	inc	r27
    14f6:	d9 f7       	brne	.-10     	; 0x14ee <__fixunssfsi+0x42>
    14f8:	3e f4       	brtc	.+14     	; 0x1508 <__fixunssfsi+0x5c>
    14fa:	90 95       	com	r25
    14fc:	80 95       	com	r24
    14fe:	70 95       	com	r23
    1500:	61 95       	neg	r22
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	08 95       	ret

0000150a <__floatunsisf>:
    150a:	e8 94       	clt
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <__floatsisf+0x12>

0000150e <__floatsisf>:
    150e:	97 fb       	bst	r25, 7
    1510:	3e f4       	brtc	.+14     	; 0x1520 <__floatsisf+0x12>
    1512:	90 95       	com	r25
    1514:	80 95       	com	r24
    1516:	70 95       	com	r23
    1518:	61 95       	neg	r22
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8f 4f       	sbci	r24, 0xFF	; 255
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	99 23       	and	r25, r25
    1522:	a9 f0       	breq	.+42     	; 0x154e <__floatsisf+0x40>
    1524:	f9 2f       	mov	r31, r25
    1526:	96 e9       	ldi	r25, 0x96	; 150
    1528:	bb 27       	eor	r27, r27
    152a:	93 95       	inc	r25
    152c:	f6 95       	lsr	r31
    152e:	87 95       	ror	r24
    1530:	77 95       	ror	r23
    1532:	67 95       	ror	r22
    1534:	b7 95       	ror	r27
    1536:	f1 11       	cpse	r31, r1
    1538:	f8 cf       	rjmp	.-16     	; 0x152a <__floatsisf+0x1c>
    153a:	fa f4       	brpl	.+62     	; 0x157a <__floatsisf+0x6c>
    153c:	bb 0f       	add	r27, r27
    153e:	11 f4       	brne	.+4      	; 0x1544 <__floatsisf+0x36>
    1540:	60 ff       	sbrs	r22, 0
    1542:	1b c0       	rjmp	.+54     	; 0x157a <__floatsisf+0x6c>
    1544:	6f 5f       	subi	r22, 0xFF	; 255
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	8f 4f       	sbci	r24, 0xFF	; 255
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	16 c0       	rjmp	.+44     	; 0x157a <__floatsisf+0x6c>
    154e:	88 23       	and	r24, r24
    1550:	11 f0       	breq	.+4      	; 0x1556 <__floatsisf+0x48>
    1552:	96 e9       	ldi	r25, 0x96	; 150
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <__floatsisf+0x6a>
    1556:	77 23       	and	r23, r23
    1558:	21 f0       	breq	.+8      	; 0x1562 <__floatsisf+0x54>
    155a:	9e e8       	ldi	r25, 0x8E	; 142
    155c:	87 2f       	mov	r24, r23
    155e:	76 2f       	mov	r23, r22
    1560:	05 c0       	rjmp	.+10     	; 0x156c <__floatsisf+0x5e>
    1562:	66 23       	and	r22, r22
    1564:	71 f0       	breq	.+28     	; 0x1582 <__floatsisf+0x74>
    1566:	96 e8       	ldi	r25, 0x86	; 134
    1568:	86 2f       	mov	r24, r22
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	2a f0       	brmi	.+10     	; 0x157a <__floatsisf+0x6c>
    1570:	9a 95       	dec	r25
    1572:	66 0f       	add	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	da f7       	brpl	.-10     	; 0x1570 <__floatsisf+0x62>
    157a:	88 0f       	add	r24, r24
    157c:	96 95       	lsr	r25
    157e:	87 95       	ror	r24
    1580:	97 f9       	bld	r25, 7
    1582:	08 95       	ret

00001584 <__fp_inf>:
    1584:	97 f9       	bld	r25, 7
    1586:	9f 67       	ori	r25, 0x7F	; 127
    1588:	80 e8       	ldi	r24, 0x80	; 128
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	08 95       	ret

00001590 <__fp_nan>:
    1590:	9f ef       	ldi	r25, 0xFF	; 255
    1592:	80 ec       	ldi	r24, 0xC0	; 192
    1594:	08 95       	ret

00001596 <__fp_pscA>:
    1596:	00 24       	eor	r0, r0
    1598:	0a 94       	dec	r0
    159a:	16 16       	cp	r1, r22
    159c:	17 06       	cpc	r1, r23
    159e:	18 06       	cpc	r1, r24
    15a0:	09 06       	cpc	r0, r25
    15a2:	08 95       	ret

000015a4 <__fp_pscB>:
    15a4:	00 24       	eor	r0, r0
    15a6:	0a 94       	dec	r0
    15a8:	12 16       	cp	r1, r18
    15aa:	13 06       	cpc	r1, r19
    15ac:	14 06       	cpc	r1, r20
    15ae:	05 06       	cpc	r0, r21
    15b0:	08 95       	ret

000015b2 <__fp_round>:
    15b2:	09 2e       	mov	r0, r25
    15b4:	03 94       	inc	r0
    15b6:	00 0c       	add	r0, r0
    15b8:	11 f4       	brne	.+4      	; 0x15be <__fp_round+0xc>
    15ba:	88 23       	and	r24, r24
    15bc:	52 f0       	brmi	.+20     	; 0x15d2 <__fp_round+0x20>
    15be:	bb 0f       	add	r27, r27
    15c0:	40 f4       	brcc	.+16     	; 0x15d2 <__fp_round+0x20>
    15c2:	bf 2b       	or	r27, r31
    15c4:	11 f4       	brne	.+4      	; 0x15ca <__fp_round+0x18>
    15c6:	60 ff       	sbrs	r22, 0
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <__fp_round+0x20>
    15ca:	6f 5f       	subi	r22, 0xFF	; 255
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	8f 4f       	sbci	r24, 0xFF	; 255
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	08 95       	ret

000015d4 <__fp_split3>:
    15d4:	57 fd       	sbrc	r21, 7
    15d6:	90 58       	subi	r25, 0x80	; 128
    15d8:	44 0f       	add	r20, r20
    15da:	55 1f       	adc	r21, r21
    15dc:	59 f0       	breq	.+22     	; 0x15f4 <__fp_splitA+0x10>
    15de:	5f 3f       	cpi	r21, 0xFF	; 255
    15e0:	71 f0       	breq	.+28     	; 0x15fe <__fp_splitA+0x1a>
    15e2:	47 95       	ror	r20

000015e4 <__fp_splitA>:
    15e4:	88 0f       	add	r24, r24
    15e6:	97 fb       	bst	r25, 7
    15e8:	99 1f       	adc	r25, r25
    15ea:	61 f0       	breq	.+24     	; 0x1604 <__fp_splitA+0x20>
    15ec:	9f 3f       	cpi	r25, 0xFF	; 255
    15ee:	79 f0       	breq	.+30     	; 0x160e <__fp_splitA+0x2a>
    15f0:	87 95       	ror	r24
    15f2:	08 95       	ret
    15f4:	12 16       	cp	r1, r18
    15f6:	13 06       	cpc	r1, r19
    15f8:	14 06       	cpc	r1, r20
    15fa:	55 1f       	adc	r21, r21
    15fc:	f2 cf       	rjmp	.-28     	; 0x15e2 <__fp_split3+0xe>
    15fe:	46 95       	lsr	r20
    1600:	f1 df       	rcall	.-30     	; 0x15e4 <__fp_splitA>
    1602:	08 c0       	rjmp	.+16     	; 0x1614 <__fp_splitA+0x30>
    1604:	16 16       	cp	r1, r22
    1606:	17 06       	cpc	r1, r23
    1608:	18 06       	cpc	r1, r24
    160a:	99 1f       	adc	r25, r25
    160c:	f1 cf       	rjmp	.-30     	; 0x15f0 <__fp_splitA+0xc>
    160e:	86 95       	lsr	r24
    1610:	71 05       	cpc	r23, r1
    1612:	61 05       	cpc	r22, r1
    1614:	08 94       	sec
    1616:	08 95       	ret

00001618 <__fp_zero>:
    1618:	e8 94       	clt

0000161a <__fp_szero>:
    161a:	bb 27       	eor	r27, r27
    161c:	66 27       	eor	r22, r22
    161e:	77 27       	eor	r23, r23
    1620:	cb 01       	movw	r24, r22
    1622:	97 f9       	bld	r25, 7
    1624:	08 95       	ret

00001626 <__mulsf3>:
    1626:	0e 94 26 0b 	call	0x164c	; 0x164c <__mulsf3x>
    162a:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_round>
    162e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fp_pscA>
    1632:	38 f0       	brcs	.+14     	; 0x1642 <__mulsf3+0x1c>
    1634:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__fp_pscB>
    1638:	20 f0       	brcs	.+8      	; 0x1642 <__mulsf3+0x1c>
    163a:	95 23       	and	r25, r21
    163c:	11 f0       	breq	.+4      	; 0x1642 <__mulsf3+0x1c>
    163e:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__fp_inf>
    1642:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__fp_nan>
    1646:	11 24       	eor	r1, r1
    1648:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__fp_szero>

0000164c <__mulsf3x>:
    164c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_split3>
    1650:	70 f3       	brcs	.-36     	; 0x162e <__mulsf3+0x8>

00001652 <__mulsf3_pse>:
    1652:	95 9f       	mul	r25, r21
    1654:	c1 f3       	breq	.-16     	; 0x1646 <__mulsf3+0x20>
    1656:	95 0f       	add	r25, r21
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	55 1f       	adc	r21, r21
    165c:	62 9f       	mul	r22, r18
    165e:	f0 01       	movw	r30, r0
    1660:	72 9f       	mul	r23, r18
    1662:	bb 27       	eor	r27, r27
    1664:	f0 0d       	add	r31, r0
    1666:	b1 1d       	adc	r27, r1
    1668:	63 9f       	mul	r22, r19
    166a:	aa 27       	eor	r26, r26
    166c:	f0 0d       	add	r31, r0
    166e:	b1 1d       	adc	r27, r1
    1670:	aa 1f       	adc	r26, r26
    1672:	64 9f       	mul	r22, r20
    1674:	66 27       	eor	r22, r22
    1676:	b0 0d       	add	r27, r0
    1678:	a1 1d       	adc	r26, r1
    167a:	66 1f       	adc	r22, r22
    167c:	82 9f       	mul	r24, r18
    167e:	22 27       	eor	r18, r18
    1680:	b0 0d       	add	r27, r0
    1682:	a1 1d       	adc	r26, r1
    1684:	62 1f       	adc	r22, r18
    1686:	73 9f       	mul	r23, r19
    1688:	b0 0d       	add	r27, r0
    168a:	a1 1d       	adc	r26, r1
    168c:	62 1f       	adc	r22, r18
    168e:	83 9f       	mul	r24, r19
    1690:	a0 0d       	add	r26, r0
    1692:	61 1d       	adc	r22, r1
    1694:	22 1f       	adc	r18, r18
    1696:	74 9f       	mul	r23, r20
    1698:	33 27       	eor	r19, r19
    169a:	a0 0d       	add	r26, r0
    169c:	61 1d       	adc	r22, r1
    169e:	23 1f       	adc	r18, r19
    16a0:	84 9f       	mul	r24, r20
    16a2:	60 0d       	add	r22, r0
    16a4:	21 1d       	adc	r18, r1
    16a6:	82 2f       	mov	r24, r18
    16a8:	76 2f       	mov	r23, r22
    16aa:	6a 2f       	mov	r22, r26
    16ac:	11 24       	eor	r1, r1
    16ae:	9f 57       	subi	r25, 0x7F	; 127
    16b0:	50 40       	sbci	r21, 0x00	; 0
    16b2:	9a f0       	brmi	.+38     	; 0x16da <__mulsf3_pse+0x88>
    16b4:	f1 f0       	breq	.+60     	; 0x16f2 <__mulsf3_pse+0xa0>
    16b6:	88 23       	and	r24, r24
    16b8:	4a f0       	brmi	.+18     	; 0x16cc <__mulsf3_pse+0x7a>
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	bb 1f       	adc	r27, r27
    16c0:	66 1f       	adc	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	91 50       	subi	r25, 0x01	; 1
    16c8:	50 40       	sbci	r21, 0x00	; 0
    16ca:	a9 f7       	brne	.-22     	; 0x16b6 <__mulsf3_pse+0x64>
    16cc:	9e 3f       	cpi	r25, 0xFE	; 254
    16ce:	51 05       	cpc	r21, r1
    16d0:	80 f0       	brcs	.+32     	; 0x16f2 <__mulsf3_pse+0xa0>
    16d2:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__fp_inf>
    16d6:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__fp_szero>
    16da:	5f 3f       	cpi	r21, 0xFF	; 255
    16dc:	e4 f3       	brlt	.-8      	; 0x16d6 <__mulsf3_pse+0x84>
    16de:	98 3e       	cpi	r25, 0xE8	; 232
    16e0:	d4 f3       	brlt	.-12     	; 0x16d6 <__mulsf3_pse+0x84>
    16e2:	86 95       	lsr	r24
    16e4:	77 95       	ror	r23
    16e6:	67 95       	ror	r22
    16e8:	b7 95       	ror	r27
    16ea:	f7 95       	ror	r31
    16ec:	e7 95       	ror	r30
    16ee:	9f 5f       	subi	r25, 0xFF	; 255
    16f0:	c1 f7       	brne	.-16     	; 0x16e2 <__mulsf3_pse+0x90>
    16f2:	fe 2b       	or	r31, r30
    16f4:	88 0f       	add	r24, r24
    16f6:	91 1d       	adc	r25, r1
    16f8:	96 95       	lsr	r25
    16fa:	87 95       	ror	r24
    16fc:	97 f9       	bld	r25, 7
    16fe:	08 95       	ret

00001700 <_exit>:
    1700:	f8 94       	cli

00001702 <__stop_program>:
    1702:	ff cf       	rjmp	.-2      	; 0x1702 <__stop_program>
