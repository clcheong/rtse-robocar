
robocarChatGPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00001a5a  00001aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ad  0080021a  0080021a  00001c08  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000031  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000175d  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000918  00000000  00000000  00003555  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cf4  00000000  00000000  00003e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00004b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000071b  00000000  00000000  00004c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003ae  00000000  00000000  0000534f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  000056fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e5       	ldi	r30, 0x5A	; 90
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 3c       	cpi	r26, 0xC7	; 199
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a7 0a 	call	0x154e	; 0x154e <main>
      9e:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      a8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 3c 0a 	call	0x1478	; 0x1478 <OSTimeDlyHMSM>
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <myrobot>
      ce:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <myrobot+0x1>
      d2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
      d6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
      da:	0e 94 15 04 	call	0x82a	; 0x82a <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 5);                /* Task period ~ 250 ms              */
      de:	25 e0       	ldi	r18, 0x05	; 5
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 3c 0a 	call	0x1478	; 0x1478 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    OS_ticks_init();                                        /* enable RTOS timer tick        */
      ee:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /* Task function                 */
      f2:	22 e0       	ldi	r18, 0x02	; 2
      f4:	49 e9       	ldi	r20, 0x99	; 153
      f6:	52 e0       	ldi	r21, 0x02	; 2
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	83 e5       	ldi	r24, 0x53	; 83
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     104:	23 e0       	ldi	r18, 0x03	; 3
     106:	42 e4       	ldi	r20, 0x42	; 66
     108:	53 e0       	ldi	r21, 0x03	; 3
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	85 e6       	ldi	r24, 0x65	; 101
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /* stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /* priority of task              */

    OSTaskCreate(Navig,                                     /* Task function                 */
     116:	24 e0       	ldi	r18, 0x04	; 4
     118:	42 e4       	ldi	r20, 0x42	; 66
     11a:	54 e0       	ldi	r21, 0x04	; 4
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	8e e6       	ldi	r24, 0x6E	; 110
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <OSTaskCreate>
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	45 e0       	ldi	r20, 0x05	; 5
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 3c 0a 	call	0x1478	; 0x1478 <OSTimeDlyHMSM>
     136:	f8 cf       	rjmp	.-16     	; 0x128 <TaskStart+0x3a>

00000138 <constrain>:
    int inBlackBox;
    int turn;
} myrobot;

int constrain(int value, int lowerBound, int upperBound) {
    if (value < lowerBound) {
     138:	86 17       	cp	r24, r22
     13a:	97 07       	cpc	r25, r23
     13c:	2c f0       	brlt	.+10     	; 0x148 <constrain+0x10>
     13e:	bc 01       	movw	r22, r24
     140:	48 17       	cp	r20, r24
     142:	59 07       	cpc	r21, r25
     144:	0c f4       	brge	.+2      	; 0x148 <constrain+0x10>
     146:	ba 01       	movw	r22, r20
        return upperBound;
    }
    else {
        return value;
    }
}
     148:	cb 01       	movw	r24, r22
     14a:	08 95       	ret

0000014c <absoluteValue>:

int absoluteValue(int num) {
     14c:	97 ff       	sbrs	r25, 7
     14e:	03 c0       	rjmp	.+6      	; 0x156 <absoluteValue+0xa>
     150:	91 95       	neg	r25
     152:	81 95       	neg	r24
     154:	91 09       	sbc	r25, r1
    if (num < 0)
        return -num;
    else
        return num;
}
     156:	08 95       	ret

00000158 <pidControl>:

void pidControl(int sense) {
     158:	4f 92       	push	r4
     15a:	5f 92       	push	r5
     15c:	6f 92       	push	r6
     15e:	7f 92       	push	r7
     160:	8f 92       	push	r8
     162:	9f 92       	push	r9
     164:	af 92       	push	r10
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inLightField == 1) {
     170:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <myrobot+0x23>
     174:	30 91 be 02 	lds	r19, 0x02BE	; 0x8002be <myrobot+0x24>
     178:	21 30       	cpi	r18, 0x01	; 1
     17a:	31 05       	cpc	r19, r1
     17c:	61 f4       	brne	.+24     	; 0x196 <pidControl+0x3e>
        myrobot.KP = 0.065;
     17e:	48 eb       	ldi	r20, 0xB8	; 184
     180:	5e e1       	ldi	r21, 0x1E	; 30
     182:	65 e8       	ldi	r22, 0x85	; 133
     184:	7d e3       	ldi	r23, 0x3D	; 61
     186:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <myrobot+0x5>
     18a:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <myrobot+0x6>
     18e:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <myrobot+0x7>
     192:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <myrobot+0x8>
    // } else {
    //     motorSpeed = DEFAULT_MOTOR_SPEED;
    //     myrobot.KP = DEFAULT_KP; 
    // }

    int error = myrobot.goal - sense;
     196:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <myrobot+0x19>
     19a:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <myrobot+0x1a>
     19e:	68 1b       	sub	r22, r24
     1a0:	79 0b       	sbc	r23, r25

    myrobot.integral = myrobot.integral + error;
     1a2:	07 2e       	mov	r0, r23
     1a4:	00 0c       	add	r0, r0
     1a6:	88 0b       	sbc	r24, r24
     1a8:	99 0b       	sbc	r25, r25
     1aa:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
     1ae:	6b 01       	movw	r12, r22
     1b0:	7c 01       	movw	r14, r24
     1b2:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <myrobot+0x15>
     1b6:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <myrobot+0x16>
     1ba:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <myrobot+0x17>
     1be:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <myrobot+0x18>
     1c2:	0e 94 8e 0b 	call	0x171c	; 0x171c <__addsf3>
     1c6:	4b 01       	movw	r8, r22
     1c8:	5c 01       	movw	r10, r24
     1ca:	80 92 af 02 	sts	0x02AF, r8	; 0x8002af <myrobot+0x15>
     1ce:	90 92 b0 02 	sts	0x02B0, r9	; 0x8002b0 <myrobot+0x16>
     1d2:	a0 92 b1 02 	sts	0x02B1, r10	; 0x8002b1 <myrobot+0x17>
     1d6:	b0 92 b2 02 	sts	0x02B2, r11	; 0x8002b2 <myrobot+0x18>
    //     myrobot.turn += 1;
    // }


    // Calculate motor adjustments
    int adjustment = (myrobot.KP * error) + (myrobot.KI * (myrobot.integral)) + (myrobot.KD * (error - myrobot.lastError));
     1da:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <myrobot+0x5>
     1de:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <myrobot+0x6>
     1e2:	40 91 a1 02 	lds	r20, 0x02A1	; 0x8002a1 <myrobot+0x7>
     1e6:	50 91 a2 02 	lds	r21, 0x02A2	; 0x8002a2 <myrobot+0x8>
     1ea:	c7 01       	movw	r24, r14
     1ec:	b6 01       	movw	r22, r12
     1ee:	0e 94 be 0c 	call	0x197c	; 0x197c <__mulsf3>
     1f2:	2b 01       	movw	r4, r22
     1f4:	3c 01       	movw	r6, r24
     1f6:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <myrobot+0xd>
     1fa:	30 91 a8 02 	lds	r19, 0x02A8	; 0x8002a8 <myrobot+0xe>
     1fe:	40 91 a9 02 	lds	r20, 0x02A9	; 0x8002a9 <myrobot+0xf>
     202:	50 91 aa 02 	lds	r21, 0x02AA	; 0x8002aa <myrobot+0x10>
     206:	c5 01       	movw	r24, r10
     208:	b4 01       	movw	r22, r8
     20a:	0e 94 be 0c 	call	0x197c	; 0x197c <__mulsf3>
     20e:	9b 01       	movw	r18, r22
     210:	ac 01       	movw	r20, r24
     212:	c3 01       	movw	r24, r6
     214:	b2 01       	movw	r22, r4
     216:	0e 94 8e 0b 	call	0x171c	; 0x171c <__addsf3>
     21a:	4b 01       	movw	r8, r22
     21c:	5c 01       	movw	r10, r24
     21e:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <myrobot+0x11>
     222:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <myrobot+0x12>
     226:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <myrobot+0x13>
     22a:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <myrobot+0x14>
     22e:	c7 01       	movw	r24, r14
     230:	b6 01       	movw	r22, r12
     232:	0e 94 8d 0b 	call	0x171a	; 0x171a <__subsf3>
     236:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <myrobot+0x9>
     23a:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <myrobot+0xa>
     23e:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <myrobot+0xb>
     242:	50 91 a6 02 	lds	r21, 0x02A6	; 0x8002a6 <myrobot+0xc>
     246:	0e 94 be 0c 	call	0x197c	; 0x197c <__mulsf3>
     24a:	9b 01       	movw	r18, r22
     24c:	ac 01       	movw	r20, r24
     24e:	c5 01       	movw	r24, r10
     250:	b4 01       	movw	r22, r8
     252:	0e 94 8e 0b 	call	0x171c	; 0x171c <__addsf3>
     256:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fixsfsi>

    // Store error for the next iteration
    myrobot.lastError = error;
     25a:	c0 92 ab 02 	sts	0x02AB, r12	; 0x8002ab <myrobot+0x11>
     25e:	d0 92 ac 02 	sts	0x02AC, r13	; 0x8002ac <myrobot+0x12>
     262:	e0 92 ad 02 	sts	0x02AD, r14	; 0x8002ad <myrobot+0x13>
     266:	f0 92 ae 02 	sts	0x02AE, r15	; 0x8002ae <myrobot+0x14>

    // Adjust motors
    myrobot.lspeed = constrain((motorSpeed - adjustment), -100 , 100);
     26a:	29 e1       	ldi	r18, 0x19	; 25
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	26 1b       	sub	r18, r22
     270:	37 0b       	sbc	r19, r23
     272:	25 36       	cpi	r18, 0x65	; 101
     274:	31 05       	cpc	r19, r1
     276:	14 f0       	brlt	.+4      	; 0x27c <pidControl+0x124>
     278:	24 e6       	ldi	r18, 0x64	; 100
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	2c 39       	cpi	r18, 0x9C	; 156
     27e:	4f ef       	ldi	r20, 0xFF	; 255
     280:	34 07       	cpc	r19, r20
     282:	14 f4       	brge	.+4      	; 0x288 <pidControl+0x130>
     284:	2c e9       	ldi	r18, 0x9C	; 156
     286:	3f ef       	ldi	r19, 0xFF	; 255
     288:	30 93 9d 02 	sts	0x029D, r19	; 0x80029d <myrobot+0x3>
     28c:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <myrobot+0x2>
    myrobot.rspeed = constrain((motorSpeed + adjustment), -100 , 100);
     290:	67 5e       	subi	r22, 0xE7	; 231
     292:	7f 4f       	sbci	r23, 0xFF	; 255
     294:	65 36       	cpi	r22, 0x65	; 101
     296:	71 05       	cpc	r23, r1
     298:	14 f0       	brlt	.+4      	; 0x29e <pidControl+0x146>
     29a:	64 e6       	ldi	r22, 0x64	; 100
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	6c 39       	cpi	r22, 0x9C	; 156
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	78 07       	cpc	r23, r24
     2a4:	14 f4       	brge	.+4      	; 0x2aa <pidControl+0x152>
     2a6:	6c e9       	ldi	r22, 0x9C	; 156
     2a8:	7f ef       	ldi	r23, 0xFF	; 255
     2aa:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <myrobot+0x1>
     2ae:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <myrobot>
    

    myrobot.prevLeftSpeed = myrobot.lspeed;
     2b2:	30 93 b6 02 	sts	0x02B6, r19	; 0x8002b6 <myrobot+0x1c>
     2b6:	20 93 b5 02 	sts	0x02B5, r18	; 0x8002b5 <myrobot+0x1b>
    myrobot.prevRightSpeed = myrobot.rspeed;
     2ba:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <myrobot+0x1e>
     2be:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <myrobot+0x1d>
}
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	9f 90       	pop	r9
     2d0:	8f 90       	pop	r8
     2d2:	7f 90       	pop	r7
     2d4:	6f 90       	pop	r6
     2d6:	5f 90       	pop	r5
     2d8:	4f 90       	pop	r4
     2da:	08 95       	ret

000002dc <Navig>:

void Navig (void *data)
{
    

    int pressCount = 0;
     2dc:	51 2c       	mov	r5, r1
     2de:	41 2c       	mov	r4, r1
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     2e0:	02 ee       	ldi	r16, 0xE2	; 226
     2e2:	1f ef       	ldi	r17, 0xFF	; 255

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     2e4:	81 e4       	ldi	r24, 0x41	; 65
     2e6:	e8 2e       	mov	r14, r24
     2e8:	f1 2c       	mov	r15, r1

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     2ea:	9d ed       	ldi	r25, 0xDD	; 221
     2ec:	c9 2e       	mov	r12, r25
     2ee:	dd 24       	eor	r13, r13
     2f0:	da 94       	dec	r13
                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
     2f2:	2d e2       	ldi	r18, 0x2D	; 45
     2f4:	62 2e       	mov	r6, r18
     2f6:	71 2c       	mov	r7, r1

            } else {

                // normal mode
                switch (sensorValue) {
                    case 2: myrobot.lspeed = 50;
     2f8:	32 e3       	ldi	r19, 0x32	; 50
     2fa:	a3 2e       	mov	r10, r19
     2fc:	b1 2c       	mov	r11, r1
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
                            break;

                    case 0: myrobot.lspeed = 30;
     2fe:	4e e1       	ldi	r20, 0x1E	; 30
     300:	84 2e       	mov	r8, r20
     302:	91 2c       	mov	r9, r1
                            myrobot.rspeed = 60;
     304:	5c e3       	ldi	r21, 0x3C	; 60
     306:	25 2e       	mov	r2, r21
     308:	31 2c       	mov	r3, r1
		// {
		// 	myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
        //     myrobot.lspeed   =  LOW_SPEED;
		// }

        int lightSense = robo_lightSensor();
     30a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <robo_lightSensor>
     30e:	ec 01       	movw	r28, r24

        if(robo_goPressed() != NULL){
     310:	0e 94 d7 04 	call	0x9ae	; 0x9ae <robo_goPressed>
     314:	88 23       	and	r24, r24
     316:	19 f1       	breq	.+70     	; 0x35e <Navig+0x82>

            while(robo_goPressed() != NULL);
     318:	0e 94 d7 04 	call	0x9ae	; 0x9ae <robo_goPressed>
     31c:	81 11       	cpse	r24, r1
     31e:	fc cf       	rjmp	.-8      	; 0x318 <Navig+0x3c>

            pressCount++;
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	48 1a       	sub	r4, r24
     324:	58 0a       	sbc	r5, r24
            if (pressCount >= 5){
     326:	95 e0       	ldi	r25, 0x05	; 5
     328:	49 16       	cp	r4, r25
     32a:	51 04       	cpc	r5, r1
     32c:	64 f1       	brlt	.+88     	; 0x386 <Navig+0xaa>
                myrobot.inBlackBox = 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <myrobot+0x26>
     336:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <myrobot+0x25>
                } else {
                    myrobot.inRoundabout = 0;
                }
            }

            if(myrobot.inBlackBox == 1){
     33a:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <myrobot+0x25>
     33e:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <myrobot+0x26>
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	11 f4       	brne	.+4      	; 0x34a <Navig+0x6e>
                robo_Honk();
     346:	0e 94 b8 04 	call	0x970	; 0x970 <robo_Honk>
            }
            
            if (myrobot.inBlackBox == 0) {
     34a:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <myrobot+0x25>
     34e:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <myrobot+0x26>
     352:	89 2b       	or	r24, r25
     354:	21 f4       	brne	.+8      	; 0x35e <Navig+0x82>
                robo_LED_toggle();
     356:	85 b1       	in	r24, 0x05	; 5
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	89 27       	eor	r24, r25
     35c:	85 b9       	out	0x05, r24	; 5
            }

        }


        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
     35e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	09 f0       	breq	.+2      	; 0x368 <Navig+0x8c>
     366:	4e c0       	rjmp	.+156    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     368:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <myrobot+0x23>
     36c:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <myrobot+0x24>
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	09 f5       	brne	.+66     	; 0x3b6 <Navig+0xda>
            myrobot.lspeed = 0;
     374:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
     378:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
            myrobot.rspeed = 0;
     37c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
     380:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
     384:	c2 cf       	rjmp	.-124    	; 0x30a <Navig+0x2e>

            pressCount++;
            if (pressCount >= 5){
                myrobot.inBlackBox = 1;
            } else {
                if (myrobot.inRoundabout == 0 && myrobot.inBlackBox == 0) {
     386:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <myrobot+0x1f>
     38a:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <myrobot+0x20>
     38e:	89 2b       	or	r24, r25
     390:	69 f4       	brne	.+26     	; 0x3ac <Navig+0xd0>
     392:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <myrobot+0x25>
     396:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <myrobot+0x26>
     39a:	89 2b       	or	r24, r25
     39c:	39 f4       	brne	.+14     	; 0x3ac <Navig+0xd0>
                    myrobot.inRoundabout = 1;
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <myrobot+0x20>
     3a6:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <myrobot+0x1f>
     3aa:	c7 cf       	rjmp	.-114    	; 0x33a <Navig+0x5e>
                } else {
                    myrobot.inRoundabout = 0;
     3ac:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <myrobot+0x20>
     3b0:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <myrobot+0x1f>
     3b4:	c2 cf       	rjmp	.-124    	; 0x33a <Navig+0x5e>

        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
            myrobot.lspeed = 0;
            myrobot.rspeed = 0;
        } else if (myrobot.obstacle == 1) {
            myrobot.inLightField = 0;
     3b6:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <myrobot+0x24>
     3ba:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <myrobot+0x23>
            myrobot.inRoundabout = 0;
     3be:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <myrobot+0x20>
     3c2:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <myrobot+0x1f>
            myrobot.lspeed = 30;
     3c6:	90 92 9d 02 	sts	0x029D, r9	; 0x80029d <myrobot+0x3>
     3ca:	80 92 9c 02 	sts	0x029C, r8	; 0x80029c <myrobot+0x2>
            myrobot.rspeed = -30;
     3ce:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     3d2:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 500); // TUNE HERE
     3d6:	24 ef       	ldi	r18, 0xF4	; 244
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <OSTimeDlyHMSM>

            myrobot.lspeed = 60;
     3e4:	30 92 9d 02 	sts	0x029D, r3	; 0x80029d <myrobot+0x3>
     3e8:	20 92 9c 02 	sts	0x029C, r2	; 0x80029c <myrobot+0x2>
            myrobot.rspeed = 60;
     3ec:	30 92 9b 02 	sts	0x029B, r3	; 0x80029b <myrobot+0x1>
     3f0:	20 92 9a 02 	sts	0x029A, r2	; 0x80029a <myrobot>
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE
     3f4:	20 e2       	ldi	r18, 0x20	; 32
     3f6:	33 e0       	ldi	r19, 0x03	; 3
     3f8:	41 e0       	ldi	r20, 0x01	; 1
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 5);                /* Task period ~ 500 ms                  */
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 3c 0a 	call	0x1478	; 0x1478 <OSTimeDlyHMSM>
     402:	83 cf       	rjmp	.-250    	; 0x30a <Navig+0x2e>

            myrobot.lspeed = 60;
            myrobot.rspeed = 60;
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE

        } else if (lightSense >= 85 && myrobot.inLightField == 0) {
     404:	c5 35       	cpi	r28, 0x55	; 85
     406:	d1 05       	cpc	r29, r1
     408:	6c f1       	brlt	.+90     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
     40a:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <myrobot+0x23>
     40e:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <myrobot+0x24>
     412:	89 2b       	or	r24, r25
     414:	39 f5       	brne	.+78     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
            myrobot.inRoundabout = 0;
     416:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <myrobot+0x20>
     41a:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <myrobot+0x1f>
            myrobot.inLightField = 1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <myrobot+0x24>
     426:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <myrobot+0x23>
            myrobot.lspeed = 30;
     42a:	90 92 9d 02 	sts	0x029D, r9	; 0x80029d <myrobot+0x3>
     42e:	80 92 9c 02 	sts	0x029C, r8	; 0x80029c <myrobot+0x2>
            myrobot.rspeed = 30;
     432:	90 92 9b 02 	sts	0x029B, r9	; 0x80029b <myrobot+0x1>
     436:	80 92 9a 02 	sts	0x029A, r8	; 0x80029a <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 600); // TUNE HERE
     43a:	28 e5       	ldi	r18, 0x58	; 88
     43c:	32 e0       	ldi	r19, 0x02	; 2
     43e:	40 e0       	ldi	r20, 0x00	; 0
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 3c 0a 	call	0x1478	; 0x1478 <OSTimeDlyHMSM>

            myrobot.lspeed = -65;
     448:	8f eb       	ldi	r24, 0xBF	; 191
     44a:	9f ef       	ldi	r25, 0xFF	; 255
     44c:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <myrobot+0x3>
     450:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <myrobot+0x2>
            myrobot.rspeed = 65;
     454:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     458:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 400); // TUNE HERE  200
     45c:	20 e9       	ldi	r18, 0x90	; 144
     45e:	31 e0       	ldi	r19, 0x01	; 1
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 5);                /* Task period ~ 500 ms                  */
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	cb cf       	rjmp	.-106    	; 0x3fa <Navig+0x11e>
            myrobot.lspeed = -65;
            myrobot.rspeed = 65;
            OSTimeDlyHMSM(0, 0, 0, 400); // TUNE HERE  200
        } else {

            int sense = myrobot.goal;
     464:	c0 91 b3 02 	lds	r28, 0x02B3	; 0x8002b3 <myrobot+0x19>
     468:	d0 91 b4 02 	lds	r29, 0x02B4	; 0x8002b4 <myrobot+0x1a>

            int sensorValue = robo_lineSensor();
     46c:	0e 94 93 04 	call	0x926	; 0x926 <robo_lineSensor>
     470:	fc 01       	movw	r30, r24

            // if(sensorValue == 100) {
            if(myrobot.inRoundabout == 1) {
     472:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <myrobot+0x1f>
     476:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <myrobot+0x20>
     47a:	21 30       	cpi	r18, 0x01	; 1
     47c:	31 05       	cpc	r19, r1
     47e:	d1 f4       	brne	.+52     	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>

                // roundabout mode

                switch (sensorValue) {
     480:	08 97       	sbiw	r24, 0x08	; 8
     482:	08 f0       	brcs	.+2      	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
     484:	3c c0       	rjmp	.+120    	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
     486:	e9 5b       	subi	r30, 0xB9	; 185
     488:	fd 4f       	sbci	r31, 0xFD	; 253
     48a:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__tablejump2__>
     48e:	88 02       	muls	r24, r24
     490:	88 02       	muls	r24, r24
     492:	73 02       	muls	r23, r19
     494:	4f 02       	muls	r20, r31
     496:	79 02       	muls	r23, r25
     498:	73 02       	muls	r23, r19
     49a:	57 02       	muls	r21, r23
     49c:	88 02       	muls	r24, r24
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 1500;
     49e:	cc ed       	ldi	r28, 0xDC	; 220
     4a0:	d5 e0       	ldi	r29, 0x05	; 5
                    default: myrobot.lspeed = -30;
                             myrobot.rspeed = -30;
                             break;
                }

                pidControl(sense);
     4a2:	ce 01       	movw	r24, r28
     4a4:	0e 94 ac 00 	call	0x158	; 0x158 <pidControl>
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 5);                /* Task period ~ 500 ms                  */
     4a8:	25 e0       	ldi	r18, 0x05	; 5
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	d9 cf       	rjmp	.-78     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
                            break;

                    case 5: sense = 1000;
                            break;

                    case 6: sense = 500;
     4ae:	c4 ef       	ldi	r28, 0xF4	; 244
     4b0:	d1 e0       	ldi	r29, 0x01	; 1
                            break;
     4b2:	f7 cf       	rjmp	.-18     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
                // myrobot.rspeed = - (myrobot.prevLeftSpeed * 1.1);
                
                //myrobot.lspeed = - 40;
               // myrobot.rspeed = - 30;

            } else if (myrobot.inLightField == 1) {
     4b4:	20 91 bd 02 	lds	r18, 0x02BD	; 0x8002bd <myrobot+0x23>
     4b8:	30 91 be 02 	lds	r19, 0x02BE	; 0x8002be <myrobot+0x24>
     4bc:	21 30       	cpi	r18, 0x01	; 1
     4be:	31 05       	cpc	r19, r1
     4c0:	51 f5       	brne	.+84     	; 0x516 <__FUSE_REGION_LENGTH__+0x116>

                // light field mode

                robo_LED_toggle();
     4c2:	25 b1       	in	r18, 0x05	; 5
     4c4:	31 e0       	ldi	r19, 0x01	; 1
     4c6:	23 27       	eor	r18, r19
     4c8:	25 b9       	out	0x05, r18	; 5

                switch (sensorValue) {
     4ca:	08 97       	sbiw	r24, 0x08	; 8
     4cc:	c0 f4       	brcc	.+48     	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
     4ce:	e5 59       	subi	r30, 0x95	; 149
     4d0:	fd 4f       	sbci	r31, 0xFD	; 253
     4d2:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__tablejump2__>
     4d6:	73 02       	muls	r23, r19
     4d8:	88 02       	muls	r24, r24
     4da:	73 02       	muls	r23, r19
     4dc:	76 02       	muls	r23, r22
     4de:	79 02       	muls	r23, r25
     4e0:	73 02       	muls	r23, r19
     4e2:	7c 02       	muls	r23, r28
     4e4:	73 02       	muls	r23, r19
                    case 2: sense = 1000;
     4e6:	c8 ee       	ldi	r28, 0xE8	; 232
     4e8:	d3 e0       	ldi	r29, 0x03	; 3
     4ea:	db cf       	rjmp	.-74     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 2500;
     4ec:	c4 ec       	ldi	r28, 0xC4	; 196
     4ee:	d9 e0       	ldi	r29, 0x09	; 9
                            break;
     4f0:	d8 cf       	rjmp	.-80     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>

                    case 4: sense = 0;
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
     4f4:	c0 e0       	ldi	r28, 0x00	; 0
                            break;
     4f6:	d5 cf       	rjmp	.-86     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>

                    case 5: sense = 1000;
                            break;

                    case 6: sense = -500;
     4f8:	cc e0       	ldi	r28, 0x0C	; 12
     4fa:	de ef       	ldi	r29, 0xFE	; 254
                            break;
     4fc:	d2 cf       	rjmp	.-92     	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
                            break;
                    case 0:
                            sense = 1000;
                            break;               
                    
                    default: myrobot.lspeed = -30;
     4fe:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     502:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
                             myrobot.rspeed = -30;
     506:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     50a:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
                             break;
     50e:	c9 cf       	rjmp	.-110    	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>

                switch (sensorValue) {
                    case 2: sense = 1000;
                            break;
                    
                    case 1: sense = 2000;
     510:	c0 ed       	ldi	r28, 0xD0	; 208
     512:	d7 e0       	ldi	r29, 0x07	; 7
     514:	c6 cf       	rjmp	.-116    	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
                             break;
                }

                pidControl(sense);

            } else if (myrobot.inBlackBox == 1) {
     516:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <myrobot+0x25>
     51a:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <myrobot+0x26>
     51e:	21 30       	cpi	r18, 0x01	; 1
     520:	31 05       	cpc	r19, r1
     522:	09 f0       	breq	.+2      	; 0x526 <__FUSE_REGION_LENGTH__+0x126>
     524:	3a c0       	rjmp	.+116    	; 0x59a <__FUSE_REGION_LENGTH__+0x19a>

                switch (sensorValue) {
     526:	08 97       	sbiw	r24, 0x08	; 8
     528:	08 f0       	brcs	.+2      	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
     52a:	ae c0       	rjmp	.+348    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
     52c:	e6 56       	subi	r30, 0x66	; 102
     52e:	fd 4f       	sbci	r31, 0xFD	; 253
     530:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__tablejump2__>
     534:	c4 02       	muls	r28, r20
     536:	e5 02       	muls	r30, r21
     538:	dc 02       	muls	r29, r28
     53a:	ee 02       	muls	r30, r30
     53c:	f3 02       	muls	r31, r19
     53e:	a2 02       	muls	r26, r18
     540:	07 03       	mulsu	r16, r23
     542:	bd 02       	muls	r27, r29

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
                            break;

                    case 5: myrobot.lspeed = 75;
     544:	8b e4       	ldi	r24, 0x4B	; 75
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <myrobot+0x3>
     54c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <myrobot+0x2>
                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
     550:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <myrobot+0x1>
     554:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <myrobot>
                             myrobot.rspeed = -30;
                             break;
                }

                if(sensorValue != 0) {
                    myrobot.prevLeftSpeed = myrobot.lspeed;
     558:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
     55c:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
     560:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <myrobot+0x1c>
     564:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <myrobot+0x1b>
                    myrobot.prevRightSpeed = myrobot.rspeed;
     568:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <myrobot>
     56c:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <myrobot+0x1>
     570:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <myrobot+0x1e>
     574:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <myrobot+0x1d>
     578:	97 cf       	rjmp	.-210    	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     57a:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     57e:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
                            myrobot.rspeed = 75;
     582:	8b e4       	ldi	r24, 0x4B	; 75
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	e4 cf       	rjmp	.-56     	; 0x550 <__FUSE_REGION_LENGTH__+0x150>
                            break;

                    case 0: myrobot.lspeed = 30;
     588:	90 92 9d 02 	sts	0x029D, r9	; 0x80029d <myrobot+0x3>
     58c:	80 92 9c 02 	sts	0x029C, r8	; 0x80029c <myrobot+0x2>
                            myrobot.rspeed = 60;
     590:	30 92 9b 02 	sts	0x029B, r3	; 0x80029b <myrobot+0x1>
     594:	20 92 9a 02 	sts	0x029A, r2	; 0x80029a <myrobot>
     598:	87 cf       	rjmp	.-242    	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
                }

            } else {

                // normal mode
                switch (sensorValue) {
     59a:	08 97       	sbiw	r24, 0x08	; 8
     59c:	08 f0       	brcs	.+2      	; 0x5a0 <__FUSE_REGION_LENGTH__+0x1a0>
     59e:	74 c0       	rjmp	.+232    	; 0x688 <__FUSE_REGION_LENGTH__+0x288>
     5a0:	ec 52       	subi	r30, 0x2C	; 44
     5a2:	fd 4f       	sbci	r31, 0xFD	; 253
     5a4:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__tablejump2__>
     5a8:	13 03       	mulsu	r17, r19
     5aa:	e5 02       	muls	r30, r21
     5ac:	dc 02       	muls	r29, r28
     5ae:	ee 02       	muls	r30, r30
     5b0:	f3 02       	muls	r31, r19
     5b2:	fc 02       	muls	r31, r28
     5b4:	07 03       	mulsu	r16, r23
     5b6:	0c 03       	fmul	r16, r20
                    case 2: myrobot.lspeed = 50;
     5b8:	b0 92 9d 02 	sts	0x029D, r11	; 0x80029d <myrobot+0x3>
     5bc:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <myrobot+0x2>
                            myrobot.rspeed = 50;
     5c0:	b0 92 9b 02 	sts	0x029B, r11	; 0x80029b <myrobot+0x1>
     5c4:	a0 92 9a 02 	sts	0x029A, r10	; 0x80029a <myrobot>
                            break;
     5c8:	c7 cf       	rjmp	.-114    	; 0x558 <__FUSE_REGION_LENGTH__+0x158>
                    
                    case 1: myrobot.lspeed = 45;
     5ca:	70 92 9d 02 	sts	0x029D, r7	; 0x80029d <myrobot+0x3>
     5ce:	60 92 9c 02 	sts	0x029C, r6	; 0x80029c <myrobot+0x2>
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
     5d2:	d0 92 9b 02 	sts	0x029B, r13	; 0x80029b <myrobot+0x1>
     5d6:	c0 92 9a 02 	sts	0x029A, r12	; 0x80029a <myrobot>
                            break;
     5da:	be cf       	rjmp	.-132    	; 0x558 <__FUSE_REGION_LENGTH__+0x158>
                    
                    case 1: myrobot.lspeed = 45;
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
     5dc:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     5e0:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
     5e4:	f6 cf       	rjmp	.-20     	; 0x5d2 <__FUSE_REGION_LENGTH__+0x1d2>
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
     5e6:	d0 92 9d 02 	sts	0x029D, r13	; 0x80029d <myrobot+0x3>
     5ea:	c0 92 9c 02 	sts	0x029C, r12	; 0x80029c <myrobot+0x2>
                            myrobot.rspeed = 45;
     5ee:	70 92 9b 02 	sts	0x029B, r7	; 0x80029b <myrobot+0x1>
     5f2:	60 92 9a 02 	sts	0x029A, r6	; 0x80029a <myrobot>
                            break;
     5f6:	b0 cf       	rjmp	.-160    	; 0x558 <__FUSE_REGION_LENGTH__+0x158>

                    case 5: myrobot.lspeed = - 65;
     5f8:	8f eb       	ldi	r24, 0xBF	; 191
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <myrobot+0x3>
     600:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <myrobot+0x2>
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
     604:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     608:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
                            break;
     60c:	a5 cf       	rjmp	.-182    	; 0x558 <__FUSE_REGION_LENGTH__+0x158>

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     60e:	d0 92 9d 02 	sts	0x029D, r13	; 0x80029d <myrobot+0x3>
     612:	c0 92 9c 02 	sts	0x029C, r12	; 0x80029c <myrobot+0x2>
     616:	f6 cf       	rjmp	.-20     	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     618:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     61c:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
                            myrobot.rspeed = - 65;
     620:	8f eb       	ldi	r24, 0xBF	; 191
     622:	9f ef       	ldi	r25, 0xFF	; 255
     624:	95 cf       	rjmp	.-214    	; 0x550 <__FUSE_REGION_LENGTH__+0x150>
                            break;

                    case 0: //myrobot.lspeed = - 50;
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
     626:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <myrobot+0x1d>
     62a:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <myrobot+0x1e>
     62e:	66 5f       	subi	r22, 0xF6	; 246
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	07 2e       	mov	r0, r23
     634:	00 0c       	add	r0, r0
     636:	88 0b       	sbc	r24, r24
     638:	99 0b       	sbc	r25, r25
     63a:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
     63e:	2a e9       	ldi	r18, 0x9A	; 154
     640:	39 e9       	ldi	r19, 0x99	; 153
     642:	49 e1       	ldi	r20, 0x19	; 25
     644:	5f e3       	ldi	r21, 0x3F	; 63
     646:	0e 94 be 0c 	call	0x197c	; 0x197c <__mulsf3>
     64a:	90 58       	subi	r25, 0x80	; 128
     64c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fixsfsi>
     650:	70 93 9d 02 	sts	0x029D, r23	; 0x80029d <myrobot+0x3>
     654:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <myrobot+0x2>
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
     658:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <myrobot+0x1b>
     65c:	70 91 b6 02 	lds	r23, 0x02B6	; 0x8002b6 <myrobot+0x1c>
     660:	07 2e       	mov	r0, r23
     662:	00 0c       	add	r0, r0
     664:	88 0b       	sbc	r24, r24
     666:	99 0b       	sbc	r25, r25
     668:	0e 94 32 0c 	call	0x1864	; 0x1864 <__floatsisf>
     66c:	2a e9       	ldi	r18, 0x9A	; 154
     66e:	39 e9       	ldi	r19, 0x99	; 153
     670:	49 e1       	ldi	r20, 0x19	; 25
     672:	5f e3       	ldi	r21, 0x3F	; 63
     674:	0e 94 be 0c 	call	0x197c	; 0x197c <__mulsf3>
     678:	90 58       	subi	r25, 0x80	; 128
     67a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__fixsfsi>
     67e:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <myrobot+0x1>
     682:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <myrobot>
     686:	10 cf       	rjmp	.-480    	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     688:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     68c:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
                             myrobot.rspeed = -30;
     690:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     694:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
                             break;
     698:	5f cf       	rjmp	.-322    	; 0x558 <__FUSE_REGION_LENGTH__+0x158>

0000069a <ADC_init>:
     69a:	80 e4       	ldi	r24, 0x40	; 64
     69c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     6a0:	86 e8       	ldi	r24, 0x86	; 134
     6a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6a6:	08 95       	ret

000006a8 <ADC_read>:
     6a8:	f8 94       	cli
     6aa:	80 64       	ori	r24, 0x40	; 64
     6ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     6b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6b4:	80 64       	ori	r24, 0x40	; 64
     6b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6be:	84 ff       	sbrs	r24, 4
     6c0:	fc cf       	rjmp	.-8      	; 0x6ba <ADC_read+0x12>
     6c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6c6:	80 61       	ori	r24, 0x10	; 16
     6c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6cc:	78 94       	sei
     6ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     6d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     6d6:	93 70       	andi	r25, 0x03	; 3
     6d8:	08 95       	ret

000006da <PWM8_write>:
     6da:	81 11       	cpse	r24, r1
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <PWM8_write+0xe>
     6de:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     6e2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     6e6:	08 95       	ret
     6e8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     6ec:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     6f0:	08 95       	ret

000006f2 <motor_init>:
     6f2:	8a b1       	in	r24, 0x0a	; 10
     6f4:	80 6f       	ori	r24, 0xF0	; 240
     6f6:	8a b9       	out	0x0a, r24	; 10
     6f8:	8b b1       	in	r24, 0x0b	; 11
     6fa:	8f 70       	andi	r24, 0x0F	; 15
     6fc:	8b b9       	out	0x0b, r24	; 11
     6fe:	81 ea       	ldi	r24, 0xA1	; 161
     700:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     70a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     70e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     712:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     716:	a8 e8       	ldi	r26, 0x88	; 136
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	1c 92       	st	X, r1
     71c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     720:	ea e8       	ldi	r30, 0x8A	; 138
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	10 82       	st	Z, r1
     726:	84 b1       	in	r24, 0x04	; 4
     728:	86 60       	ori	r24, 0x06	; 6
     72a:	84 b9       	out	0x04, r24	; 4
     72c:	11 96       	adiw	r26, 0x01	; 1
     72e:	1c 92       	st	X, r1
     730:	1e 92       	st	-X, r1
     732:	11 82       	std	Z+1, r1	; 0x01
     734:	10 82       	st	Z, r1
     736:	08 95       	ret

00000738 <motor_set_speed>:
     738:	77 ff       	sbrs	r23, 7
     73a:	02 c0       	rjmp	.+4      	; 0x740 <motor_set_speed+0x8>
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	65 36       	cpi	r22, 0x65	; 101
     742:	71 05       	cpc	r23, r1
     744:	14 f0       	brlt	.+4      	; 0x74a <motor_set_speed+0x12>
     746:	64 e6       	ldi	r22, 0x64	; 100
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	9b 01       	movw	r18, r22
     74c:	22 0f       	add	r18, r18
     74e:	33 1f       	adc	r19, r19
     750:	75 95       	asr	r23
     752:	67 95       	ror	r22
     754:	62 0f       	add	r22, r18
     756:	73 1f       	adc	r23, r19
     758:	81 11       	cpse	r24, r1
     75a:	09 c0       	rjmp	.+18     	; 0x76e <motor_set_speed+0x36>
     75c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     760:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     764:	70 93 44 04 	sts	0x0444, r23	; 0x800444 <rightWst+0x1>
     768:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <rightWst>
     76c:	08 95       	ret
     76e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     772:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     776:	70 93 48 04 	sts	0x0448, r23	; 0x800448 <leftWst+0x1>
     77a:	60 93 47 04 	sts	0x0447, r22	; 0x800447 <leftWst>
     77e:	08 95       	ret

00000780 <motor_set_dir>:
     780:	cf 93       	push	r28
     782:	c6 2f       	mov	r28, r22
     784:	26 2f       	mov	r18, r22
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	81 11       	cpse	r24, r1
     78a:	2b c0       	rjmp	.+86     	; 0x7e2 <motor_set_dir+0x62>
     78c:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <rightWst+0x2>
     790:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <rightWst+0x3>
     794:	82 17       	cp	r24, r18
     796:	93 07       	cpc	r25, r19
     798:	59 f0       	breq	.+22     	; 0x7b0 <motor_set_dir+0x30>
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 9c 03 	call	0x738	; 0x738 <motor_set_speed>
     7a4:	8f e9       	ldi	r24, 0x9F	; 159
     7a6:	9f e0       	ldi	r25, 0x0F	; 15
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <motor_set_dir+0x28>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <motor_set_dir+0x2e>
     7ae:	00 00       	nop
     7b0:	c1 11       	cpse	r28, r1
     7b2:	0e c0       	rjmp	.+28     	; 0x7d0 <motor_set_dir+0x50>
     7b4:	5e 98       	cbi	0x0b, 6	; 11
     7b6:	5f 9a       	sbi	0x0b, 7	; 11
     7b8:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <rightWst+0x3>
     7bc:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <rightWst+0x2>
     7c0:	8f e3       	ldi	r24, 0x3F	; 63
     7c2:	9c e9       	ldi	r25, 0x9C	; 156
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <motor_set_dir+0x44>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <motor_set_dir+0x4a>
     7ca:	00 00       	nop
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret
     7d0:	5e 9a       	sbi	0x0b, 6	; 11
     7d2:	5f 98       	cbi	0x0b, 7	; 11
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <rightWst+0x3>
     7dc:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <rightWst+0x2>
     7e0:	ef cf       	rjmp	.-34     	; 0x7c0 <motor_set_dir+0x40>
     7e2:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <leftWst+0x2>
     7e6:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <leftWst+0x3>
     7ea:	82 17       	cp	r24, r18
     7ec:	93 07       	cpc	r25, r19
     7ee:	59 f0       	breq	.+22     	; 0x806 <motor_set_dir+0x86>
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 9c 03 	call	0x738	; 0x738 <motor_set_speed>
     7fa:	8f e9       	ldi	r24, 0x9F	; 159
     7fc:	9f e0       	ldi	r25, 0x0F	; 15
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <motor_set_dir+0x7e>
     802:	00 c0       	rjmp	.+0      	; 0x804 <motor_set_dir+0x84>
     804:	00 00       	nop
     806:	c1 11       	cpse	r28, r1
     808:	07 c0       	rjmp	.+14     	; 0x818 <motor_set_dir+0x98>
     80a:	5c 9a       	sbi	0x0b, 4	; 11
     80c:	5d 98       	cbi	0x0b, 5	; 11
     80e:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <leftWst+0x3>
     812:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <leftWst+0x2>
     816:	d4 cf       	rjmp	.-88     	; 0x7c0 <motor_set_dir+0x40>
     818:	5c 98       	cbi	0x0b, 4	; 11
     81a:	5d 9a       	sbi	0x0b, 5	; 11
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <leftWst+0x3>
     824:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <leftWst+0x2>
     828:	cb cf       	rjmp	.-106    	; 0x7c0 <motor_set_dir+0x40>

0000082a <robo_motorSpeed>:
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	ec 01       	movw	r28, r24
     834:	8b 01       	movw	r16, r22
     836:	97 ff       	sbrs	r25, 7
     838:	1c c0       	rjmp	.+56     	; 0x872 <robo_motorSpeed+0x48>
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	0e 94 c0 03 	call	0x780	; 0x780 <motor_set_dir>
     842:	d1 95       	neg	r29
     844:	c1 95       	neg	r28
     846:	d1 09       	sbc	r29, r1
     848:	17 ff       	sbrs	r17, 7
     84a:	18 c0       	rjmp	.+48     	; 0x87c <robo_motorSpeed+0x52>
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 c0 03 	call	0x780	; 0x780 <motor_set_dir>
     854:	11 95       	neg	r17
     856:	01 95       	neg	r16
     858:	11 09       	sbc	r17, r1
     85a:	b8 01       	movw	r22, r16
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 9c 03 	call	0x738	; 0x738 <motor_set_speed>
     862:	be 01       	movw	r22, r28
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	0c 94 9c 03 	jmp	0x738	; 0x738 <motor_set_speed>
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 c0 03 	call	0x780	; 0x780 <motor_set_dir>
     87a:	e6 cf       	rjmp	.-52     	; 0x848 <robo_motorSpeed+0x1e>
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 c0 03 	call	0x780	; 0x780 <motor_set_dir>
     884:	ea cf       	rjmp	.-44     	; 0x85a <robo_motorSpeed+0x30>

00000886 <USART0_init>:
     886:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     88a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     88e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     892:	88 e1       	ldi	r24, 0x18	; 24
     894:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     89e:	08 95       	ret

000008a0 <cputchar>:
     8a0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     8a4:	95 ff       	sbrs	r25, 5
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <cputchar>
     8a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     8ac:	08 95       	ret

000008ae <cgetchar>:
     8ae:	cf 93       	push	r28
     8b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     8b4:	87 ff       	sbrs	r24, 7
     8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <cgetchar+0x2>
     8b8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     8bc:	8c 2f       	mov	r24, r28
     8be:	0e 94 50 04 	call	0x8a0	; 0x8a0 <cputchar>
     8c2:	8c 2f       	mov	r24, r28
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <cputs>:
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ec 01       	movw	r28, r24
     8ce:	89 91       	ld	r24, Y+
     8d0:	81 11       	cpse	r24, r1
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <cputs+0x12>
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret
     8da:	0e 94 50 04 	call	0x8a0	; 0x8a0 <cputchar>
     8de:	f7 cf       	rjmp	.-18     	; 0x8ce <cputs+0x6>

000008e0 <robo_proxSensor>:
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ADC_read>
     8e6:	21 e0       	ldi	r18, 0x01	; 1
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	84 36       	cpi	r24, 0x64	; 100
     8ec:	91 05       	cpc	r25, r1
     8ee:	10 f0       	brcs	.+4      	; 0x8f4 <robo_proxSensor+0x14>
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	c9 01       	movw	r24, r18
     8f6:	08 95       	ret

000008f8 <robo_lightSensor>:
     8f8:	84 e0       	ldi	r24, 0x04	; 4
     8fa:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ADC_read>
     8fe:	2b ef       	ldi	r18, 0xFB	; 251
     900:	ac 01       	movw	r20, r24
     902:	24 03       	mulsu	r18, r20
     904:	c0 01       	movw	r24, r0
     906:	25 9f       	mul	r18, r21
     908:	90 0d       	add	r25, r0
     90a:	11 24       	eor	r1, r1
     90c:	85 50       	subi	r24, 0x05	; 5
     90e:	9c 4e       	sbci	r25, 0xEC	; 236
     910:	63 e3       	ldi	r22, 0x33	; 51
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	0e 94 37 0b 	call	0x166e	; 0x166e <__divmodhi4>
     918:	cb 01       	movw	r24, r22
     91a:	65 36       	cpi	r22, 0x65	; 101
     91c:	71 05       	cpc	r23, r1
     91e:	14 f0       	brlt	.+4      	; 0x924 <__stack+0x25>
     920:	84 e6       	ldi	r24, 0x64	; 100
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	08 95       	ret

00000926 <robo_lineSensor>:
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	c0 e0       	ldi	r28, 0x00	; 0
     92c:	d1 e0       	ldi	r29, 0x01	; 1
     92e:	cc 0f       	add	r28, r28
     930:	8d 2f       	mov	r24, r29
     932:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ADC_read>
     936:	8c 32       	cpi	r24, 0x2C	; 44
     938:	91 40       	sbci	r25, 0x01	; 1
     93a:	0c f4       	brge	.+2      	; 0x93e <robo_lineSensor+0x18>
     93c:	c1 60       	ori	r28, 0x01	; 1
     93e:	df 5f       	subi	r29, 0xFF	; 255
     940:	d4 30       	cpi	r29, 0x04	; 4
     942:	a9 f7       	brne	.-22     	; 0x92e <robo_lineSensor+0x8>
     944:	8c 2f       	mov	r24, r28
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <robo_bumpSensorR>:
     94e:	83 b1       	in	r24, 0x03	; 3
     950:	82 95       	swap	r24
     952:	8f 70       	andi	r24, 0x0F	; 15
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	89 27       	eor	r24, r25
     958:	81 70       	andi	r24, 0x01	; 1
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	08 95       	ret

0000095e <robo_bumpSensorL>:
     95e:	83 b1       	in	r24, 0x03	; 3
     960:	86 95       	lsr	r24
     962:	86 95       	lsr	r24
     964:	86 95       	lsr	r24
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	89 27       	eor	r24, r25
     96a:	81 70       	andi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	08 95       	ret

00000970 <robo_Honk>:
     970:	5b 9a       	sbi	0x0b, 3	; 11
     972:	2f ef       	ldi	r18, 0xFF	; 255
     974:	85 ea       	ldi	r24, 0xA5	; 165
     976:	9e e0       	ldi	r25, 0x0E	; 14
     978:	21 50       	subi	r18, 0x01	; 1
     97a:	80 40       	sbci	r24, 0x00	; 0
     97c:	90 40       	sbci	r25, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <robo_Honk+0x8>
     980:	00 c0       	rjmp	.+0      	; 0x982 <robo_Honk+0x12>
     982:	00 00       	nop
     984:	5b 98       	cbi	0x0b, 3	; 11
     986:	2f ef       	ldi	r18, 0xFF	; 255
     988:	85 ea       	ldi	r24, 0xA5	; 165
     98a:	9e e0       	ldi	r25, 0x0E	; 14
     98c:	21 50       	subi	r18, 0x01	; 1
     98e:	80 40       	sbci	r24, 0x00	; 0
     990:	90 40       	sbci	r25, 0x00	; 0
     992:	e1 f7       	brne	.-8      	; 0x98c <robo_Honk+0x1c>
     994:	00 c0       	rjmp	.+0      	; 0x996 <robo_Honk+0x26>
     996:	00 00       	nop
     998:	08 95       	ret

0000099a <robo_checkBattery>:
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ADC_read>
     9a0:	84 3f       	cpi	r24, 0xF4	; 244
     9a2:	91 40       	sbci	r25, 0x01	; 1
     9a4:	10 f4       	brcc	.+4      	; 0x9aa <robo_checkBattery+0x10>
     9a6:	28 9a       	sbi	0x05, 0	; 5
     9a8:	08 95       	ret
     9aa:	28 98       	cbi	0x05, 0	; 5
     9ac:	08 95       	ret

000009ae <robo_goPressed>:
     9ae:	89 b1       	in	r24, 0x09	; 9
     9b0:	82 fb       	bst	r24, 2
     9b2:	88 27       	eor	r24, r24
     9b4:	80 f9       	bld	r24, 0
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	89 27       	eor	r24, r25
     9ba:	08 95       	ret

000009bc <robo_wait4goPress>:
     9bc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <robo_goPressed>
     9c0:	88 23       	and	r24, r24
     9c2:	e1 f3       	breq	.-8      	; 0x9bc <robo_wait4goPress>
     9c4:	08 95       	ret

000009c6 <OS_ticks_init>:
     9c6:	f8 94       	cli
     9c8:	85 e0       	ldi	r24, 0x05	; 5
     9ca:	85 bd       	out	0x25, r24	; 37
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     9d2:	84 e6       	ldi	r24, 0x64	; 100
     9d4:	86 bd       	out	0x26, r24	; 38
     9d6:	78 94       	sei
     9d8:	08 95       	ret

000009da <HAL_init>:
     9da:	87 e6       	ldi	r24, 0x67	; 103
     9dc:	0e 94 43 04 	call	0x886	; 0x886 <USART0_init>
     9e0:	0c 94 4d 03 	jmp	0x69a	; 0x69a <ADC_init>

000009e4 <robo_Setup>:
     9e4:	0e 94 ed 04 	call	0x9da	; 0x9da <HAL_init>
     9e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <motor_init>
     9ec:	53 9a       	sbi	0x0a, 3	; 10
     9ee:	5b 98       	cbi	0x0b, 3	; 11
     9f0:	20 9a       	sbi	0x04, 0	; 4
     9f2:	52 98       	cbi	0x0a, 2	; 10
     9f4:	5a 9a       	sbi	0x0b, 2	; 11
     9f6:	24 98       	cbi	0x04, 4	; 4
     9f8:	23 98       	cbi	0x04, 3	; 4
     9fa:	85 b1       	in	r24, 0x05	; 5
     9fc:	88 61       	ori	r24, 0x18	; 24
     9fe:	85 b9       	out	0x05, r24	; 5
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 c0 03 	call	0x780	; 0x780 <motor_set_dir>
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 c0 03 	call	0x780	; 0x780 <motor_set_dir>
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0c 94 15 04 	jmp	0x82a	; 0x82a <robo_motorSpeed>

00000a1c <cprintf>:
     a1c:	4f 92       	push	r4
     a1e:	5f 92       	push	r5
     a20:	6f 92       	push	r6
     a22:	7f 92       	push	r7
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	de 01       	movw	r26, r28
     a42:	53 96       	adiw	r26, 0x13	; 19
     a44:	ed 91       	ld	r30, X+
     a46:	fd 91       	ld	r31, X+
     a48:	8d 01       	movw	r16, r26
     a4a:	5a e0       	ldi	r21, 0x0A	; 10
     a4c:	65 2e       	mov	r6, r21
     a4e:	71 2c       	mov	r7, r1
     a50:	80 81       	ld	r24, Z
     a52:	85 32       	cpi	r24, 0x25	; 37
     a54:	81 f4       	brne	.+32     	; 0xa76 <cprintf+0x5a>
     a56:	5f 01       	movw	r10, r30
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	a8 0e       	add	r10, r24
     a5c:	b1 1c       	adc	r11, r1
     a5e:	81 81       	ldd	r24, Z+1	; 0x01
     a60:	84 36       	cpi	r24, 0x64	; 100
     a62:	09 f4       	brne	.+2      	; 0xa66 <cprintf+0x4a>
     a64:	50 c0       	rjmp	.+160    	; 0xb06 <cprintf+0xea>
     a66:	90 f4       	brcc	.+36     	; 0xa8c <cprintf+0x70>
     a68:	83 36       	cpi	r24, 0x63	; 99
     a6a:	61 f4       	brne	.+24     	; 0xa84 <cprintf+0x68>
     a6c:	f8 01       	movw	r30, r16
     a6e:	80 81       	ld	r24, Z
     a70:	0e 5f       	subi	r16, 0xFE	; 254
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	07 c0       	rjmp	.+14     	; 0xa84 <cprintf+0x68>
     a76:	88 23       	and	r24, r24
     a78:	09 f4       	brne	.+2      	; 0xa7c <cprintf+0x60>
     a7a:	5d c0       	rjmp	.+186    	; 0xb36 <cprintf+0x11a>
     a7c:	5f 01       	movw	r10, r30
     a7e:	9f ef       	ldi	r25, 0xFF	; 255
     a80:	a9 1a       	sub	r10, r25
     a82:	b9 0a       	sbc	r11, r25
     a84:	0e 94 50 04 	call	0x8a0	; 0x8a0 <cputchar>
     a88:	f5 01       	movw	r30, r10
     a8a:	e2 cf       	rjmp	.-60     	; 0xa50 <cprintf+0x34>
     a8c:	83 37       	cpi	r24, 0x73	; 115
     a8e:	71 f1       	breq	.+92     	; 0xaec <cprintf+0xd0>
     a90:	30 e1       	ldi	r19, 0x10	; 16
     a92:	83 2e       	mov	r8, r19
     a94:	91 2c       	mov	r9, r1
     a96:	e1 2c       	mov	r14, r1
     a98:	40 e1       	ldi	r20, 0x10	; 16
     a9a:	f4 2e       	mov	r15, r20
     a9c:	88 37       	cpi	r24, 0x78	; 120
     a9e:	91 f7       	brne	.-28     	; 0xa84 <cprintf+0x68>
     aa0:	f8 01       	movw	r30, r16
     aa2:	c0 80       	ld	r12, Z
     aa4:	d1 80       	ldd	r13, Z+1	; 0x01
     aa6:	0e 5f       	subi	r16, 0xFE	; 254
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	84 36       	cpi	r24, 0x64	; 100
     aac:	59 f4       	brne	.+22     	; 0xac4 <cprintf+0xa8>
     aae:	d7 fe       	sbrs	r13, 7
     ab0:	06 c0       	rjmp	.+12     	; 0xabe <cprintf+0xa2>
     ab2:	d1 94       	neg	r13
     ab4:	c1 94       	neg	r12
     ab6:	d1 08       	sbc	r13, r1
     ab8:	8d e2       	ldi	r24, 0x2D	; 45
     aba:	0e 94 50 04 	call	0x8a0	; 0x8a0 <cputchar>
     abe:	ce 14       	cp	r12, r14
     ac0:	df 04       	cpc	r13, r15
     ac2:	48 f1       	brcs	.+82     	; 0xb16 <cprintf+0xfa>
     ac4:	c6 01       	movw	r24, r12
     ac6:	b7 01       	movw	r22, r14
     ac8:	0e 94 23 0b 	call	0x1646	; 0x1646 <__udivmodhi4>
     acc:	2c 01       	movw	r4, r24
     ace:	68 5f       	subi	r22, 0xF8	; 248
     ad0:	7d 4f       	sbci	r23, 0xFD	; 253
     ad2:	fb 01       	movw	r30, r22
     ad4:	80 81       	ld	r24, Z
     ad6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <cputchar>
     ada:	62 01       	movw	r12, r4
     adc:	c7 01       	movw	r24, r14
     ade:	b4 01       	movw	r22, r8
     ae0:	0e 94 23 0b 	call	0x1646	; 0x1646 <__udivmodhi4>
     ae4:	7b 01       	movw	r14, r22
     ae6:	67 2b       	or	r22, r23
     ae8:	69 f7       	brne	.-38     	; 0xac4 <cprintf+0xa8>
     aea:	ce cf       	rjmp	.-100    	; 0xa88 <cprintf+0x6c>
     aec:	f8 01       	movw	r30, r16
     aee:	e0 80       	ld	r14, Z
     af0:	f1 80       	ldd	r15, Z+1	; 0x01
     af2:	0e 5f       	subi	r16, 0xFE	; 254
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	f7 01       	movw	r30, r14
     af8:	81 91       	ld	r24, Z+
     afa:	7f 01       	movw	r14, r30
     afc:	88 23       	and	r24, r24
     afe:	21 f2       	breq	.-120    	; 0xa88 <cprintf+0x6c>
     b00:	0e 94 50 04 	call	0x8a0	; 0x8a0 <cputchar>
     b04:	f8 cf       	rjmp	.-16     	; 0xaf6 <cprintf+0xda>
     b06:	9a e0       	ldi	r25, 0x0A	; 10
     b08:	89 2e       	mov	r8, r25
     b0a:	91 2c       	mov	r9, r1
     b0c:	20 e1       	ldi	r18, 0x10	; 16
     b0e:	e2 2e       	mov	r14, r18
     b10:	27 e2       	ldi	r18, 0x27	; 39
     b12:	f2 2e       	mov	r15, r18
     b14:	c5 cf       	rjmp	.-118    	; 0xaa0 <cprintf+0x84>
     b16:	c7 01       	movw	r24, r14
     b18:	b3 01       	movw	r22, r6
     b1a:	0e 94 23 0b 	call	0x1646	; 0x1646 <__udivmodhi4>
     b1e:	7b 01       	movw	r14, r22
     b20:	62 30       	cpi	r22, 0x02	; 2
     b22:	71 05       	cpc	r23, r1
     b24:	60 f6       	brcc	.-104    	; 0xabe <cprintf+0xa2>
     b26:	c6 01       	movw	r24, r12
     b28:	0e 94 23 0b 	call	0x1646	; 0x1646 <__udivmodhi4>
     b2c:	fb 01       	movw	r30, r22
     b2e:	e8 5f       	subi	r30, 0xF8	; 248
     b30:	fd 4f       	sbci	r31, 0xFD	; 253
     b32:	80 81       	ld	r24, Z
     b34:	a7 cf       	rjmp	.-178    	; 0xa84 <cprintf+0x68>
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	8f 90       	pop	r8
     b52:	7f 90       	pop	r7
     b54:	6f 90       	pop	r6
     b56:	5f 90       	pop	r5
     b58:	4f 90       	pop	r4
     b5a:	08 95       	ret

00000b5c <OSStartHighRdy>:
     b5c:	00 91 4c 04 	lds	r16, 0x044C	; 0x80044c <OSRunning>
     b60:	03 95       	inc	r16
     b62:	00 93 4c 04 	sts	0x044C, r16	; 0x80044c <OSRunning>
     b66:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <OSTCBHighRdy>
     b6a:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <OSTCBHighRdy+0x1>
     b6e:	c1 91       	ld	r28, Z+
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	d1 91       	ld	r29, Z+
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f 91       	pop	r16
     b78:	0f bf       	out	0x3f, r16	; 63
     b7a:	ff 91       	pop	r31
     b7c:	ef 91       	pop	r30
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	bf 90       	pop	r11
     ba4:	af 90       	pop	r10
     ba6:	9f 90       	pop	r9
     ba8:	8f 90       	pop	r8
     baa:	7f 90       	pop	r7
     bac:	6f 90       	pop	r6
     bae:	5f 90       	pop	r5
     bb0:	4f 90       	pop	r4
     bb2:	3f 90       	pop	r3
     bb4:	2f 90       	pop	r2
     bb6:	1f 90       	pop	r1
     bb8:	0f 90       	pop	r0
     bba:	08 95       	ret

00000bbc <OSCtxSw>:
     bbc:	0f 92       	push	r0
     bbe:	1f 92       	push	r1
     bc0:	2f 92       	push	r2
     bc2:	3f 92       	push	r3
     bc4:	4f 92       	push	r4
     bc6:	5f 92       	push	r5
     bc8:	6f 92       	push	r6
     bca:	7f 92       	push	r7
     bcc:	8f 92       	push	r8
     bce:	9f 92       	push	r9
     bd0:	af 92       	push	r10
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	ef 93       	push	r30
     bfa:	ff 93       	push	r31
     bfc:	0f b7       	in	r16, 0x3f	; 63
     bfe:	0f 93       	push	r16
     c00:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <OSTCBCur>
     c04:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <OSTCBCur+0x1>
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	c1 93       	st	Z+, r28
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	d1 93       	st	Z+, r29
     c10:	00 91 51 04 	lds	r16, 0x0451	; 0x800451 <OSPrioHighRdy>
     c14:	00 93 52 04 	sts	0x0452, r16	; 0x800452 <OSPrioCur>
     c18:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <OSTCBHighRdy>
     c1c:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <OSTCBHighRdy+0x1>
     c20:	e0 93 64 04 	sts	0x0464, r30	; 0x800464 <OSTCBCur>
     c24:	f0 93 65 04 	sts	0x0465, r31	; 0x800465 <OSTCBCur+0x1>
     c28:	c1 91       	ld	r28, Z+
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	d1 91       	ld	r29, Z+
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f 91       	pop	r16
     c32:	0f bf       	out	0x3f, r16	; 63
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25
     c42:	8f 91       	pop	r24
     c44:	7f 91       	pop	r23
     c46:	6f 91       	pop	r22
     c48:	5f 91       	pop	r21
     c4a:	4f 91       	pop	r20
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
     c60:	9f 90       	pop	r9
     c62:	8f 90       	pop	r8
     c64:	7f 90       	pop	r7
     c66:	6f 90       	pop	r6
     c68:	5f 90       	pop	r5
     c6a:	4f 90       	pop	r4
     c6c:	3f 90       	pop	r3
     c6e:	2f 90       	pop	r2
     c70:	1f 90       	pop	r1
     c72:	0f 90       	pop	r0
     c74:	08 95       	ret

00000c76 <OSIntCtxSw>:
     c76:	00 91 51 04 	lds	r16, 0x0451	; 0x800451 <OSPrioHighRdy>
     c7a:	00 93 52 04 	sts	0x0452, r16	; 0x800452 <OSPrioCur>
     c7e:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <OSTCBHighRdy>
     c82:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <OSTCBHighRdy+0x1>
     c86:	e0 93 64 04 	sts	0x0464, r30	; 0x800464 <OSTCBCur>
     c8a:	f0 93 65 04 	sts	0x0465, r31	; 0x800465 <OSTCBCur+0x1>
     c8e:	c1 91       	ld	r28, Z+
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	d1 91       	ld	r29, Z+
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f 91       	pop	r16
     c98:	0f bf       	out	0x3f, r16	; 63
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	bf 91       	pop	r27
     ca4:	af 91       	pop	r26
     ca6:	9f 91       	pop	r25
     ca8:	8f 91       	pop	r24
     caa:	7f 91       	pop	r23
     cac:	6f 91       	pop	r22
     cae:	5f 91       	pop	r21
     cb0:	4f 91       	pop	r20
     cb2:	3f 91       	pop	r19
     cb4:	2f 91       	pop	r18
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	bf 90       	pop	r11
     cc4:	af 90       	pop	r10
     cc6:	9f 90       	pop	r9
     cc8:	8f 90       	pop	r8
     cca:	7f 90       	pop	r7
     ccc:	6f 90       	pop	r6
     cce:	5f 90       	pop	r5
     cd0:	4f 90       	pop	r4
     cd2:	3f 90       	pop	r3
     cd4:	2f 90       	pop	r2
     cd6:	1f 90       	pop	r1
     cd8:	0f 90       	pop	r0
     cda:	08 95       	ret

00000cdc <OSTickISR>:
     cdc:	0f 92       	push	r0
     cde:	1f 92       	push	r1
     ce0:	2f 92       	push	r2
     ce2:	3f 92       	push	r3
     ce4:	4f 92       	push	r4
     ce6:	5f 92       	push	r5
     ce8:	6f 92       	push	r6
     cea:	7f 92       	push	r7
     cec:	8f 92       	push	r8
     cee:	9f 92       	push	r9
     cf0:	af 92       	push	r10
     cf2:	bf 92       	push	r11
     cf4:	cf 92       	push	r12
     cf6:	df 92       	push	r13
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	ef 93       	push	r30
     d1a:	ff 93       	push	r31
     d1c:	0f b7       	in	r16, 0x3f	; 63
     d1e:	00 68       	ori	r16, 0x80	; 128
     d20:	0f 93       	push	r16
     d22:	00 91 63 04 	lds	r16, 0x0463	; 0x800463 <OSIntNesting>
     d26:	03 95       	inc	r16
     d28:	00 93 63 04 	sts	0x0463, r16	; 0x800463 <OSIntNesting>
     d2c:	01 30       	cpi	r16, 0x01	; 1
     d2e:	41 f4       	brne	.+16     	; 0xd40 <_not_first_int>
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <OSTCBCur>
     d38:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <OSTCBCur+0x1>
     d3c:	c1 93       	st	Z+, r28
     d3e:	d1 93       	st	Z+, r29

00000d40 <_not_first_int>:
     d40:	04 e6       	ldi	r16, 0x64	; 100
     d42:	06 bd       	out	0x26, r16	; 38
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	1f 2e       	mov	r1, r31
     d48:	78 94       	sei
     d4a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <OSTimeTick>
     d4e:	00 00       	nop
     d50:	0e 94 44 07 	call	0xe88	; 0xe88 <OSIntExit>
     d54:	0f 91       	pop	r16
     d56:	0f bf       	out	0x3f, r16	; 63
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	bf 90       	pop	r11
     d82:	af 90       	pop	r10
     d84:	9f 90       	pop	r9
     d86:	8f 90       	pop	r8
     d88:	7f 90       	pop	r7
     d8a:	6f 90       	pop	r6
     d8c:	5f 90       	pop	r5
     d8e:	4f 90       	pop	r4
     d90:	3f 90       	pop	r3
     d92:	2f 90       	pop	r2
     d94:	1f 90       	pop	r1
     d96:	0f 90       	pop	r0
     d98:	08 95       	ret

00000d9a <OSTaskStkInit>:
     d9a:	fa 01       	movw	r30, r20
     d9c:	80 83       	st	Z, r24
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	90 83       	st	Z, r25
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	10 82       	st	Z, r1
     da6:	31 97       	sbiw	r30, 0x01	; 1
     da8:	10 82       	st	Z, r1
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	10 82       	st	Z, r1
     dae:	31 97       	sbiw	r30, 0x01	; 1
     db0:	10 82       	st	Z, r1
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	10 82       	st	Z, r1
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	10 82       	st	Z, r1
     dba:	31 97       	sbiw	r30, 0x01	; 1
     dbc:	10 82       	st	Z, r1
     dbe:	31 97       	sbiw	r30, 0x01	; 1
     dc0:	10 82       	st	Z, r1
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	10 82       	st	Z, r1
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	10 82       	st	Z, r1
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	10 82       	st	Z, r1
     dce:	31 97       	sbiw	r30, 0x01	; 1
     dd0:	10 82       	st	Z, r1
     dd2:	31 97       	sbiw	r30, 0x01	; 1
     dd4:	10 82       	st	Z, r1
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	10 82       	st	Z, r1
     dda:	31 97       	sbiw	r30, 0x01	; 1
     ddc:	10 82       	st	Z, r1
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	10 82       	st	Z, r1
     de2:	31 97       	sbiw	r30, 0x01	; 1
     de4:	10 82       	st	Z, r1
     de6:	31 97       	sbiw	r30, 0x01	; 1
     de8:	10 82       	st	Z, r1
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	10 82       	st	Z, r1
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	10 82       	st	Z, r1
     df2:	31 97       	sbiw	r30, 0x01	; 1
     df4:	10 82       	st	Z, r1
     df6:	31 97       	sbiw	r30, 0x01	; 1
     df8:	10 82       	st	Z, r1
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	10 82       	st	Z, r1
     dfe:	31 97       	sbiw	r30, 0x01	; 1
     e00:	10 82       	st	Z, r1
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	60 83       	st	Z, r22
     e06:	31 97       	sbiw	r30, 0x01	; 1
     e08:	70 83       	st	Z, r23
     e0a:	31 97       	sbiw	r30, 0x01	; 1
     e0c:	10 82       	st	Z, r1
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	10 82       	st	Z, r1
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	10 82       	st	Z, r1
     e16:	31 97       	sbiw	r30, 0x01	; 1
     e18:	10 82       	st	Z, r1
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	10 82       	st	Z, r1
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	10 82       	st	Z, r1
     e22:	31 97       	sbiw	r30, 0x01	; 1
     e24:	80 e8       	ldi	r24, 0x80	; 128
     e26:	80 83       	st	Z, r24
     e28:	ca 01       	movw	r24, r20
     e2a:	83 97       	sbiw	r24, 0x23	; 35
     e2c:	08 95       	ret

00000e2e <OSTaskCreateHook>:
     e2e:	08 95       	ret

00000e30 <OSTaskDelHook>:
     e30:	08 95       	ret

00000e32 <OSTaskSwHook>:
     e32:	08 95       	ret

00000e34 <OSTaskStatHook>:
     e34:	08 95       	ret

00000e36 <OSTimeTickHook>:
     e36:	08 95       	ret

00000e38 <OSInitHookBegin>:
     e38:	08 95       	ret

00000e3a <OSInitHookEnd>:
     e3a:	08 95       	ret

00000e3c <OSTaskIdleHook>:
     e3c:	08 95       	ret

00000e3e <OSTCBInitHook>:
     e3e:	08 95       	ret

00000e40 <OS_TaskIdle>:
     e40:	f8 94       	cli
     e42:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <OSIdleCtr>
     e46:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <OSIdleCtr+0x1>
     e4a:	a0 91 4f 04 	lds	r26, 0x044F	; 0x80044f <OSIdleCtr+0x2>
     e4e:	b0 91 50 04 	lds	r27, 0x0450	; 0x800450 <OSIdleCtr+0x3>
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	a1 1d       	adc	r26, r1
     e56:	b1 1d       	adc	r27, r1
     e58:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <OSIdleCtr>
     e5c:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <OSIdleCtr+0x1>
     e60:	a0 93 4f 04 	sts	0x044F, r26	; 0x80044f <OSIdleCtr+0x2>
     e64:	b0 93 50 04 	sts	0x0450, r27	; 0x800450 <OSIdleCtr+0x3>
     e68:	78 94       	sei
     e6a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <OSTaskIdleHook>
     e6e:	e8 cf       	rjmp	.-48     	; 0xe40 <OS_TaskIdle>

00000e70 <OSIntEnter>:
     e70:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSRunning>
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	39 f4       	brne	.+14     	; 0xe86 <OSIntEnter+0x16>
     e78:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <OSIntNesting>
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	19 f0       	breq	.+6      	; 0xe86 <OSIntEnter+0x16>
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <OSIntNesting>
     e86:	08 95       	ret

00000e88 <OSIntExit>:
     e88:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSRunning>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	09 f0       	breq	.+2      	; 0xe92 <OSIntExit+0xa>
     e90:	4c c0       	rjmp	.+152    	; 0xf2a <OSIntExit+0xa2>
     e92:	f8 94       	cli
     e94:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <OSIntNesting>
     e98:	88 23       	and	r24, r24
     e9a:	19 f0       	breq	.+6      	; 0xea2 <OSIntExit+0x1a>
     e9c:	81 50       	subi	r24, 0x01	; 1
     e9e:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <OSIntNesting>
     ea2:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <OSIntNesting>
     ea6:	81 11       	cpse	r24, r1
     ea8:	3f c0       	rjmp	.+126    	; 0xf28 <OSIntExit+0xa0>
     eaa:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <OSLockNesting>
     eae:	81 11       	cpse	r24, r1
     eb0:	3b c0       	rjmp	.+118    	; 0xf28 <OSIntExit+0xa0>
     eb2:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <OSRdyGrp>
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	e0 50       	subi	r30, 0x00	; 0
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	e0 81       	ld	r30, Z
     ebe:	e0 93 62 04 	sts	0x0462, r30	; 0x800462 <OSIntExitY>
     ec2:	ae 2f       	mov	r26, r30
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	a1 5a       	subi	r26, 0xA1	; 161
     ec8:	bb 4f       	sbci	r27, 0xFB	; 251
     eca:	ac 91       	ld	r26, X
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	a0 50       	subi	r26, 0x00	; 0
     ed0:	bf 4f       	sbci	r27, 0xFF	; 255
     ed2:	ee 0f       	add	r30, r30
     ed4:	ee 0f       	add	r30, r30
     ed6:	ee 0f       	add	r30, r30
     ed8:	8c 91       	ld	r24, X
     eda:	e8 0f       	add	r30, r24
     edc:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <OSPrioHighRdy>
     ee0:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <OSPrioCur>
     ee4:	e8 17       	cp	r30, r24
     ee6:	01 f1       	breq	.+64     	; 0xf28 <OSIntExit+0xa0>
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	eb 55       	subi	r30, 0x5B	; 91
     ef0:	fa 4f       	sbci	r31, 0xFA	; 250
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <OSTCBHighRdy+0x1>
     efa:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <OSTCBHighRdy>
     efe:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <OSCtxSwCtr>
     f02:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <OSCtxSwCtr+0x1>
     f06:	a0 91 57 04 	lds	r26, 0x0457	; 0x800457 <OSCtxSwCtr+0x2>
     f0a:	b0 91 58 04 	lds	r27, 0x0458	; 0x800458 <OSCtxSwCtr+0x3>
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	a1 1d       	adc	r26, r1
     f12:	b1 1d       	adc	r27, r1
     f14:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <OSCtxSwCtr>
     f18:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <OSCtxSwCtr+0x1>
     f1c:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <OSCtxSwCtr+0x2>
     f20:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <OSCtxSwCtr+0x3>
     f24:	0e 94 3b 06 	call	0xc76	; 0xc76 <OSIntCtxSw>
     f28:	78 94       	sei
     f2a:	08 95       	ret

00000f2c <OSSchedLock>:
     f2c:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSRunning>
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	49 f4       	brne	.+18     	; 0xf46 <OSSchedLock+0x1a>
     f34:	f8 94       	cli
     f36:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <OSLockNesting>
     f3a:	8f 3f       	cpi	r24, 0xFF	; 255
     f3c:	19 f0       	breq	.+6      	; 0xf44 <OSSchedLock+0x18>
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <OSLockNesting>
     f44:	78 94       	sei
     f46:	08 95       	ret

00000f48 <OSStart>:
     f48:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSRunning>
     f4c:	81 11       	cpse	r24, r1
     f4e:	28 c0       	rjmp	.+80     	; 0xfa0 <OSStart+0x58>
     f50:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <OSRdyGrp>
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	e0 50       	subi	r30, 0x00	; 0
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	e0 81       	ld	r30, Z
     f5c:	ae 2f       	mov	r26, r30
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	a1 5a       	subi	r26, 0xA1	; 161
     f62:	bb 4f       	sbci	r27, 0xFB	; 251
     f64:	ac 91       	ld	r26, X
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	a0 50       	subi	r26, 0x00	; 0
     f6a:	bf 4f       	sbci	r27, 0xFF	; 255
     f6c:	ee 0f       	add	r30, r30
     f6e:	ee 0f       	add	r30, r30
     f70:	ee 0f       	add	r30, r30
     f72:	8c 91       	ld	r24, X
     f74:	e8 0f       	add	r30, r24
     f76:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <OSPrioHighRdy>
     f7a:	e0 93 52 04 	sts	0x0452, r30	; 0x800452 <OSPrioCur>
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	eb 55       	subi	r30, 0x5B	; 91
     f86:	fa 4f       	sbci	r31, 0xFA	; 250
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <OSTCBHighRdy+0x1>
     f90:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <OSTCBHighRdy>
     f94:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <OSTCBCur+0x1>
     f98:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <OSTCBCur>
     f9c:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <OSStartHighRdy>
     fa0:	08 95       	ret

00000fa2 <OSTimeTick>:
     fa2:	0e 94 1b 07 	call	0xe36	; 0xe36 <OSTimeTickHook>
     fa6:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSRunning>
     faa:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <OSTCBList>
     fae:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <OSTCBList+0x1>
     fb2:	21 e0       	ldi	r18, 0x01	; 1
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	01 f1       	breq	.+64     	; 0xffa <OSTimeTick+0x58>
     fba:	08 95       	ret
     fbc:	f8 94       	cli
     fbe:	86 81       	ldd	r24, Z+6	; 0x06
     fc0:	97 81       	ldd	r25, Z+7	; 0x07
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	b1 f0       	breq	.+44     	; 0xff2 <OSTimeTick+0x50>
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	97 83       	std	Z+7, r25	; 0x07
     fca:	86 83       	std	Z+6, r24	; 0x06
     fcc:	89 2b       	or	r24, r25
     fce:	89 f4       	brne	.+34     	; 0xff2 <OSTimeTick+0x50>
     fd0:	80 85       	ldd	r24, Z+8	; 0x08
     fd2:	83 fd       	sbrc	r24, 3
     fd4:	16 c0       	rjmp	.+44     	; 0x1002 <OSTimeTick+0x60>
     fd6:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <OSRdyGrp>
     fda:	95 85       	ldd	r25, Z+13	; 0x0d
     fdc:	89 2b       	or	r24, r25
     fde:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <OSRdyGrp>
     fe2:	a3 85       	ldd	r26, Z+11	; 0x0b
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	a1 5a       	subi	r26, 0xA1	; 161
     fe8:	bb 4f       	sbci	r27, 0xFB	; 251
     fea:	8c 91       	ld	r24, X
     fec:	94 85       	ldd	r25, Z+12	; 0x0c
     fee:	89 2b       	or	r24, r25
     ff0:	8c 93       	st	X, r24
     ff2:	02 80       	ldd	r0, Z+2	; 0x02
     ff4:	f3 81       	ldd	r31, Z+3	; 0x03
     ff6:	e0 2d       	mov	r30, r0
     ff8:	78 94       	sei
     ffa:	81 85       	ldd	r24, Z+9	; 0x09
     ffc:	80 31       	cpi	r24, 0x10	; 16
     ffe:	f1 f6       	brne	.-68     	; 0xfbc <OSTimeTick+0x1a>
    1000:	dc cf       	rjmp	.-72     	; 0xfba <OSTimeTick+0x18>
    1002:	37 83       	std	Z+7, r19	; 0x07
    1004:	26 83       	std	Z+6, r18	; 0x06
    1006:	f5 cf       	rjmp	.-22     	; 0xff2 <OSTimeTick+0x50>

00001008 <OSVersion>:
    1008:	8c ef       	ldi	r24, 0xFC	; 252
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	08 95       	ret

0000100e <OS_Dummy>:
    100e:	08 95       	ret

00001010 <OS_Sched>:
    1010:	f8 94       	cli
    1012:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <OSIntNesting>
    1016:	81 11       	cpse	r24, r1
    1018:	3d c0       	rjmp	.+122    	; 0x1094 <OS_Sched+0x84>
    101a:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <OSLockNesting>
    101e:	81 11       	cpse	r24, r1
    1020:	39 c0       	rjmp	.+114    	; 0x1094 <OS_Sched+0x84>
    1022:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <OSRdyGrp>
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	e0 50       	subi	r30, 0x00	; 0
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	e0 81       	ld	r30, Z
    102e:	ae 2f       	mov	r26, r30
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	a1 5a       	subi	r26, 0xA1	; 161
    1034:	bb 4f       	sbci	r27, 0xFB	; 251
    1036:	ac 91       	ld	r26, X
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	a0 50       	subi	r26, 0x00	; 0
    103c:	bf 4f       	sbci	r27, 0xFF	; 255
    103e:	ee 0f       	add	r30, r30
    1040:	ee 0f       	add	r30, r30
    1042:	ee 0f       	add	r30, r30
    1044:	8c 91       	ld	r24, X
    1046:	e8 0f       	add	r30, r24
    1048:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <OSPrioHighRdy>
    104c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <OSPrioCur>
    1050:	e8 17       	cp	r30, r24
    1052:	01 f1       	breq	.+64     	; 0x1094 <OS_Sched+0x84>
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	eb 55       	subi	r30, 0x5B	; 91
    105c:	fa 4f       	sbci	r31, 0xFA	; 250
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <OSTCBHighRdy+0x1>
    1066:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <OSTCBHighRdy>
    106a:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <OSCtxSwCtr>
    106e:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <OSCtxSwCtr+0x1>
    1072:	a0 91 57 04 	lds	r26, 0x0457	; 0x800457 <OSCtxSwCtr+0x2>
    1076:	b0 91 58 04 	lds	r27, 0x0458	; 0x800458 <OSCtxSwCtr+0x3>
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	a1 1d       	adc	r26, r1
    107e:	b1 1d       	adc	r27, r1
    1080:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <OSCtxSwCtr>
    1084:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <OSCtxSwCtr+0x1>
    1088:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <OSCtxSwCtr+0x2>
    108c:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <OSCtxSwCtr+0x3>
    1090:	0e 94 de 05 	call	0xbbc	; 0xbbc <OSCtxSw>
    1094:	78 94       	sei
    1096:	08 95       	ret

00001098 <OSSchedUnlock>:
    1098:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSRunning>
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 f4       	brne	.+36     	; 0x10c4 <OSSchedUnlock+0x2c>
    10a0:	f8 94       	cli
    10a2:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <OSLockNesting>
    10a6:	88 23       	and	r24, r24
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <OSSchedUnlock+0x2a>
    10aa:	81 50       	subi	r24, 0x01	; 1
    10ac:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <OSLockNesting>
    10b0:	81 11       	cpse	r24, r1
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <OSSchedUnlock+0x2a>
    10b4:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <OSIntNesting>
    10b8:	81 11       	cpse	r24, r1
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <OSSchedUnlock+0x2a>
    10bc:	78 94       	sei
    10be:	0c 94 08 08 	jmp	0x1010	; 0x1010 <OS_Sched>
    10c2:	78 94       	sei
    10c4:	08 95       	ret

000010c6 <OSTimeDly.part.0>:
    10c6:	ac 01       	movw	r20, r24
    10c8:	f8 94       	cli
    10ca:	a0 91 64 04 	lds	r26, 0x0464	; 0x800464 <OSTCBCur>
    10ce:	b0 91 65 04 	lds	r27, 0x0465	; 0x800465 <OSTCBCur+0x1>
    10d2:	1b 96       	adiw	r26, 0x0b	; 11
    10d4:	ec 91       	ld	r30, X
    10d6:	1b 97       	sbiw	r26, 0x0b	; 11
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	1c 96       	adiw	r26, 0x0c	; 12
    10dc:	9c 91       	ld	r25, X
    10de:	1c 97       	sbiw	r26, 0x0c	; 12
    10e0:	90 95       	com	r25
    10e2:	e1 5a       	subi	r30, 0xA1	; 161
    10e4:	fb 4f       	sbci	r31, 0xFB	; 251
    10e6:	80 81       	ld	r24, Z
    10e8:	98 23       	and	r25, r24
    10ea:	90 83       	st	Z, r25
    10ec:	91 11       	cpse	r25, r1
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <OSTimeDly.part.0+0x3e>
    10f0:	1d 96       	adiw	r26, 0x0d	; 13
    10f2:	9c 91       	ld	r25, X
    10f4:	1d 97       	sbiw	r26, 0x0d	; 13
    10f6:	29 2f       	mov	r18, r25
    10f8:	20 95       	com	r18
    10fa:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <OSRdyGrp>
    10fe:	92 23       	and	r25, r18
    1100:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <OSRdyGrp>
    1104:	17 96       	adiw	r26, 0x07	; 7
    1106:	5c 93       	st	X, r21
    1108:	4e 93       	st	-X, r20
    110a:	16 97       	sbiw	r26, 0x06	; 6
    110c:	78 94       	sei
    110e:	0c 94 08 08 	jmp	0x1010	; 0x1010 <OS_Sched>

00001112 <OS_TCBInit>:
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	f8 94       	cli
    111a:	c0 91 59 04 	lds	r28, 0x0459	; 0x800459 <OSTCBFreeList>
    111e:	d0 91 5a 04 	lds	r29, 0x045A	; 0x80045a <OSTCBFreeList+0x1>
    1122:	20 97       	sbiw	r28, 0x00	; 0
    1124:	09 f4       	brne	.+2      	; 0x1128 <OS_TCBInit+0x16>
    1126:	54 c0       	rjmp	.+168    	; 0x11d0 <OS_TCBInit+0xbe>
    1128:	18 2f       	mov	r17, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <OSTCBFreeList+0x1>
    1132:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <OSTCBFreeList>
    1136:	78 94       	sei
    1138:	79 83       	std	Y+1, r23	; 0x01
    113a:	68 83       	st	Y, r22
    113c:	19 87       	std	Y+9, r17	; 0x09
    113e:	18 86       	std	Y+8, r1	; 0x08
    1140:	1f 82       	std	Y+7, r1	; 0x07
    1142:	1e 82       	std	Y+6, r1	; 0x06
    1144:	1e 86       	std	Y+14, r1	; 0x0e
    1146:	e1 2f       	mov	r30, r17
    1148:	e6 95       	lsr	r30
    114a:	e6 95       	lsr	r30
    114c:	e6 95       	lsr	r30
    114e:	eb 87       	std	Y+11, r30	; 0x0b
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	e0 50       	subi	r30, 0x00	; 0
    1154:	fe 4f       	sbci	r31, 0xFE	; 254
    1156:	80 81       	ld	r24, Z
    1158:	8d 87       	std	Y+13, r24	; 0x0d
    115a:	e1 2f       	mov	r30, r17
    115c:	e7 70       	andi	r30, 0x07	; 7
    115e:	ea 87       	std	Y+10, r30	; 0x0a
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	e0 50       	subi	r30, 0x00	; 0
    1164:	fe 4f       	sbci	r31, 0xFE	; 254
    1166:	80 81       	ld	r24, Z
    1168:	8c 87       	std	Y+12, r24	; 0x0c
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <OSTCBInitHook>
    1170:	ce 01       	movw	r24, r28
    1172:	0e 94 17 07 	call	0xe2e	; 0xe2e <OSTaskCreateHook>
    1176:	f8 94       	cli
    1178:	e1 2f       	mov	r30, r17
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	ee 0f       	add	r30, r30
    117e:	ff 1f       	adc	r31, r31
    1180:	eb 55       	subi	r30, 0x5B	; 91
    1182:	fa 4f       	sbci	r31, 0xFA	; 250
    1184:	d1 83       	std	Z+1, r29	; 0x01
    1186:	c0 83       	st	Z, r28
    1188:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <OSTCBList>
    118c:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <OSTCBList+0x1>
    1190:	fb 83       	std	Y+3, r31	; 0x03
    1192:	ea 83       	std	Y+2, r30	; 0x02
    1194:	1d 82       	std	Y+5, r1	; 0x05
    1196:	1c 82       	std	Y+4, r1	; 0x04
    1198:	30 97       	sbiw	r30, 0x00	; 0
    119a:	11 f0       	breq	.+4      	; 0x11a0 <OS_TCBInit+0x8e>
    119c:	d5 83       	std	Z+5, r29	; 0x05
    119e:	c4 83       	std	Z+4, r28	; 0x04
    11a0:	d0 93 54 04 	sts	0x0454, r29	; 0x800454 <OSTCBList+0x1>
    11a4:	c0 93 53 04 	sts	0x0453, r28	; 0x800453 <OSTCBList>
    11a8:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <OSRdyGrp>
    11ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    11ae:	89 2b       	or	r24, r25
    11b0:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <OSRdyGrp>
    11b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	e1 5a       	subi	r30, 0xA1	; 161
    11ba:	fb 4f       	sbci	r31, 0xFB	; 251
    11bc:	80 81       	ld	r24, Z
    11be:	9c 85       	ldd	r25, Y+12	; 0x0c
    11c0:	89 2b       	or	r24, r25
    11c2:	80 83       	st	Z, r24
    11c4:	78 94       	sei
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	08 95       	ret
    11d0:	78 94       	sei
    11d2:	86 e4       	ldi	r24, 0x46	; 70
    11d4:	f9 cf       	rjmp	.-14     	; 0x11c8 <OS_TCBInit+0xb6>

000011d6 <OSTaskCreate>:
    11d6:	9f 92       	push	r9
    11d8:	af 92       	push	r10
    11da:	bf 92       	push	r11
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	f8 94       	cli
    11ee:	c2 2f       	mov	r28, r18
    11f0:	d0 e0       	ldi	r29, 0x00	; 0
    11f2:	cc 0f       	add	r28, r28
    11f4:	dd 1f       	adc	r29, r29
    11f6:	cb 55       	subi	r28, 0x5B	; 91
    11f8:	da 4f       	sbci	r29, 0xFA	; 250
    11fa:	e8 81       	ld	r30, Y
    11fc:	f9 81       	ldd	r31, Y+1	; 0x01
    11fe:	ef 2b       	or	r30, r31
    1200:	09 f0       	breq	.+2      	; 0x1204 <OSTaskCreate+0x2e>
    1202:	3b c0       	rjmp	.+118    	; 0x127a <OSTaskCreate+0xa4>
    1204:	92 2e       	mov	r9, r18
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	39 83       	std	Y+1, r19	; 0x01
    120c:	28 83       	st	Y, r18
    120e:	78 94       	sei
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OSTaskStkInit>
    1218:	b1 2c       	mov	r11, r1
    121a:	a1 2c       	mov	r10, r1
    121c:	d1 2c       	mov	r13, r1
    121e:	c1 2c       	mov	r12, r1
    1220:	e1 2c       	mov	r14, r1
    1222:	f1 2c       	mov	r15, r1
    1224:	87 01       	movw	r16, r14
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	bc 01       	movw	r22, r24
    1230:	89 2d       	mov	r24, r9
    1232:	0e 94 89 08 	call	0x1112	; 0x1112 <OS_TCBInit>
    1236:	18 2f       	mov	r17, r24
    1238:	81 11       	cpse	r24, r1
    123a:	1a c0       	rjmp	.+52     	; 0x1270 <OSTaskCreate+0x9a>
    123c:	f8 94       	cli
    123e:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <OSTaskCtr>
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <OSTaskCtr>
    1248:	78 94       	sei
    124a:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSRunning>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	11 f4       	brne	.+4      	; 0x1256 <OSTaskCreate+0x80>
    1252:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_Sched>
    1256:	81 2f       	mov	r24, r17
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	08 95       	ret
    1270:	f8 94       	cli
    1272:	19 82       	std	Y+1, r1	; 0x01
    1274:	18 82       	st	Y, r1
    1276:	78 94       	sei
    1278:	ee cf       	rjmp	.-36     	; 0x1256 <OSTaskCreate+0x80>
    127a:	78 94       	sei
    127c:	18 e2       	ldi	r17, 0x28	; 40
    127e:	eb cf       	rjmp	.-42     	; 0x1256 <OSTaskCreate+0x80>

00001280 <OSInit>:
    1280:	0e 94 1c 07 	call	0xe38	; 0xe38 <OSInitHookBegin>
    1284:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <OSIntNesting>
    1288:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <OSLockNesting>
    128c:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <OSTaskCtr>
    1290:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <OSRunning>
    1294:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <OSCtxSwCtr>
    1298:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <OSCtxSwCtr+0x1>
    129c:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <OSCtxSwCtr+0x2>
    12a0:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <OSCtxSwCtr+0x3>
    12a4:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <OSIdleCtr>
    12a8:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <OSIdleCtr+0x1>
    12ac:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <OSIdleCtr+0x2>
    12b0:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <OSIdleCtr+0x3>
    12b4:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <OSRdyGrp>
    12b8:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <OSRdyTbl>
    12bc:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <OSRdyTbl+0x1>
    12c0:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <OSRdyTbl+0x2>
    12c4:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <OSPrioCur>
    12c8:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <OSPrioHighRdy>
    12cc:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <OSTCBHighRdy+0x1>
    12d0:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <OSTCBHighRdy>
    12d4:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <OSTCBCur+0x1>
    12d8:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <OSTCBCur>
    12dc:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <OSTCBList+0x1>
    12e0:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <OSTCBList>
    12e4:	e5 ea       	ldi	r30, 0xA5	; 165
    12e6:	f5 e0       	ldi	r31, 0x05	; 5
    12e8:	11 92       	st	Z+, r1
    12ea:	11 92       	st	Z+, r1
    12ec:	85 e0       	ldi	r24, 0x05	; 5
    12ee:	e7 3c       	cpi	r30, 0xC7	; 199
    12f0:	f8 07       	cpc	r31, r24
    12f2:	d1 f7       	brne	.-12     	; 0x12e8 <OSInit+0x68>
    12f4:	e6 ea       	ldi	r30, 0xA6	; 166
    12f6:	f4 e0       	ldi	r31, 0x04	; 4
    12f8:	cf 01       	movw	r24, r30
    12fa:	0f 96       	adiw	r24, 0x0f	; 15
    12fc:	93 83       	std	Z+3, r25	; 0x03
    12fe:	82 83       	std	Z+2, r24	; 0x02
    1300:	fc 01       	movw	r30, r24
    1302:	85 e0       	ldi	r24, 0x05	; 5
    1304:	e6 39       	cpi	r30, 0x96	; 150
    1306:	f8 07       	cpc	r31, r24
    1308:	b9 f7       	brne	.-18     	; 0x12f8 <OSInit+0x78>
    130a:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <OSTCBTbl+0xf3>
    130e:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <OSTCBTbl+0xf2>
    1312:	86 ea       	ldi	r24, 0xA6	; 166
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <OSTCBFreeList+0x1>
    131a:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <OSTCBFreeList>
    131e:	20 e1       	ldi	r18, 0x10	; 16
    1320:	45 ea       	ldi	r20, 0xA5	; 165
    1322:	54 e0       	ldi	r21, 0x04	; 4
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	80 e2       	ldi	r24, 0x20	; 32
    132a:	97 e0       	ldi	r25, 0x07	; 7
    132c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <OSTaskCreate>
    1330:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <OSInitHookEnd>

00001334 <OSTaskDel>:
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	f0 90 63 04 	lds	r15, 0x0463	; 0x800463 <OSIntNesting>
    1342:	f1 10       	cpse	r15, r1
    1344:	76 c0       	rjmp	.+236    	; 0x1432 <OSTaskDel+0xfe>
    1346:	f8 94       	cli
    1348:	8f 3f       	cpi	r24, 0xFF	; 255
    134a:	29 f4       	brne	.+10     	; 0x1356 <OSTaskDel+0x22>
    134c:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <OSTCBCur>
    1350:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <OSTCBCur+0x1>
    1354:	81 85       	ldd	r24, Z+9	; 0x09
    1356:	08 2f       	mov	r16, r24
    1358:	10 e0       	ldi	r17, 0x00	; 0
    135a:	00 0f       	add	r16, r16
    135c:	11 1f       	adc	r17, r17
    135e:	f8 01       	movw	r30, r16
    1360:	eb 55       	subi	r30, 0x5B	; 91
    1362:	fa 4f       	sbci	r31, 0xFA	; 250
    1364:	c0 81       	ld	r28, Z
    1366:	d1 81       	ldd	r29, Z+1	; 0x01
    1368:	20 97       	sbiw	r28, 0x00	; 0
    136a:	09 f4       	brne	.+2      	; 0x136e <OSTaskDel+0x3a>
    136c:	5e c0       	rjmp	.+188    	; 0x142a <OSTaskDel+0xf6>
    136e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8c 85       	ldd	r24, Y+12	; 0x0c
    1374:	80 95       	com	r24
    1376:	e1 5a       	subi	r30, 0xA1	; 161
    1378:	fb 4f       	sbci	r31, 0xFB	; 251
    137a:	90 81       	ld	r25, Z
    137c:	89 23       	and	r24, r25
    137e:	80 83       	st	Z, r24
    1380:	81 11       	cpse	r24, r1
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <OSTaskDel+0x60>
    1384:	8d 85       	ldd	r24, Y+13	; 0x0d
    1386:	98 2f       	mov	r25, r24
    1388:	90 95       	com	r25
    138a:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <OSRdyGrp>
    138e:	89 23       	and	r24, r25
    1390:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <OSRdyGrp>
    1394:	1f 82       	std	Y+7, r1	; 0x07
    1396:	1e 82       	std	Y+6, r1	; 0x06
    1398:	18 86       	std	Y+8, r1	; 0x08
    139a:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <OSLockNesting>
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	19 f0       	breq	.+6      	; 0x13a8 <OSTaskDel+0x74>
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <OSLockNesting>
    13a8:	78 94       	sei
    13aa:	f8 94       	cli
    13ac:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <OSLockNesting>
    13b0:	88 23       	and	r24, r24
    13b2:	19 f0       	breq	.+6      	; 0x13ba <OSTaskDel+0x86>
    13b4:	81 50       	subi	r24, 0x01	; 1
    13b6:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <OSLockNesting>
    13ba:	ce 01       	movw	r24, r28
    13bc:	0e 94 18 07 	call	0xe30	; 0xe30 <OSTaskDelHook>
    13c0:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <OSTaskCtr>
    13c4:	81 50       	subi	r24, 0x01	; 1
    13c6:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <OSTaskCtr>
    13ca:	f8 01       	movw	r30, r16
    13cc:	eb 55       	subi	r30, 0x5B	; 91
    13ce:	fa 4f       	sbci	r31, 0xFA	; 250
    13d0:	11 82       	std	Z+1, r1	; 0x01
    13d2:	10 82       	st	Z, r1
    13d4:	ec 81       	ldd	r30, Y+4	; 0x04
    13d6:	fd 81       	ldd	r31, Y+5	; 0x05
    13d8:	aa 81       	ldd	r26, Y+2	; 0x02
    13da:	bb 81       	ldd	r27, Y+3	; 0x03
    13dc:	30 97       	sbiw	r30, 0x00	; 0
    13de:	e1 f4       	brne	.+56     	; 0x1418 <OSTaskDel+0xe4>
    13e0:	15 96       	adiw	r26, 0x05	; 5
    13e2:	1c 92       	st	X, r1
    13e4:	1e 92       	st	-X, r1
    13e6:	14 97       	sbiw	r26, 0x04	; 4
    13e8:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <OSTCBList+0x1>
    13ec:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <OSTCBList>
    13f0:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <OSTCBFreeList>
    13f4:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <OSTCBFreeList+0x1>
    13f8:	9b 83       	std	Y+3, r25	; 0x03
    13fa:	8a 83       	std	Y+2, r24	; 0x02
    13fc:	d0 93 5a 04 	sts	0x045A, r29	; 0x80045a <OSTCBFreeList+0x1>
    1400:	c0 93 59 04 	sts	0x0459, r28	; 0x800459 <OSTCBFreeList>
    1404:	78 94       	sei
    1406:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_Sched>
    140a:	8f 2d       	mov	r24, r15
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	ff 90       	pop	r15
    1416:	08 95       	ret
    1418:	b3 83       	std	Z+3, r27	; 0x03
    141a:	a2 83       	std	Z+2, r26	; 0x02
    141c:	aa 81       	ldd	r26, Y+2	; 0x02
    141e:	bb 81       	ldd	r27, Y+3	; 0x03
    1420:	15 96       	adiw	r26, 0x05	; 5
    1422:	fc 93       	st	X, r31
    1424:	ee 93       	st	-X, r30
    1426:	14 97       	sbiw	r26, 0x04	; 4
    1428:	e3 cf       	rjmp	.-58     	; 0x13f0 <OSTaskDel+0xbc>
    142a:	78 94       	sei
    142c:	9c e3       	ldi	r25, 0x3C	; 60
    142e:	f9 2e       	mov	r15, r25
    1430:	ec cf       	rjmp	.-40     	; 0x140a <OSTaskDel+0xd6>
    1432:	8f e3       	ldi	r24, 0x3F	; 63
    1434:	f8 2e       	mov	r15, r24
    1436:	e9 cf       	rjmp	.-46     	; 0x140a <OSTaskDel+0xd6>

00001438 <OSTaskDelReq>:
    1438:	8f 3f       	cpi	r24, 0xFF	; 255
    143a:	41 f4       	brne	.+16     	; 0x144c <OSTaskDelReq+0x14>
    143c:	f8 94       	cli
    143e:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <OSTCBCur>
    1442:	f0 91 65 04 	lds	r31, 0x0465	; 0x800465 <OSTCBCur+0x1>
    1446:	86 85       	ldd	r24, Z+14	; 0x0e
    1448:	78 94       	sei
    144a:	08 95       	ret
    144c:	f8 94       	cli
    144e:	e8 2f       	mov	r30, r24
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	eb 55       	subi	r30, 0x5B	; 91
    1458:	fa 4f       	sbci	r31, 0xFA	; 250
    145a:	01 90       	ld	r0, Z+
    145c:	f0 81       	ld	r31, Z
    145e:	e0 2d       	mov	r30, r0
    1460:	8b e0       	ldi	r24, 0x0B	; 11
    1462:	30 97       	sbiw	r30, 0x00	; 0
    1464:	89 f3       	breq	.-30     	; 0x1448 <OSTaskDelReq+0x10>
    1466:	8e e3       	ldi	r24, 0x3E	; 62
    1468:	86 87       	std	Z+14, r24	; 0x0e
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	ed cf       	rjmp	.-38     	; 0x1448 <OSTaskDelReq+0x10>

0000146e <OSTimeDly>:
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	11 f0       	breq	.+4      	; 0x1476 <OSTimeDly+0x8>
    1472:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <OSTimeDly.part.0>
    1476:	08 95       	ret

00001478 <OSTimeDlyHMSM>:
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	81 11       	cpse	r24, r1
    1482:	0d c0       	rjmp	.+26     	; 0x149e <OSTimeDlyHMSM+0x26>
    1484:	61 11       	cpse	r22, r1
    1486:	0b c0       	rjmp	.+22     	; 0x149e <OSTimeDlyHMSM+0x26>
    1488:	41 11       	cpse	r20, r1
    148a:	0c c0       	rjmp	.+24     	; 0x14a4 <OSTimeDlyHMSM+0x2c>
    148c:	21 15       	cp	r18, r1
    148e:	31 05       	cpc	r19, r1
    1490:	61 f4       	brne	.+24     	; 0x14aa <OSTimeDlyHMSM+0x32>
    1492:	84 e5       	ldi	r24, 0x54	; 84
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	08 95       	ret
    149e:	6c 33       	cpi	r22, 0x3C	; 60
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <OSTimeDlyHMSM+0x2c>
    14a2:	4f c0       	rjmp	.+158    	; 0x1542 <OSTimeDlyHMSM+0xca>
    14a4:	4c 33       	cpi	r20, 0x3C	; 60
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <OSTimeDlyHMSM+0x32>
    14a8:	4e c0       	rjmp	.+156    	; 0x1546 <OSTimeDlyHMSM+0xce>
    14aa:	28 3e       	cpi	r18, 0xE8	; 232
    14ac:	93 e0       	ldi	r25, 0x03	; 3
    14ae:	39 07       	cpc	r19, r25
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <OSTimeDlyHMSM+0x3c>
    14b2:	4b c0       	rjmp	.+150    	; 0x154a <OSTimeDlyHMSM+0xd2>
    14b4:	f9 01       	movw	r30, r18
    14b6:	58 2f       	mov	r21, r24
    14b8:	26 2f       	mov	r18, r22
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	ac e3       	ldi	r26, 0x3C	; 60
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__umulhisi3>
    14c4:	6b 01       	movw	r12, r22
    14c6:	7c 01       	movw	r14, r24
    14c8:	c4 0e       	add	r12, r20
    14ca:	d1 1c       	adc	r13, r1
    14cc:	e1 1c       	adc	r14, r1
    14ce:	f1 1c       	adc	r15, r1
    14d0:	25 2f       	mov	r18, r21
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	a0 e1       	ldi	r26, 0x10	; 16
    14d6:	be e0       	ldi	r27, 0x0E	; 14
    14d8:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__umulhisi3>
    14dc:	a7 01       	movw	r20, r14
    14de:	96 01       	movw	r18, r12
    14e0:	26 0f       	add	r18, r22
    14e2:	37 1f       	adc	r19, r23
    14e4:	48 1f       	adc	r20, r24
    14e6:	59 1f       	adc	r21, r25
    14e8:	a4 e6       	ldi	r26, 0x64	; 100
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	0e 94 82 0b 	call	0x1704	; 0x1704 <__muluhisi3>
    14f0:	6b 01       	movw	r12, r22
    14f2:	7c 01       	movw	r14, r24
    14f4:	9f 01       	movw	r18, r30
    14f6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__umulhisi3>
    14fa:	6c 50       	subi	r22, 0x0C	; 12
    14fc:	7e 4f       	sbci	r23, 0xFE	; 254
    14fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	28 ee       	ldi	r18, 0xE8	; 232
    1504:	33 e0       	ldi	r19, 0x03	; 3
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodsi4>
    150e:	d7 01       	movw	r26, r14
    1510:	c6 01       	movw	r24, r12
    1512:	82 0f       	add	r24, r18
    1514:	93 1f       	adc	r25, r19
    1516:	a4 1f       	adc	r26, r20
    1518:	b5 1f       	adc	r27, r21
    151a:	7d 01       	movw	r14, r26
    151c:	0e 94 37 0a 	call	0x146e	; 0x146e <OSTimeDly>
    1520:	e1 14       	cp	r14, r1
    1522:	f1 04       	cpc	r15, r1
    1524:	11 f4       	brne	.+4      	; 0x152a <OSTimeDlyHMSM+0xb2>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	b5 cf       	rjmp	.-150    	; 0x1494 <OSTimeDlyHMSM+0x1c>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e8       	ldi	r25, 0x80	; 128
    152e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <OSTimeDly.part.0>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e8       	ldi	r25, 0x80	; 128
    1536:	0e 94 63 08 	call	0x10c6	; 0x10c6 <OSTimeDly.part.0>
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	e8 1a       	sub	r14, r24
    153e:	f1 08       	sbc	r15, r1
    1540:	ef cf       	rjmp	.-34     	; 0x1520 <OSTimeDlyHMSM+0xa8>
    1542:	81 e5       	ldi	r24, 0x51	; 81
    1544:	a7 cf       	rjmp	.-178    	; 0x1494 <OSTimeDlyHMSM+0x1c>
    1546:	82 e5       	ldi	r24, 0x52	; 82
    1548:	a5 cf       	rjmp	.-182    	; 0x1494 <OSTimeDlyHMSM+0x1c>
    154a:	83 e5       	ldi	r24, 0x53	; 83
    154c:	a3 cf       	rjmp	.-186    	; 0x1494 <OSTimeDlyHMSM+0x1c>

0000154e <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    154e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    1552:	0e 94 40 09 	call	0x1280	; 0x1280 <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	0e 94 15 04 	call	0x82a	; 0x82a <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    1562:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    1566:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    156a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    156e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    1572:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
    myrobot.KP = DEFAULT_KP; //0.03
    1576:	84 ef       	ldi	r24, 0xF4	; 244
    1578:	9d ef       	ldi	r25, 0xFD	; 253
    157a:	a4 e5       	ldi	r26, 0x54	; 84
    157c:	bd e3       	ldi	r27, 0x3D	; 61
    157e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <myrobot+0x5>
    1582:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <myrobot+0x6>
    1586:	a0 93 a1 02 	sts	0x02A1, r26	; 0x8002a1 <myrobot+0x7>
    158a:	b0 93 a2 02 	sts	0x02A2, r27	; 0x8002a2 <myrobot+0x8>
    myrobot.KD = DEFAULT_KD; //0.07
    158e:	81 e3       	ldi	r24, 0x31	; 49
    1590:	98 e0       	ldi	r25, 0x08	; 8
    1592:	ac e2       	ldi	r26, 0x2C	; 44
    1594:	bd e3       	ldi	r27, 0x3D	; 61
    1596:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <myrobot+0x9>
    159a:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <myrobot+0xa>
    159e:	a0 93 a5 02 	sts	0x02A5, r26	; 0x8002a5 <myrobot+0xb>
    15a2:	b0 93 a6 02 	sts	0x02A6, r27	; 0x8002a6 <myrobot+0xc>
    myrobot.KI = DEFAULT_KI; //0.0004
    15a6:	8c ea       	ldi	r24, 0xAC	; 172
    15a8:	95 ec       	ldi	r25, 0xC5	; 197
    15aa:	a7 ea       	ldi	r26, 0xA7	; 167
    15ac:	b7 e3       	ldi	r27, 0x37	; 55
    15ae:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <myrobot+0xd>
    15b2:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <myrobot+0xe>
    15b6:	a0 93 a9 02 	sts	0x02A9, r26	; 0x8002a9 <myrobot+0xf>
    15ba:	b0 93 aa 02 	sts	0x02AA, r27	; 0x8002aa <myrobot+0x10>
    myrobot.lastError = 0.0;
    15be:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <myrobot+0x11>
    15c2:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <myrobot+0x12>
    15c6:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <myrobot+0x13>
    15ca:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <myrobot+0x14>
    myrobot.integral = 0.0;
    15ce:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <myrobot+0x15>
    15d2:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <myrobot+0x16>
    15d6:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <myrobot+0x17>
    15da:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <myrobot+0x18>
    myrobot.prevLeftSpeed = 0;
    15de:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <myrobot+0x1c>
    15e2:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <myrobot+0x1b>
    myrobot.prevRightSpeed = 0;
    15e6:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <myrobot+0x1e>
    15ea:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <myrobot+0x1d>
    myrobot.inRoundabout = 0;
    15ee:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <myrobot+0x20>
    15f2:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <myrobot+0x1f>
    myrobot.clickCount = 0;
    15f6:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <myrobot+0x22>
    15fa:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <myrobot+0x21>
    myrobot.inLightField = 0;
    15fe:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <myrobot+0x24>
    1602:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <myrobot+0x23>
    myrobot.inBlackBox = 0;
    1606:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <myrobot+0x26>
    160a:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <myrobot+0x25>
    myrobot.turn = 1;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <myrobot+0x28>
    1616:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <myrobot+0x27>
    myrobot.goal = 1000;                                      /* goal is to follow on the middle sensor */
    161a:	88 ee       	ldi	r24, 0xE8	; 232
    161c:	93 e0       	ldi	r25, 0x03	; 3
    161e:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <myrobot+0x1a>
    1622:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <myrobot+0x19>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	42 ec       	ldi	r20, 0xC2	; 194
    162a:	53 e0       	ldi	r21, 0x03	; 3
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	87 e7       	ldi	r24, 0x77	; 119
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    1638:	0e 94 b8 04 	call	0x970	; 0x970 <robo_Honk>
    163c:	0e 94 de 04 	call	0x9bc	; 0x9bc <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    1640:	0e 94 a4 07 	call	0xf48	; 0xf48 <OSStart>
    1644:	ff cf       	rjmp	.-2      	; 0x1644 <main+0xf6>

00001646 <__udivmodhi4>:
    1646:	aa 1b       	sub	r26, r26
    1648:	bb 1b       	sub	r27, r27
    164a:	51 e1       	ldi	r21, 0x11	; 17
    164c:	07 c0       	rjmp	.+14     	; 0x165c <__udivmodhi4_ep>

0000164e <__udivmodhi4_loop>:
    164e:	aa 1f       	adc	r26, r26
    1650:	bb 1f       	adc	r27, r27
    1652:	a6 17       	cp	r26, r22
    1654:	b7 07       	cpc	r27, r23
    1656:	10 f0       	brcs	.+4      	; 0x165c <__udivmodhi4_ep>
    1658:	a6 1b       	sub	r26, r22
    165a:	b7 0b       	sbc	r27, r23

0000165c <__udivmodhi4_ep>:
    165c:	88 1f       	adc	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	5a 95       	dec	r21
    1662:	a9 f7       	brne	.-22     	; 0x164e <__udivmodhi4_loop>
    1664:	80 95       	com	r24
    1666:	90 95       	com	r25
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	08 95       	ret

0000166e <__divmodhi4>:
    166e:	97 fb       	bst	r25, 7
    1670:	07 2e       	mov	r0, r23
    1672:	16 f4       	brtc	.+4      	; 0x1678 <__divmodhi4+0xa>
    1674:	00 94       	com	r0
    1676:	07 d0       	rcall	.+14     	; 0x1686 <__divmodhi4_neg1>
    1678:	77 fd       	sbrc	r23, 7
    167a:	09 d0       	rcall	.+18     	; 0x168e <__divmodhi4_neg2>
    167c:	0e 94 23 0b 	call	0x1646	; 0x1646 <__udivmodhi4>
    1680:	07 fc       	sbrc	r0, 7
    1682:	05 d0       	rcall	.+10     	; 0x168e <__divmodhi4_neg2>
    1684:	3e f4       	brtc	.+14     	; 0x1694 <__divmodhi4_exit>

00001686 <__divmodhi4_neg1>:
    1686:	90 95       	com	r25
    1688:	81 95       	neg	r24
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	08 95       	ret

0000168e <__divmodhi4_neg2>:
    168e:	70 95       	com	r23
    1690:	61 95       	neg	r22
    1692:	7f 4f       	sbci	r23, 0xFF	; 255

00001694 <__divmodhi4_exit>:
    1694:	08 95       	ret

00001696 <__udivmodsi4>:
    1696:	a1 e2       	ldi	r26, 0x21	; 33
    1698:	1a 2e       	mov	r1, r26
    169a:	aa 1b       	sub	r26, r26
    169c:	bb 1b       	sub	r27, r27
    169e:	fd 01       	movw	r30, r26
    16a0:	0d c0       	rjmp	.+26     	; 0x16bc <__udivmodsi4_ep>

000016a2 <__udivmodsi4_loop>:
    16a2:	aa 1f       	adc	r26, r26
    16a4:	bb 1f       	adc	r27, r27
    16a6:	ee 1f       	adc	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	a2 17       	cp	r26, r18
    16ac:	b3 07       	cpc	r27, r19
    16ae:	e4 07       	cpc	r30, r20
    16b0:	f5 07       	cpc	r31, r21
    16b2:	20 f0       	brcs	.+8      	; 0x16bc <__udivmodsi4_ep>
    16b4:	a2 1b       	sub	r26, r18
    16b6:	b3 0b       	sbc	r27, r19
    16b8:	e4 0b       	sbc	r30, r20
    16ba:	f5 0b       	sbc	r31, r21

000016bc <__udivmodsi4_ep>:
    16bc:	66 1f       	adc	r22, r22
    16be:	77 1f       	adc	r23, r23
    16c0:	88 1f       	adc	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	1a 94       	dec	r1
    16c6:	69 f7       	brne	.-38     	; 0x16a2 <__udivmodsi4_loop>
    16c8:	60 95       	com	r22
    16ca:	70 95       	com	r23
    16cc:	80 95       	com	r24
    16ce:	90 95       	com	r25
    16d0:	9b 01       	movw	r18, r22
    16d2:	ac 01       	movw	r20, r24
    16d4:	bd 01       	movw	r22, r26
    16d6:	cf 01       	movw	r24, r30
    16d8:	08 95       	ret

000016da <__tablejump2__>:
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	05 90       	lpm	r0, Z+
    16e0:	f4 91       	lpm	r31, Z
    16e2:	e0 2d       	mov	r30, r0
    16e4:	09 94       	ijmp

000016e6 <__umulhisi3>:
    16e6:	a2 9f       	mul	r26, r18
    16e8:	b0 01       	movw	r22, r0
    16ea:	b3 9f       	mul	r27, r19
    16ec:	c0 01       	movw	r24, r0
    16ee:	a3 9f       	mul	r26, r19
    16f0:	70 0d       	add	r23, r0
    16f2:	81 1d       	adc	r24, r1
    16f4:	11 24       	eor	r1, r1
    16f6:	91 1d       	adc	r25, r1
    16f8:	b2 9f       	mul	r27, r18
    16fa:	70 0d       	add	r23, r0
    16fc:	81 1d       	adc	r24, r1
    16fe:	11 24       	eor	r1, r1
    1700:	91 1d       	adc	r25, r1
    1702:	08 95       	ret

00001704 <__muluhisi3>:
    1704:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__umulhisi3>
    1708:	a5 9f       	mul	r26, r21
    170a:	90 0d       	add	r25, r0
    170c:	b4 9f       	mul	r27, r20
    170e:	90 0d       	add	r25, r0
    1710:	a4 9f       	mul	r26, r20
    1712:	80 0d       	add	r24, r0
    1714:	91 1d       	adc	r25, r1
    1716:	11 24       	eor	r1, r1
    1718:	08 95       	ret

0000171a <__subsf3>:
    171a:	50 58       	subi	r21, 0x80	; 128

0000171c <__addsf3>:
    171c:	bb 27       	eor	r27, r27
    171e:	aa 27       	eor	r26, r26
    1720:	0e 94 a5 0b 	call	0x174a	; 0x174a <__addsf3x>
    1724:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__fp_round>
    1728:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__fp_pscA>
    172c:	38 f0       	brcs	.+14     	; 0x173c <__addsf3+0x20>
    172e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__fp_pscB>
    1732:	20 f0       	brcs	.+8      	; 0x173c <__addsf3+0x20>
    1734:	39 f4       	brne	.+14     	; 0x1744 <__addsf3+0x28>
    1736:	9f 3f       	cpi	r25, 0xFF	; 255
    1738:	19 f4       	brne	.+6      	; 0x1740 <__addsf3+0x24>
    173a:	26 f4       	brtc	.+8      	; 0x1744 <__addsf3+0x28>
    173c:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__fp_nan>
    1740:	0e f4       	brtc	.+2      	; 0x1744 <__addsf3+0x28>
    1742:	e0 95       	com	r30
    1744:	e7 fb       	bst	r30, 7
    1746:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_inf>

0000174a <__addsf3x>:
    174a:	e9 2f       	mov	r30, r25
    174c:	0e 94 95 0c 	call	0x192a	; 0x192a <__fp_split3>
    1750:	58 f3       	brcs	.-42     	; 0x1728 <__addsf3+0xc>
    1752:	ba 17       	cp	r27, r26
    1754:	62 07       	cpc	r22, r18
    1756:	73 07       	cpc	r23, r19
    1758:	84 07       	cpc	r24, r20
    175a:	95 07       	cpc	r25, r21
    175c:	20 f0       	brcs	.+8      	; 0x1766 <__addsf3x+0x1c>
    175e:	79 f4       	brne	.+30     	; 0x177e <__addsf3x+0x34>
    1760:	a6 f5       	brtc	.+104    	; 0x17ca <__addsf3x+0x80>
    1762:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__fp_zero>
    1766:	0e f4       	brtc	.+2      	; 0x176a <__addsf3x+0x20>
    1768:	e0 95       	com	r30
    176a:	0b 2e       	mov	r0, r27
    176c:	ba 2f       	mov	r27, r26
    176e:	a0 2d       	mov	r26, r0
    1770:	0b 01       	movw	r0, r22
    1772:	b9 01       	movw	r22, r18
    1774:	90 01       	movw	r18, r0
    1776:	0c 01       	movw	r0, r24
    1778:	ca 01       	movw	r24, r20
    177a:	a0 01       	movw	r20, r0
    177c:	11 24       	eor	r1, r1
    177e:	ff 27       	eor	r31, r31
    1780:	59 1b       	sub	r21, r25
    1782:	99 f0       	breq	.+38     	; 0x17aa <__addsf3x+0x60>
    1784:	59 3f       	cpi	r21, 0xF9	; 249
    1786:	50 f4       	brcc	.+20     	; 0x179c <__addsf3x+0x52>
    1788:	50 3e       	cpi	r21, 0xE0	; 224
    178a:	68 f1       	brcs	.+90     	; 0x17e6 <__addsf3x+0x9c>
    178c:	1a 16       	cp	r1, r26
    178e:	f0 40       	sbci	r31, 0x00	; 0
    1790:	a2 2f       	mov	r26, r18
    1792:	23 2f       	mov	r18, r19
    1794:	34 2f       	mov	r19, r20
    1796:	44 27       	eor	r20, r20
    1798:	58 5f       	subi	r21, 0xF8	; 248
    179a:	f3 cf       	rjmp	.-26     	; 0x1782 <__addsf3x+0x38>
    179c:	46 95       	lsr	r20
    179e:	37 95       	ror	r19
    17a0:	27 95       	ror	r18
    17a2:	a7 95       	ror	r26
    17a4:	f0 40       	sbci	r31, 0x00	; 0
    17a6:	53 95       	inc	r21
    17a8:	c9 f7       	brne	.-14     	; 0x179c <__addsf3x+0x52>
    17aa:	7e f4       	brtc	.+30     	; 0x17ca <__addsf3x+0x80>
    17ac:	1f 16       	cp	r1, r31
    17ae:	ba 0b       	sbc	r27, r26
    17b0:	62 0b       	sbc	r22, r18
    17b2:	73 0b       	sbc	r23, r19
    17b4:	84 0b       	sbc	r24, r20
    17b6:	ba f0       	brmi	.+46     	; 0x17e6 <__addsf3x+0x9c>
    17b8:	91 50       	subi	r25, 0x01	; 1
    17ba:	a1 f0       	breq	.+40     	; 0x17e4 <__addsf3x+0x9a>
    17bc:	ff 0f       	add	r31, r31
    17be:	bb 1f       	adc	r27, r27
    17c0:	66 1f       	adc	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	c2 f7       	brpl	.-16     	; 0x17b8 <__addsf3x+0x6e>
    17c8:	0e c0       	rjmp	.+28     	; 0x17e6 <__addsf3x+0x9c>
    17ca:	ba 0f       	add	r27, r26
    17cc:	62 1f       	adc	r22, r18
    17ce:	73 1f       	adc	r23, r19
    17d0:	84 1f       	adc	r24, r20
    17d2:	48 f4       	brcc	.+18     	; 0x17e6 <__addsf3x+0x9c>
    17d4:	87 95       	ror	r24
    17d6:	77 95       	ror	r23
    17d8:	67 95       	ror	r22
    17da:	b7 95       	ror	r27
    17dc:	f7 95       	ror	r31
    17de:	9e 3f       	cpi	r25, 0xFE	; 254
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <__addsf3x+0x9a>
    17e2:	b0 cf       	rjmp	.-160    	; 0x1744 <__addsf3+0x28>
    17e4:	93 95       	inc	r25
    17e6:	88 0f       	add	r24, r24
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <__addsf3x+0xa2>
    17ea:	99 27       	eor	r25, r25
    17ec:	ee 0f       	add	r30, r30
    17ee:	97 95       	ror	r25
    17f0:	87 95       	ror	r24
    17f2:	08 95       	ret

000017f4 <__fixsfsi>:
    17f4:	0e 94 01 0c 	call	0x1802	; 0x1802 <__fixunssfsi>
    17f8:	68 94       	set
    17fa:	b1 11       	cpse	r27, r1
    17fc:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__fp_szero>
    1800:	08 95       	ret

00001802 <__fixunssfsi>:
    1802:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_splitA>
    1806:	88 f0       	brcs	.+34     	; 0x182a <__fixunssfsi+0x28>
    1808:	9f 57       	subi	r25, 0x7F	; 127
    180a:	98 f0       	brcs	.+38     	; 0x1832 <__fixunssfsi+0x30>
    180c:	b9 2f       	mov	r27, r25
    180e:	99 27       	eor	r25, r25
    1810:	b7 51       	subi	r27, 0x17	; 23
    1812:	b0 f0       	brcs	.+44     	; 0x1840 <__fixunssfsi+0x3e>
    1814:	e1 f0       	breq	.+56     	; 0x184e <__fixunssfsi+0x4c>
    1816:	66 0f       	add	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	88 1f       	adc	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	1a f0       	brmi	.+6      	; 0x1826 <__fixunssfsi+0x24>
    1820:	ba 95       	dec	r27
    1822:	c9 f7       	brne	.-14     	; 0x1816 <__fixunssfsi+0x14>
    1824:	14 c0       	rjmp	.+40     	; 0x184e <__fixunssfsi+0x4c>
    1826:	b1 30       	cpi	r27, 0x01	; 1
    1828:	91 f0       	breq	.+36     	; 0x184e <__fixunssfsi+0x4c>
    182a:	0e 94 b7 0c 	call	0x196e	; 0x196e <__fp_zero>
    182e:	b1 e0       	ldi	r27, 0x01	; 1
    1830:	08 95       	ret
    1832:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__fp_zero>
    1836:	67 2f       	mov	r22, r23
    1838:	78 2f       	mov	r23, r24
    183a:	88 27       	eor	r24, r24
    183c:	b8 5f       	subi	r27, 0xF8	; 248
    183e:	39 f0       	breq	.+14     	; 0x184e <__fixunssfsi+0x4c>
    1840:	b9 3f       	cpi	r27, 0xF9	; 249
    1842:	cc f3       	brlt	.-14     	; 0x1836 <__fixunssfsi+0x34>
    1844:	86 95       	lsr	r24
    1846:	77 95       	ror	r23
    1848:	67 95       	ror	r22
    184a:	b3 95       	inc	r27
    184c:	d9 f7       	brne	.-10     	; 0x1844 <__fixunssfsi+0x42>
    184e:	3e f4       	brtc	.+14     	; 0x185e <__fixunssfsi+0x5c>
    1850:	90 95       	com	r25
    1852:	80 95       	com	r24
    1854:	70 95       	com	r23
    1856:	61 95       	neg	r22
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	8f 4f       	sbci	r24, 0xFF	; 255
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	08 95       	ret

00001860 <__floatunsisf>:
    1860:	e8 94       	clt
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <__floatsisf+0x12>

00001864 <__floatsisf>:
    1864:	97 fb       	bst	r25, 7
    1866:	3e f4       	brtc	.+14     	; 0x1876 <__floatsisf+0x12>
    1868:	90 95       	com	r25
    186a:	80 95       	com	r24
    186c:	70 95       	com	r23
    186e:	61 95       	neg	r22
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	8f 4f       	sbci	r24, 0xFF	; 255
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	99 23       	and	r25, r25
    1878:	a9 f0       	breq	.+42     	; 0x18a4 <__floatsisf+0x40>
    187a:	f9 2f       	mov	r31, r25
    187c:	96 e9       	ldi	r25, 0x96	; 150
    187e:	bb 27       	eor	r27, r27
    1880:	93 95       	inc	r25
    1882:	f6 95       	lsr	r31
    1884:	87 95       	ror	r24
    1886:	77 95       	ror	r23
    1888:	67 95       	ror	r22
    188a:	b7 95       	ror	r27
    188c:	f1 11       	cpse	r31, r1
    188e:	f8 cf       	rjmp	.-16     	; 0x1880 <__floatsisf+0x1c>
    1890:	fa f4       	brpl	.+62     	; 0x18d0 <__floatsisf+0x6c>
    1892:	bb 0f       	add	r27, r27
    1894:	11 f4       	brne	.+4      	; 0x189a <__floatsisf+0x36>
    1896:	60 ff       	sbrs	r22, 0
    1898:	1b c0       	rjmp	.+54     	; 0x18d0 <__floatsisf+0x6c>
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	8f 4f       	sbci	r24, 0xFF	; 255
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	16 c0       	rjmp	.+44     	; 0x18d0 <__floatsisf+0x6c>
    18a4:	88 23       	and	r24, r24
    18a6:	11 f0       	breq	.+4      	; 0x18ac <__floatsisf+0x48>
    18a8:	96 e9       	ldi	r25, 0x96	; 150
    18aa:	11 c0       	rjmp	.+34     	; 0x18ce <__floatsisf+0x6a>
    18ac:	77 23       	and	r23, r23
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <__floatsisf+0x54>
    18b0:	9e e8       	ldi	r25, 0x8E	; 142
    18b2:	87 2f       	mov	r24, r23
    18b4:	76 2f       	mov	r23, r22
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <__floatsisf+0x5e>
    18b8:	66 23       	and	r22, r22
    18ba:	71 f0       	breq	.+28     	; 0x18d8 <__floatsisf+0x74>
    18bc:	96 e8       	ldi	r25, 0x86	; 134
    18be:	86 2f       	mov	r24, r22
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	2a f0       	brmi	.+10     	; 0x18d0 <__floatsisf+0x6c>
    18c6:	9a 95       	dec	r25
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	da f7       	brpl	.-10     	; 0x18c6 <__floatsisf+0x62>
    18d0:	88 0f       	add	r24, r24
    18d2:	96 95       	lsr	r25
    18d4:	87 95       	ror	r24
    18d6:	97 f9       	bld	r25, 7
    18d8:	08 95       	ret

000018da <__fp_inf>:
    18da:	97 f9       	bld	r25, 7
    18dc:	9f 67       	ori	r25, 0x7F	; 127
    18de:	80 e8       	ldi	r24, 0x80	; 128
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	08 95       	ret

000018e6 <__fp_nan>:
    18e6:	9f ef       	ldi	r25, 0xFF	; 255
    18e8:	80 ec       	ldi	r24, 0xC0	; 192
    18ea:	08 95       	ret

000018ec <__fp_pscA>:
    18ec:	00 24       	eor	r0, r0
    18ee:	0a 94       	dec	r0
    18f0:	16 16       	cp	r1, r22
    18f2:	17 06       	cpc	r1, r23
    18f4:	18 06       	cpc	r1, r24
    18f6:	09 06       	cpc	r0, r25
    18f8:	08 95       	ret

000018fa <__fp_pscB>:
    18fa:	00 24       	eor	r0, r0
    18fc:	0a 94       	dec	r0
    18fe:	12 16       	cp	r1, r18
    1900:	13 06       	cpc	r1, r19
    1902:	14 06       	cpc	r1, r20
    1904:	05 06       	cpc	r0, r21
    1906:	08 95       	ret

00001908 <__fp_round>:
    1908:	09 2e       	mov	r0, r25
    190a:	03 94       	inc	r0
    190c:	00 0c       	add	r0, r0
    190e:	11 f4       	brne	.+4      	; 0x1914 <__fp_round+0xc>
    1910:	88 23       	and	r24, r24
    1912:	52 f0       	brmi	.+20     	; 0x1928 <__fp_round+0x20>
    1914:	bb 0f       	add	r27, r27
    1916:	40 f4       	brcc	.+16     	; 0x1928 <__fp_round+0x20>
    1918:	bf 2b       	or	r27, r31
    191a:	11 f4       	brne	.+4      	; 0x1920 <__fp_round+0x18>
    191c:	60 ff       	sbrs	r22, 0
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <__fp_round+0x20>
    1920:	6f 5f       	subi	r22, 0xFF	; 255
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	8f 4f       	sbci	r24, 0xFF	; 255
    1926:	9f 4f       	sbci	r25, 0xFF	; 255
    1928:	08 95       	ret

0000192a <__fp_split3>:
    192a:	57 fd       	sbrc	r21, 7
    192c:	90 58       	subi	r25, 0x80	; 128
    192e:	44 0f       	add	r20, r20
    1930:	55 1f       	adc	r21, r21
    1932:	59 f0       	breq	.+22     	; 0x194a <__fp_splitA+0x10>
    1934:	5f 3f       	cpi	r21, 0xFF	; 255
    1936:	71 f0       	breq	.+28     	; 0x1954 <__fp_splitA+0x1a>
    1938:	47 95       	ror	r20

0000193a <__fp_splitA>:
    193a:	88 0f       	add	r24, r24
    193c:	97 fb       	bst	r25, 7
    193e:	99 1f       	adc	r25, r25
    1940:	61 f0       	breq	.+24     	; 0x195a <__fp_splitA+0x20>
    1942:	9f 3f       	cpi	r25, 0xFF	; 255
    1944:	79 f0       	breq	.+30     	; 0x1964 <__fp_splitA+0x2a>
    1946:	87 95       	ror	r24
    1948:	08 95       	ret
    194a:	12 16       	cp	r1, r18
    194c:	13 06       	cpc	r1, r19
    194e:	14 06       	cpc	r1, r20
    1950:	55 1f       	adc	r21, r21
    1952:	f2 cf       	rjmp	.-28     	; 0x1938 <__fp_split3+0xe>
    1954:	46 95       	lsr	r20
    1956:	f1 df       	rcall	.-30     	; 0x193a <__fp_splitA>
    1958:	08 c0       	rjmp	.+16     	; 0x196a <__fp_splitA+0x30>
    195a:	16 16       	cp	r1, r22
    195c:	17 06       	cpc	r1, r23
    195e:	18 06       	cpc	r1, r24
    1960:	99 1f       	adc	r25, r25
    1962:	f1 cf       	rjmp	.-30     	; 0x1946 <__fp_splitA+0xc>
    1964:	86 95       	lsr	r24
    1966:	71 05       	cpc	r23, r1
    1968:	61 05       	cpc	r22, r1
    196a:	08 94       	sec
    196c:	08 95       	ret

0000196e <__fp_zero>:
    196e:	e8 94       	clt

00001970 <__fp_szero>:
    1970:	bb 27       	eor	r27, r27
    1972:	66 27       	eor	r22, r22
    1974:	77 27       	eor	r23, r23
    1976:	cb 01       	movw	r24, r22
    1978:	97 f9       	bld	r25, 7
    197a:	08 95       	ret

0000197c <__mulsf3>:
    197c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__mulsf3x>
    1980:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__fp_round>
    1984:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__fp_pscA>
    1988:	38 f0       	brcs	.+14     	; 0x1998 <__mulsf3+0x1c>
    198a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__fp_pscB>
    198e:	20 f0       	brcs	.+8      	; 0x1998 <__mulsf3+0x1c>
    1990:	95 23       	and	r25, r21
    1992:	11 f0       	breq	.+4      	; 0x1998 <__mulsf3+0x1c>
    1994:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_inf>
    1998:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__fp_nan>
    199c:	11 24       	eor	r1, r1
    199e:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__fp_szero>

000019a2 <__mulsf3x>:
    19a2:	0e 94 95 0c 	call	0x192a	; 0x192a <__fp_split3>
    19a6:	70 f3       	brcs	.-36     	; 0x1984 <__mulsf3+0x8>

000019a8 <__mulsf3_pse>:
    19a8:	95 9f       	mul	r25, r21
    19aa:	c1 f3       	breq	.-16     	; 0x199c <__mulsf3+0x20>
    19ac:	95 0f       	add	r25, r21
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	55 1f       	adc	r21, r21
    19b2:	62 9f       	mul	r22, r18
    19b4:	f0 01       	movw	r30, r0
    19b6:	72 9f       	mul	r23, r18
    19b8:	bb 27       	eor	r27, r27
    19ba:	f0 0d       	add	r31, r0
    19bc:	b1 1d       	adc	r27, r1
    19be:	63 9f       	mul	r22, r19
    19c0:	aa 27       	eor	r26, r26
    19c2:	f0 0d       	add	r31, r0
    19c4:	b1 1d       	adc	r27, r1
    19c6:	aa 1f       	adc	r26, r26
    19c8:	64 9f       	mul	r22, r20
    19ca:	66 27       	eor	r22, r22
    19cc:	b0 0d       	add	r27, r0
    19ce:	a1 1d       	adc	r26, r1
    19d0:	66 1f       	adc	r22, r22
    19d2:	82 9f       	mul	r24, r18
    19d4:	22 27       	eor	r18, r18
    19d6:	b0 0d       	add	r27, r0
    19d8:	a1 1d       	adc	r26, r1
    19da:	62 1f       	adc	r22, r18
    19dc:	73 9f       	mul	r23, r19
    19de:	b0 0d       	add	r27, r0
    19e0:	a1 1d       	adc	r26, r1
    19e2:	62 1f       	adc	r22, r18
    19e4:	83 9f       	mul	r24, r19
    19e6:	a0 0d       	add	r26, r0
    19e8:	61 1d       	adc	r22, r1
    19ea:	22 1f       	adc	r18, r18
    19ec:	74 9f       	mul	r23, r20
    19ee:	33 27       	eor	r19, r19
    19f0:	a0 0d       	add	r26, r0
    19f2:	61 1d       	adc	r22, r1
    19f4:	23 1f       	adc	r18, r19
    19f6:	84 9f       	mul	r24, r20
    19f8:	60 0d       	add	r22, r0
    19fa:	21 1d       	adc	r18, r1
    19fc:	82 2f       	mov	r24, r18
    19fe:	76 2f       	mov	r23, r22
    1a00:	6a 2f       	mov	r22, r26
    1a02:	11 24       	eor	r1, r1
    1a04:	9f 57       	subi	r25, 0x7F	; 127
    1a06:	50 40       	sbci	r21, 0x00	; 0
    1a08:	9a f0       	brmi	.+38     	; 0x1a30 <__mulsf3_pse+0x88>
    1a0a:	f1 f0       	breq	.+60     	; 0x1a48 <__mulsf3_pse+0xa0>
    1a0c:	88 23       	and	r24, r24
    1a0e:	4a f0       	brmi	.+18     	; 0x1a22 <__mulsf3_pse+0x7a>
    1a10:	ee 0f       	add	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	bb 1f       	adc	r27, r27
    1a16:	66 1f       	adc	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	91 50       	subi	r25, 0x01	; 1
    1a1e:	50 40       	sbci	r21, 0x00	; 0
    1a20:	a9 f7       	brne	.-22     	; 0x1a0c <__mulsf3_pse+0x64>
    1a22:	9e 3f       	cpi	r25, 0xFE	; 254
    1a24:	51 05       	cpc	r21, r1
    1a26:	80 f0       	brcs	.+32     	; 0x1a48 <__mulsf3_pse+0xa0>
    1a28:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__fp_inf>
    1a2c:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__fp_szero>
    1a30:	5f 3f       	cpi	r21, 0xFF	; 255
    1a32:	e4 f3       	brlt	.-8      	; 0x1a2c <__mulsf3_pse+0x84>
    1a34:	98 3e       	cpi	r25, 0xE8	; 232
    1a36:	d4 f3       	brlt	.-12     	; 0x1a2c <__mulsf3_pse+0x84>
    1a38:	86 95       	lsr	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	b7 95       	ror	r27
    1a40:	f7 95       	ror	r31
    1a42:	e7 95       	ror	r30
    1a44:	9f 5f       	subi	r25, 0xFF	; 255
    1a46:	c1 f7       	brne	.-16     	; 0x1a38 <__mulsf3_pse+0x90>
    1a48:	fe 2b       	or	r31, r30
    1a4a:	88 0f       	add	r24, r24
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	96 95       	lsr	r25
    1a50:	87 95       	ror	r24
    1a52:	97 f9       	bld	r25, 7
    1a54:	08 95       	ret

00001a56 <_exit>:
    1a56:	f8 94       	cli

00001a58 <__stop_program>:
    1a58:	ff cf       	rjmp	.-2      	; 0x1a58 <__stop_program>
