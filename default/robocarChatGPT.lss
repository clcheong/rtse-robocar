
robocarChatGPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800100  00001ad8  00001b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ad  00800260  00800260  00001ccc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000031  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001d58  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017c0  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008ef  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d30  00000000  00000000  00003f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000108  00000000  00000000  00004ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000723  00000000  00000000  00004da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000503  00000000  00000000  000054cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  000059ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ed       	ldi	r30, 0xD8	; 216
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 36       	cpi	r26, 0x60	; 96
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 30       	cpi	r26, 0x0D	; 13
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <main>
      9e:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
            cprintf("Obstacle Detected\n");
      a6:	c9 e1       	ldi	r28, 0x19	; 25
      a8:	d2 e0       	ldi	r29, 0x02	; 2
            myrobot.obstacle = 1;  
      aa:	11 e0       	ldi	r17, 0x01	; 1
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
      ac:	0e 94 af 04 	call	0x95e	; 0x95e <robo_proxSensor>
      b0:	01 97       	sbiw	r24, 0x01	; 1
      b2:	81 f4       	brne	.+32     	; 0xd4 <CheckCollision+0x2e>
            cprintf("Obstacle Detected\n");
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <cprintf>
            myrobot.obstacle = 1;  
      bc:	10 93 e4 02 	sts	0x02E4, r17	; 0x8002e4 <myrobot+0x4>
      c0:	0f 90       	pop	r0
      c2:	0f 90       	pop	r0
        }                                           /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 1);                /* Task period ~ 100 ms              */
      c4:	21 e0       	ldi	r18, 0x01	; 1
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <OSTimeDlyHMSM>
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
      d2:	ec cf       	rjmp	.-40     	; 0xac <CheckCollision+0x6>
            cprintf("Obstacle Detected\n");
            myrobot.obstacle = 1;  
        }                                           /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      d4:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <myrobot+0x4>
      d8:	f5 cf       	rjmp	.-22     	; 0xc4 <CheckCollision+0x1e>

000000da <CntrlMotors>:
    int speed_r, speed_l;

    for(;;)
    {

        cprintf("Ctrl Motors\n");
      da:	cc e2       	ldi	r28, 0x2C	; 44
      dc:	d2 e0       	ldi	r29, 0x02	; 2
      de:	df 93       	push	r29
      e0:	cf 93       	push	r28
      e2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <cprintf>

        speed_r = - myrobot.rspeed;
      e6:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <myrobot>
      ea:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <myrobot+0x1>
      ee:	71 95       	neg	r23
      f0:	61 95       	neg	r22
      f2:	71 09       	sbc	r23, r1
        speed_l = - myrobot.lspeed;
      f4:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <myrobot+0x2>
      f8:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <myrobot+0x3>
        robo_motorSpeed(speed_l, speed_r);
      fc:	91 95       	neg	r25
      fe:	81 95       	neg	r24
     100:	91 09       	sbc	r25, r1
     102:	0e 94 54 04 	call	0x8a8	; 0x8a8 <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 1);                /* Task period ~ 250 ms              */
     106:	21 e0       	ldi	r18, 0x01	; 1
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	40 e0       	ldi	r20, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <OSTimeDlyHMSM>
     114:	0f 90       	pop	r0
     116:	0f 90       	pop	r0
     118:	e2 cf       	rjmp	.-60     	; 0xde <CntrlMotors+0x4>

0000011a <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    cprintf("Task Start\n");
     11a:	89 e3       	ldi	r24, 0x39	; 57
     11c:	92 e0       	ldi	r25, 0x02	; 2
     11e:	9f 93       	push	r25
     120:	8f 93       	push	r24
     122:	0e 94 4d 05 	call	0xa9a	; 0xa9a <cprintf>

    OS_ticks_init();                                        /* enable RTOS timer tick        */
     126:	0e 94 22 05 	call	0xa44	; 0xa44 <OS_ticks_init>

    OSTaskCreate(Navig,                                     /* Task function                 */
     12a:	24 e0       	ldi	r18, 0x04	; 4
     12c:	48 e8       	ldi	r20, 0x88	; 136
     12e:	54 e0       	ldi	r21, 0x04	; 4
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	8c e8       	ldi	r24, 0x8C	; 140
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 2a 09 	call	0x1254	; 0x1254 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

    OSTaskCreate(CheckCollision,                            /* Task function                 */
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	4f ed       	ldi	r20, 0xDF	; 223
     140:	52 e0       	ldi	r21, 0x02	; 2
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	83 e5       	ldi	r24, 0x53	; 83
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 2a 09 	call	0x1254	; 0x1254 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     14e:	23 e0       	ldi	r18, 0x03	; 3
     150:	48 e8       	ldi	r20, 0x88	; 136
     152:	53 e0       	ldi	r21, 0x03	; 3
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	8d e6       	ldi	r24, 0x6D	; 109
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 2a 09 	call	0x1254	; 0x1254 <OSTaskCreate>
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0



    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	45 e0       	ldi	r20, 0x05	; 5
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <OSTimeDlyHMSM>
     172:	f8 cf       	rjmp	.-16     	; 0x164 <TaskStart+0x4a>

00000174 <constrain>:
    int inBlackBox;
    int turn;
} myrobot;

int constrain(int value, int lowerBound, int upperBound) {
    if (value < lowerBound) {
     174:	86 17       	cp	r24, r22
     176:	97 07       	cpc	r25, r23
     178:	2c f0       	brlt	.+10     	; 0x184 <constrain+0x10>
     17a:	bc 01       	movw	r22, r24
     17c:	48 17       	cp	r20, r24
     17e:	59 07       	cpc	r21, r25
     180:	0c f4       	brge	.+2      	; 0x184 <constrain+0x10>
     182:	ba 01       	movw	r22, r20
        return upperBound;
    }
    else {
        return value;
    }
}
     184:	cb 01       	movw	r24, r22
     186:	08 95       	ret

00000188 <absoluteValue>:

int absoluteValue(int num) {
     188:	97 ff       	sbrs	r25, 7
     18a:	03 c0       	rjmp	.+6      	; 0x192 <absoluteValue+0xa>
     18c:	91 95       	neg	r25
     18e:	81 95       	neg	r24
     190:	91 09       	sbc	r25, r1
    if (num < 0)
        return -num;
    else
        return num;
}
     192:	08 95       	ret

00000194 <pidControl>:

void pidControl(int sense) {
     194:	4f 92       	push	r4
     196:	5f 92       	push	r5
     198:	6f 92       	push	r6
     19a:	7f 92       	push	r7
     19c:	8f 92       	push	r8
     19e:	9f 92       	push	r9
     1a0:	af 92       	push	r10
     1a2:	bf 92       	push	r11
     1a4:	cf 92       	push	r12
     1a6:	df 92       	push	r13
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inLightField == 1) {
     1ac:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <myrobot+0x23>
     1b0:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <myrobot+0x24>
     1b4:	21 30       	cpi	r18, 0x01	; 1
     1b6:	31 05       	cpc	r19, r1
     1b8:	61 f4       	brne	.+24     	; 0x1d2 <pidControl+0x3e>
        myrobot.KP = 0.065;
     1ba:	48 eb       	ldi	r20, 0xB8	; 184
     1bc:	5e e1       	ldi	r21, 0x1E	; 30
     1be:	65 e8       	ldi	r22, 0x85	; 133
     1c0:	7d e3       	ldi	r23, 0x3D	; 61
     1c2:	40 93 e5 02 	sts	0x02E5, r20	; 0x8002e5 <myrobot+0x5>
     1c6:	50 93 e6 02 	sts	0x02E6, r21	; 0x8002e6 <myrobot+0x6>
     1ca:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <myrobot+0x7>
     1ce:	70 93 e8 02 	sts	0x02E8, r23	; 0x8002e8 <myrobot+0x8>
    // } else {
    //     motorSpeed = DEFAULT_MOTOR_SPEED;
    //     myrobot.KP = DEFAULT_KP; 
    // }

    int error = myrobot.goal - sense;
     1d2:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <myrobot+0x19>
     1d6:	70 91 fa 02 	lds	r23, 0x02FA	; 0x8002fa <myrobot+0x1a>
     1da:	68 1b       	sub	r22, r24
     1dc:	79 0b       	sbc	r23, r25

    myrobot.integral = myrobot.integral + error;
     1de:	07 2e       	mov	r0, r23
     1e0:	00 0c       	add	r0, r0
     1e2:	88 0b       	sbc	r24, r24
     1e4:	99 0b       	sbc	r25, r25
     1e6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__floatsisf>
     1ea:	6b 01       	movw	r12, r22
     1ec:	7c 01       	movw	r14, r24
     1ee:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <myrobot+0x15>
     1f2:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <myrobot+0x16>
     1f6:	40 91 f7 02 	lds	r20, 0x02F7	; 0x8002f7 <myrobot+0x17>
     1fa:	50 91 f8 02 	lds	r21, 0x02F8	; 0x8002f8 <myrobot+0x18>
     1fe:	0e 94 cd 0b 	call	0x179a	; 0x179a <__addsf3>
     202:	4b 01       	movw	r8, r22
     204:	5c 01       	movw	r10, r24
     206:	80 92 f5 02 	sts	0x02F5, r8	; 0x8002f5 <myrobot+0x15>
     20a:	90 92 f6 02 	sts	0x02F6, r9	; 0x8002f6 <myrobot+0x16>
     20e:	a0 92 f7 02 	sts	0x02F7, r10	; 0x8002f7 <myrobot+0x17>
     212:	b0 92 f8 02 	sts	0x02F8, r11	; 0x8002f8 <myrobot+0x18>
    //     myrobot.turn += 1;
    // }


    // Calculate motor adjustments
    int adjustment = (myrobot.KP * error) + (myrobot.KI * (myrobot.integral)) + (myrobot.KD * (error - myrobot.lastError));
     216:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <myrobot+0x5>
     21a:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <myrobot+0x6>
     21e:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <myrobot+0x7>
     222:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <myrobot+0x8>
     226:	c7 01       	movw	r24, r14
     228:	b6 01       	movw	r22, r12
     22a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__mulsf3>
     22e:	2b 01       	movw	r4, r22
     230:	3c 01       	movw	r6, r24
     232:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <myrobot+0xd>
     236:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <myrobot+0xe>
     23a:	40 91 ef 02 	lds	r20, 0x02EF	; 0x8002ef <myrobot+0xf>
     23e:	50 91 f0 02 	lds	r21, 0x02F0	; 0x8002f0 <myrobot+0x10>
     242:	c5 01       	movw	r24, r10
     244:	b4 01       	movw	r22, r8
     246:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__mulsf3>
     24a:	9b 01       	movw	r18, r22
     24c:	ac 01       	movw	r20, r24
     24e:	c3 01       	movw	r24, r6
     250:	b2 01       	movw	r22, r4
     252:	0e 94 cd 0b 	call	0x179a	; 0x179a <__addsf3>
     256:	4b 01       	movw	r8, r22
     258:	5c 01       	movw	r10, r24
     25a:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <myrobot+0x11>
     25e:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <myrobot+0x12>
     262:	40 91 f3 02 	lds	r20, 0x02F3	; 0x8002f3 <myrobot+0x13>
     266:	50 91 f4 02 	lds	r21, 0x02F4	; 0x8002f4 <myrobot+0x14>
     26a:	c7 01       	movw	r24, r14
     26c:	b6 01       	movw	r22, r12
     26e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__subsf3>
     272:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <myrobot+0x9>
     276:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <myrobot+0xa>
     27a:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <myrobot+0xb>
     27e:	50 91 ec 02 	lds	r21, 0x02EC	; 0x8002ec <myrobot+0xc>
     282:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__mulsf3>
     286:	9b 01       	movw	r18, r22
     288:	ac 01       	movw	r20, r24
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	0e 94 cd 0b 	call	0x179a	; 0x179a <__addsf3>
     292:	0e 94 39 0c 	call	0x1872	; 0x1872 <__fixsfsi>

    // Store error for the next iteration
    myrobot.lastError = error;
     296:	c0 92 f1 02 	sts	0x02F1, r12	; 0x8002f1 <myrobot+0x11>
     29a:	d0 92 f2 02 	sts	0x02F2, r13	; 0x8002f2 <myrobot+0x12>
     29e:	e0 92 f3 02 	sts	0x02F3, r14	; 0x8002f3 <myrobot+0x13>
     2a2:	f0 92 f4 02 	sts	0x02F4, r15	; 0x8002f4 <myrobot+0x14>

    // Adjust motors
    myrobot.lspeed = constrain((motorSpeed - adjustment), -100 , 100);
     2a6:	29 e1       	ldi	r18, 0x19	; 25
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	26 1b       	sub	r18, r22
     2ac:	37 0b       	sbc	r19, r23
     2ae:	25 36       	cpi	r18, 0x65	; 101
     2b0:	31 05       	cpc	r19, r1
     2b2:	14 f0       	brlt	.+4      	; 0x2b8 <pidControl+0x124>
     2b4:	24 e6       	ldi	r18, 0x64	; 100
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	2c 39       	cpi	r18, 0x9C	; 156
     2ba:	4f ef       	ldi	r20, 0xFF	; 255
     2bc:	34 07       	cpc	r19, r20
     2be:	14 f4       	brge	.+4      	; 0x2c4 <pidControl+0x130>
     2c0:	2c e9       	ldi	r18, 0x9C	; 156
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	30 93 e3 02 	sts	0x02E3, r19	; 0x8002e3 <myrobot+0x3>
     2c8:	20 93 e2 02 	sts	0x02E2, r18	; 0x8002e2 <myrobot+0x2>
    myrobot.rspeed = constrain((motorSpeed + adjustment), -100 , 100);
     2cc:	67 5e       	subi	r22, 0xE7	; 231
     2ce:	7f 4f       	sbci	r23, 0xFF	; 255
     2d0:	65 36       	cpi	r22, 0x65	; 101
     2d2:	71 05       	cpc	r23, r1
     2d4:	14 f0       	brlt	.+4      	; 0x2da <pidControl+0x146>
     2d6:	64 e6       	ldi	r22, 0x64	; 100
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	6c 39       	cpi	r22, 0x9C	; 156
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	78 07       	cpc	r23, r24
     2e0:	14 f4       	brge	.+4      	; 0x2e6 <pidControl+0x152>
     2e2:	6c e9       	ldi	r22, 0x9C	; 156
     2e4:	7f ef       	ldi	r23, 0xFF	; 255
     2e6:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <myrobot+0x1>
     2ea:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <myrobot>
    

    myrobot.prevLeftSpeed = myrobot.lspeed;
     2ee:	30 93 fc 02 	sts	0x02FC, r19	; 0x8002fc <myrobot+0x1c>
     2f2:	20 93 fb 02 	sts	0x02FB, r18	; 0x8002fb <myrobot+0x1b>
    myrobot.prevRightSpeed = myrobot.rspeed;
     2f6:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <myrobot+0x1e>
     2fa:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <myrobot+0x1d>
}
     2fe:	ff 90       	pop	r15
     300:	ef 90       	pop	r14
     302:	df 90       	pop	r13
     304:	cf 90       	pop	r12
     306:	bf 90       	pop	r11
     308:	af 90       	pop	r10
     30a:	9f 90       	pop	r9
     30c:	8f 90       	pop	r8
     30e:	7f 90       	pop	r7
     310:	6f 90       	pop	r6
     312:	5f 90       	pop	r5
     314:	4f 90       	pop	r4
     316:	08 95       	ret

00000318 <Navig>:

void Navig (void *data)
{
    

    int pressCount = 0;
     318:	51 2c       	mov	r5, r1
     31a:	41 2c       	mov	r4, r1
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     31c:	c2 ee       	ldi	r28, 0xE2	; 226
     31e:	df ef       	ldi	r29, 0xFF	; 255

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     320:	01 e4       	ldi	r16, 0x41	; 65
     322:	10 e0       	ldi	r17, 0x00	; 0

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     324:	6d ed       	ldi	r22, 0xDD	; 221
     326:	e6 2e       	mov	r14, r22
     328:	ff 24       	eor	r15, r15
     32a:	fa 94       	dec	r15
                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
     32c:	7d e2       	ldi	r23, 0x2D	; 45
     32e:	67 2e       	mov	r6, r23
     330:	71 2c       	mov	r7, r1

            } else {

                // normal mode
                switch (sensorValue) {
                    case 2: myrobot.lspeed = 50;
     332:	e2 e3       	ldi	r30, 0x32	; 50
     334:	ce 2e       	mov	r12, r30
     336:	d1 2c       	mov	r13, r1
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
                            break;

                    case 0: myrobot.lspeed = 30;
     338:	fe e1       	ldi	r31, 0x1E	; 30
     33a:	8f 2e       	mov	r8, r31
     33c:	91 2c       	mov	r9, r1
                            myrobot.rspeed = 60;
     33e:	ac e3       	ldi	r26, 0x3C	; 60
     340:	2a 2e       	mov	r2, r26
     342:	31 2c       	mov	r3, r1

    int pressCount = 0;
    for (;;)
    {

        cprintf("Navigate\n");
     344:	85 e4       	ldi	r24, 0x45	; 69
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	9f 93       	push	r25
     34a:	8f 93       	push	r24
     34c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <cprintf>
		// {
		// 	myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
        //     myrobot.lspeed   =  LOW_SPEED;
		// }

        int lightSense = robo_lightSensor();
     350:	0e 94 bb 04 	call	0x976	; 0x976 <robo_lightSensor>
     354:	5c 01       	movw	r10, r24

        if(robo_goPressed() != NULL){
     356:	0e 94 16 05 	call	0xa2c	; 0xa2c <robo_goPressed>
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	88 23       	and	r24, r24
     360:	19 f1       	breq	.+70     	; 0x3a8 <Navig+0x90>

            while(robo_goPressed() != NULL);
     362:	0e 94 16 05 	call	0xa2c	; 0xa2c <robo_goPressed>
     366:	81 11       	cpse	r24, r1
     368:	fc cf       	rjmp	.-8      	; 0x362 <Navig+0x4a>

            pressCount++;
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	48 1a       	sub	r4, r24
     36e:	58 0a       	sbc	r5, r24
            if (pressCount >= 5){
     370:	95 e0       	ldi	r25, 0x05	; 5
     372:	49 16       	cp	r4, r25
     374:	51 04       	cpc	r5, r1
     376:	64 f1       	brlt	.+88     	; 0x3d0 <Navig+0xb8>
                myrobot.inBlackBox = 1;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <myrobot+0x26>
     380:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <myrobot+0x25>
                } else {
                    myrobot.inRoundabout = 0;
                }
            }

            if(myrobot.inBlackBox == 1){
     384:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <myrobot+0x25>
     388:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <myrobot+0x26>
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	11 f4       	brne	.+4      	; 0x394 <Navig+0x7c>
                robo_Honk();
     390:	0e 94 f7 04 	call	0x9ee	; 0x9ee <robo_Honk>
            }
            
            if (myrobot.inBlackBox == 0) {
     394:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <myrobot+0x25>
     398:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <myrobot+0x26>
     39c:	89 2b       	or	r24, r25
     39e:	21 f4       	brne	.+8      	; 0x3a8 <Navig+0x90>
                robo_LED_toggle();
     3a0:	85 b1       	in	r24, 0x05	; 5
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	89 27       	eor	r24, r25
     3a6:	85 b9       	out	0x05, r24	; 5
            }

        }


        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
     3a8:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <myrobot+0x4>
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	09 f0       	breq	.+2      	; 0x3b2 <Navig+0x9a>
     3b0:	4e c0       	rjmp	.+156    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     3b2:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <myrobot+0x23>
     3b6:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <myrobot+0x24>
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	09 f5       	brne	.+66     	; 0x400 <__FUSE_REGION_LENGTH__>
            myrobot.lspeed = 0;
     3be:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <myrobot+0x3>
     3c2:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <myrobot+0x2>
            myrobot.rspeed = 0;
     3c6:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <myrobot+0x1>
     3ca:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <myrobot>
     3ce:	ba cf       	rjmp	.-140    	; 0x344 <Navig+0x2c>

            pressCount++;
            if (pressCount >= 5){
                myrobot.inBlackBox = 1;
            } else {
                if (myrobot.inRoundabout == 0 && myrobot.inBlackBox == 0) {
     3d0:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <myrobot+0x1f>
     3d4:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <myrobot+0x20>
     3d8:	89 2b       	or	r24, r25
     3da:	69 f4       	brne	.+26     	; 0x3f6 <Navig+0xde>
     3dc:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <myrobot+0x25>
     3e0:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <myrobot+0x26>
     3e4:	89 2b       	or	r24, r25
     3e6:	39 f4       	brne	.+14     	; 0x3f6 <Navig+0xde>
                    myrobot.inRoundabout = 1;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <myrobot+0x20>
     3f0:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <myrobot+0x1f>
     3f4:	c7 cf       	rjmp	.-114    	; 0x384 <Navig+0x6c>
                } else {
                    myrobot.inRoundabout = 0;
     3f6:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <myrobot+0x20>
     3fa:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <myrobot+0x1f>
     3fe:	c2 cf       	rjmp	.-124    	; 0x384 <Navig+0x6c>
        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
            myrobot.lspeed = 0;
            myrobot.rspeed = 0;
        } else if (myrobot.obstacle == 1) {

            myrobot.inLightField = 0;
     400:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <myrobot+0x24>
     404:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <myrobot+0x23>
            myrobot.inRoundabout = 0;
     408:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <myrobot+0x20>
     40c:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <myrobot+0x1f>
            myrobot.lspeed = 30;
     410:	90 92 e3 02 	sts	0x02E3, r9	; 0x8002e3 <myrobot+0x3>
     414:	80 92 e2 02 	sts	0x02E2, r8	; 0x8002e2 <myrobot+0x2>
            myrobot.rspeed = -30;
     418:	d0 93 e1 02 	sts	0x02E1, r29	; 0x8002e1 <myrobot+0x1>
     41c:	c0 93 e0 02 	sts	0x02E0, r28	; 0x8002e0 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 800); // TUNE HERE
     420:	20 e2       	ldi	r18, 0x20	; 32
     422:	33 e0       	ldi	r19, 0x03	; 3
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <OSTimeDlyHMSM>

            myrobot.lspeed = 60;
     42e:	30 92 e3 02 	sts	0x02E3, r3	; 0x8002e3 <myrobot+0x3>
     432:	20 92 e2 02 	sts	0x02E2, r2	; 0x8002e2 <myrobot+0x2>
            myrobot.rspeed = 60;
     436:	30 92 e1 02 	sts	0x02E1, r3	; 0x8002e1 <myrobot+0x1>
     43a:	20 92 e0 02 	sts	0x02E0, r2	; 0x8002e0 <myrobot>
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE
     43e:	20 e2       	ldi	r18, 0x20	; 32
     440:	33 e0       	ldi	r19, 0x03	; 3
     442:	41 e0       	ldi	r20, 0x01	; 1
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 1);                /* Task period ~ 500 ms                  */
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <OSTimeDlyHMSM>
     44c:	7b cf       	rjmp	.-266    	; 0x344 <Navig+0x2c>

            myrobot.lspeed = 60;
            myrobot.rspeed = 60;
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE

        } else if (lightSense >= 85 && myrobot.inLightField == 0) {
     44e:	95 e5       	ldi	r25, 0x55	; 85
     450:	a9 16       	cp	r10, r25
     452:	b1 04       	cpc	r11, r1
     454:	cc f1       	brlt	.+114    	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
     456:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <myrobot+0x23>
     45a:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <myrobot+0x24>
     45e:	89 2b       	or	r24, r25
     460:	99 f5       	brne	.+102    	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>

            cprintf("Light Detected\n");
     462:	8f e4       	ldi	r24, 0x4F	; 79
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	9f 93       	push	r25
     468:	8f 93       	push	r24
     46a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <cprintf>

            myrobot.inRoundabout = 0;
     46e:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <myrobot+0x20>
     472:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <myrobot+0x1f>
            myrobot.inLightField = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <myrobot+0x24>
     47e:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <myrobot+0x23>
            myrobot.lspeed = 30;
     482:	90 92 e3 02 	sts	0x02E3, r9	; 0x8002e3 <myrobot+0x3>
     486:	80 92 e2 02 	sts	0x02E2, r8	; 0x8002e2 <myrobot+0x2>
            myrobot.rspeed = 30;
     48a:	90 92 e1 02 	sts	0x02E1, r9	; 0x8002e1 <myrobot+0x1>
     48e:	80 92 e0 02 	sts	0x02E0, r8	; 0x8002e0 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 600); // TUNE HERE
     492:	28 e5       	ldi	r18, 0x58	; 88
     494:	32 e0       	ldi	r19, 0x02	; 2
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <OSTimeDlyHMSM>

            myrobot.lspeed = -65;
     4a0:	8f eb       	ldi	r24, 0xBF	; 191
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <myrobot+0x3>
     4a8:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <myrobot+0x2>
            myrobot.rspeed = 65;
     4ac:	10 93 e1 02 	sts	0x02E1, r17	; 0x8002e1 <myrobot+0x1>
     4b0:	00 93 e0 02 	sts	0x02E0, r16	; 0x8002e0 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 200); // TUNE HERE
     4b4:	28 ec       	ldi	r18, 0xC8	; 200
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <OSTimeDlyHMSM>
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	3e cf       	rjmp	.-388    	; 0x344 <Navig+0x2c>
        } else {

            int sense = myrobot.goal;
     4c8:	a0 90 f9 02 	lds	r10, 0x02F9	; 0x8002f9 <myrobot+0x19>
     4cc:	b0 90 fa 02 	lds	r11, 0x02FA	; 0x8002fa <myrobot+0x1a>

            int sensorValue = robo_lineSensor();
     4d0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <robo_lineSensor>
     4d4:	fc 01       	movw	r30, r24

            // if(sensorValue == 100) {
            if(myrobot.inRoundabout == 1) {
     4d6:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <myrobot+0x1f>
     4da:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <myrobot+0x20>
     4de:	21 30       	cpi	r18, 0x01	; 1
     4e0:	31 05       	cpc	r19, r1
     4e2:	f9 f4       	brne	.+62     	; 0x522 <__FUSE_REGION_LENGTH__+0x122>

                // roundabout mode

                switch (sensorValue) {
     4e4:	08 97       	sbiw	r24, 0x08	; 8
     4e6:	08 f0       	brcs	.+2      	; 0x4ea <__FUSE_REGION_LENGTH__+0xea>
     4e8:	47 c0       	rjmp	.+142    	; 0x578 <__FUSE_REGION_LENGTH__+0x178>
     4ea:	e7 58       	subi	r30, 0x87	; 135
     4ec:	fd 4f       	sbci	r31, 0xFD	; 253
     4ee:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__tablejump2__>
     4f2:	c5 02       	muls	r28, r21
     4f4:	c5 02       	muls	r28, r21
     4f6:	aa 02       	muls	r26, r26
     4f8:	81 02       	muls	r24, r17
     4fa:	b4 02       	muls	r27, r20
     4fc:	aa 02       	muls	r26, r26
     4fe:	8c 02       	muls	r24, r28
     500:	c5 02       	muls	r28, r21
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 1500;
     502:	5c ed       	ldi	r21, 0xDC	; 220
     504:	a5 2e       	mov	r10, r21
     506:	55 e0       	ldi	r21, 0x05	; 5
     508:	b5 2e       	mov	r11, r21
                    default: myrobot.lspeed = -30;
                             myrobot.rspeed = -30;
                             break;
                }

                pidControl(sense);
     50a:	c5 01       	movw	r24, r10
     50c:	0e 94 ca 00 	call	0x194	; 0x194 <pidControl>
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 1);                /* Task period ~ 500 ms                  */
     510:	21 e0       	ldi	r18, 0x01	; 1
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	96 cf       	rjmp	.-212    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
                            break;

                    case 5: sense = 1000;
                            break;

                    case 6: sense = 500;
     518:	44 ef       	ldi	r20, 0xF4	; 244
     51a:	a4 2e       	mov	r10, r20
     51c:	bb 24       	eor	r11, r11
     51e:	b3 94       	inc	r11
                            break;
     520:	f4 cf       	rjmp	.-24     	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
                // myrobot.rspeed = - (myrobot.prevLeftSpeed * 1.1);
                
                //myrobot.lspeed = - 40;
               // myrobot.rspeed = - 30;

            } else if (myrobot.inLightField == 1) {
     522:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <myrobot+0x23>
     526:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <myrobot+0x24>
     52a:	21 30       	cpi	r18, 0x01	; 1
     52c:	31 05       	cpc	r19, r1
     52e:	91 f5       	brne	.+100    	; 0x594 <__FUSE_REGION_LENGTH__+0x194>

                // light field mode

                robo_LED_toggle();
     530:	25 b1       	in	r18, 0x05	; 5
     532:	31 e0       	ldi	r19, 0x01	; 1
     534:	23 27       	eor	r18, r19
     536:	25 b9       	out	0x05, r18	; 5

                switch (sensorValue) {
     538:	08 97       	sbiw	r24, 0x08	; 8
     53a:	f0 f4       	brcc	.+60     	; 0x578 <__FUSE_REGION_LENGTH__+0x178>
     53c:	ee 55       	subi	r30, 0x5E	; 94
     53e:	fd 4f       	sbci	r31, 0xFD	; 253
     540:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__tablejump2__>
     544:	aa 02       	muls	r26, r26
     546:	c5 02       	muls	r28, r21
     548:	aa 02       	muls	r26, r26
     54a:	af 02       	muls	r26, r31
     54c:	b4 02       	muls	r27, r20
     54e:	aa 02       	muls	r26, r26
     550:	b7 02       	muls	r27, r23
     552:	aa 02       	muls	r26, r26
                    case 2: sense = 1000;
     554:	38 ee       	ldi	r19, 0xE8	; 232
     556:	a3 2e       	mov	r10, r19
     558:	33 e0       	ldi	r19, 0x03	; 3
     55a:	b3 2e       	mov	r11, r19
     55c:	d6 cf       	rjmp	.-84     	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 2500;
     55e:	24 ec       	ldi	r18, 0xC4	; 196
     560:	a2 2e       	mov	r10, r18
     562:	29 e0       	ldi	r18, 0x09	; 9
     564:	b2 2e       	mov	r11, r18
                            break;
     566:	d1 cf       	rjmp	.-94     	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>

                    case 4: sense = 0;
     568:	b1 2c       	mov	r11, r1
     56a:	a1 2c       	mov	r10, r1
                            break;
     56c:	ce cf       	rjmp	.-100    	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>

                    case 5: sense = 1000;
                            break;

                    case 6: sense = -500;
     56e:	9c e0       	ldi	r25, 0x0C	; 12
     570:	a9 2e       	mov	r10, r25
     572:	9e ef       	ldi	r25, 0xFE	; 254
     574:	b9 2e       	mov	r11, r25
                            break;
     576:	c9 cf       	rjmp	.-110    	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
                            break;
                    case 0:
                            sense = 1000;
                            break;               
                    
                    default: myrobot.lspeed = -30;
     578:	d0 93 e3 02 	sts	0x02E3, r29	; 0x8002e3 <myrobot+0x3>
     57c:	c0 93 e2 02 	sts	0x02E2, r28	; 0x8002e2 <myrobot+0x2>
                             myrobot.rspeed = -30;
     580:	d0 93 e1 02 	sts	0x02E1, r29	; 0x8002e1 <myrobot+0x1>
     584:	c0 93 e0 02 	sts	0x02E0, r28	; 0x8002e0 <myrobot>
                             break;
     588:	c0 cf       	rjmp	.-128    	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>

                switch (sensorValue) {
                    case 2: sense = 1000;
                            break;
                    
                    case 1: sense = 2000;
     58a:	80 ed       	ldi	r24, 0xD0	; 208
     58c:	a8 2e       	mov	r10, r24
     58e:	87 e0       	ldi	r24, 0x07	; 7
     590:	b8 2e       	mov	r11, r24
     592:	bb cf       	rjmp	.-138    	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
                             break;
                }

                pidControl(sense);

            } else if (myrobot.inBlackBox == 1) {
     594:	20 91 05 03 	lds	r18, 0x0305	; 0x800305 <myrobot+0x25>
     598:	30 91 06 03 	lds	r19, 0x0306	; 0x800306 <myrobot+0x26>
     59c:	21 30       	cpi	r18, 0x01	; 1
     59e:	31 05       	cpc	r19, r1
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <__FUSE_REGION_LENGTH__+0x1a4>
     5a2:	3a c0       	rjmp	.+116    	; 0x618 <__FUSE_REGION_LENGTH__+0x218>

                switch (sensorValue) {
     5a4:	08 97       	sbiw	r24, 0x08	; 8
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <__FUSE_REGION_LENGTH__+0x1aa>
     5a8:	ae c0       	rjmp	.+348    	; 0x706 <__FUSE_REGION_LENGTH__+0x306>
     5aa:	e7 52       	subi	r30, 0x27	; 39
     5ac:	fd 4f       	sbci	r31, 0xFD	; 253
     5ae:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__tablejump2__>
     5b2:	03 03       	mulsu	r16, r19
     5b4:	24 03       	mulsu	r18, r20
     5b6:	1b 03       	fmul	r17, r19
     5b8:	2d 03       	fmul	r18, r21
     5ba:	32 03       	mulsu	r19, r18
     5bc:	e1 02       	muls	r30, r17
     5be:	46 03       	mulsu	r20, r22
     5c0:	fc 02       	muls	r31, r28

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
                            break;

                    case 5: myrobot.lspeed = 75;
     5c2:	8b e4       	ldi	r24, 0x4B	; 75
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <myrobot+0x3>
     5ca:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <myrobot+0x2>
                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
     5ce:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <myrobot+0x1>
     5d2:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <myrobot>
                             myrobot.rspeed = -30;
                             break;
                }

                if(sensorValue != 0) {
                    myrobot.prevLeftSpeed = myrobot.lspeed;
     5d6:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <myrobot+0x2>
     5da:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <myrobot+0x3>
     5de:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <myrobot+0x1c>
     5e2:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <myrobot+0x1b>
                    myrobot.prevRightSpeed = myrobot.rspeed;
     5e6:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <myrobot>
     5ea:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <myrobot+0x1>
     5ee:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <myrobot+0x1e>
     5f2:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <myrobot+0x1d>
     5f6:	8c cf       	rjmp	.-232    	; 0x510 <__FUSE_REGION_LENGTH__+0x110>

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     5f8:	10 93 e3 02 	sts	0x02E3, r17	; 0x8002e3 <myrobot+0x3>
     5fc:	00 93 e2 02 	sts	0x02E2, r16	; 0x8002e2 <myrobot+0x2>
                            myrobot.rspeed = 75;
     600:	8b e4       	ldi	r24, 0x4B	; 75
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	e4 cf       	rjmp	.-56     	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
                            break;

                    case 0: myrobot.lspeed = 30;
     606:	90 92 e3 02 	sts	0x02E3, r9	; 0x8002e3 <myrobot+0x3>
     60a:	80 92 e2 02 	sts	0x02E2, r8	; 0x8002e2 <myrobot+0x2>
                            myrobot.rspeed = 60;
     60e:	30 92 e1 02 	sts	0x02E1, r3	; 0x8002e1 <myrobot+0x1>
     612:	20 92 e0 02 	sts	0x02E0, r2	; 0x8002e0 <myrobot>
     616:	7c cf       	rjmp	.-264    	; 0x510 <__FUSE_REGION_LENGTH__+0x110>
                }

            } else {

                // normal mode
                switch (sensorValue) {
     618:	08 97       	sbiw	r24, 0x08	; 8
     61a:	08 f0       	brcs	.+2      	; 0x61e <__FUSE_REGION_LENGTH__+0x21e>
     61c:	74 c0       	rjmp	.+232    	; 0x706 <__FUSE_REGION_LENGTH__+0x306>
     61e:	ed 5e       	subi	r30, 0xED	; 237
     620:	fc 4f       	sbci	r31, 0xFC	; 252
     622:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__tablejump2__>
     626:	52 03       	mulsu	r21, r18
     628:	24 03       	mulsu	r18, r20
     62a:	1b 03       	fmul	r17, r19
     62c:	2d 03       	fmul	r18, r21
     62e:	32 03       	mulsu	r19, r18
     630:	3b 03       	fmul	r19, r19
     632:	46 03       	mulsu	r20, r22
     634:	4b 03       	fmul	r20, r19
                    case 2: myrobot.lspeed = 50;
     636:	d0 92 e3 02 	sts	0x02E3, r13	; 0x8002e3 <myrobot+0x3>
     63a:	c0 92 e2 02 	sts	0x02E2, r12	; 0x8002e2 <myrobot+0x2>
                            myrobot.rspeed = 50;
     63e:	d0 92 e1 02 	sts	0x02E1, r13	; 0x8002e1 <myrobot+0x1>
     642:	c0 92 e0 02 	sts	0x02E0, r12	; 0x8002e0 <myrobot>
                            break;
     646:	c7 cf       	rjmp	.-114    	; 0x5d6 <__FUSE_REGION_LENGTH__+0x1d6>
                    
                    case 1: myrobot.lspeed = 45;
     648:	70 92 e3 02 	sts	0x02E3, r7	; 0x8002e3 <myrobot+0x3>
     64c:	60 92 e2 02 	sts	0x02E2, r6	; 0x8002e2 <myrobot+0x2>
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
     650:	f0 92 e1 02 	sts	0x02E1, r15	; 0x8002e1 <myrobot+0x1>
     654:	e0 92 e0 02 	sts	0x02E0, r14	; 0x8002e0 <myrobot>
                            break;
     658:	be cf       	rjmp	.-132    	; 0x5d6 <__FUSE_REGION_LENGTH__+0x1d6>
                    
                    case 1: myrobot.lspeed = 45;
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
     65a:	10 93 e3 02 	sts	0x02E3, r17	; 0x8002e3 <myrobot+0x3>
     65e:	00 93 e2 02 	sts	0x02E2, r16	; 0x8002e2 <myrobot+0x2>
     662:	f6 cf       	rjmp	.-20     	; 0x650 <__FUSE_REGION_LENGTH__+0x250>
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
     664:	f0 92 e3 02 	sts	0x02E3, r15	; 0x8002e3 <myrobot+0x3>
     668:	e0 92 e2 02 	sts	0x02E2, r14	; 0x8002e2 <myrobot+0x2>
                            myrobot.rspeed = 45;
     66c:	70 92 e1 02 	sts	0x02E1, r7	; 0x8002e1 <myrobot+0x1>
     670:	60 92 e0 02 	sts	0x02E0, r6	; 0x8002e0 <myrobot>
                            break;
     674:	b0 cf       	rjmp	.-160    	; 0x5d6 <__FUSE_REGION_LENGTH__+0x1d6>

                    case 5: myrobot.lspeed = - 65;
     676:	8f eb       	ldi	r24, 0xBF	; 191
     678:	9f ef       	ldi	r25, 0xFF	; 255
     67a:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <myrobot+0x3>
     67e:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <myrobot+0x2>
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
     682:	10 93 e1 02 	sts	0x02E1, r17	; 0x8002e1 <myrobot+0x1>
     686:	00 93 e0 02 	sts	0x02E0, r16	; 0x8002e0 <myrobot>
                            break;
     68a:	a5 cf       	rjmp	.-182    	; 0x5d6 <__FUSE_REGION_LENGTH__+0x1d6>

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     68c:	f0 92 e3 02 	sts	0x02E3, r15	; 0x8002e3 <myrobot+0x3>
     690:	e0 92 e2 02 	sts	0x02E2, r14	; 0x8002e2 <myrobot+0x2>
     694:	f6 cf       	rjmp	.-20     	; 0x682 <__FUSE_REGION_LENGTH__+0x282>
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     696:	10 93 e3 02 	sts	0x02E3, r17	; 0x8002e3 <myrobot+0x3>
     69a:	00 93 e2 02 	sts	0x02E2, r16	; 0x8002e2 <myrobot+0x2>
                            myrobot.rspeed = - 65;
     69e:	8f eb       	ldi	r24, 0xBF	; 191
     6a0:	9f ef       	ldi	r25, 0xFF	; 255
     6a2:	95 cf       	rjmp	.-214    	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
                            break;

                    case 0: //myrobot.lspeed = - 50;
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
     6a4:	60 91 fd 02 	lds	r22, 0x02FD	; 0x8002fd <myrobot+0x1d>
     6a8:	70 91 fe 02 	lds	r23, 0x02FE	; 0x8002fe <myrobot+0x1e>
     6ac:	66 5f       	subi	r22, 0xF6	; 246
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	07 2e       	mov	r0, r23
     6b2:	00 0c       	add	r0, r0
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__floatsisf>
     6bc:	2a e9       	ldi	r18, 0x9A	; 154
     6be:	39 e9       	ldi	r19, 0x99	; 153
     6c0:	49 e1       	ldi	r20, 0x19	; 25
     6c2:	5f e3       	ldi	r21, 0x3F	; 63
     6c4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__mulsf3>
     6c8:	90 58       	subi	r25, 0x80	; 128
     6ca:	0e 94 39 0c 	call	0x1872	; 0x1872 <__fixsfsi>
     6ce:	70 93 e3 02 	sts	0x02E3, r23	; 0x8002e3 <myrobot+0x3>
     6d2:	60 93 e2 02 	sts	0x02E2, r22	; 0x8002e2 <myrobot+0x2>
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
     6d6:	60 91 fb 02 	lds	r22, 0x02FB	; 0x8002fb <myrobot+0x1b>
     6da:	70 91 fc 02 	lds	r23, 0x02FC	; 0x8002fc <myrobot+0x1c>
     6de:	07 2e       	mov	r0, r23
     6e0:	00 0c       	add	r0, r0
     6e2:	88 0b       	sbc	r24, r24
     6e4:	99 0b       	sbc	r25, r25
     6e6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__floatsisf>
     6ea:	2a e9       	ldi	r18, 0x9A	; 154
     6ec:	39 e9       	ldi	r19, 0x99	; 153
     6ee:	49 e1       	ldi	r20, 0x19	; 25
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__mulsf3>
     6f6:	90 58       	subi	r25, 0x80	; 128
     6f8:	0e 94 39 0c 	call	0x1872	; 0x1872 <__fixsfsi>
     6fc:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <myrobot+0x1>
     700:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <myrobot>
     704:	05 cf       	rjmp	.-502    	; 0x510 <__FUSE_REGION_LENGTH__+0x110>
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     706:	d0 93 e3 02 	sts	0x02E3, r29	; 0x8002e3 <myrobot+0x3>
     70a:	c0 93 e2 02 	sts	0x02E2, r28	; 0x8002e2 <myrobot+0x2>
                             myrobot.rspeed = -30;
     70e:	d0 93 e1 02 	sts	0x02E1, r29	; 0x8002e1 <myrobot+0x1>
     712:	c0 93 e0 02 	sts	0x02E0, r28	; 0x8002e0 <myrobot>
                             break;
     716:	5f cf       	rjmp	.-322    	; 0x5d6 <__FUSE_REGION_LENGTH__+0x1d6>

00000718 <ADC_init>:
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     71e:	86 e8       	ldi	r24, 0x86	; 134
     720:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     724:	08 95       	ret

00000726 <ADC_read>:
     726:	f8 94       	cli
     728:	80 64       	ori	r24, 0x40	; 64
     72a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     72e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     732:	80 64       	ori	r24, 0x40	; 64
     734:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     738:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     73c:	84 ff       	sbrs	r24, 4
     73e:	fc cf       	rjmp	.-8      	; 0x738 <ADC_read+0x12>
     740:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     744:	80 61       	ori	r24, 0x10	; 16
     746:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     74a:	78 94       	sei
     74c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     750:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     754:	93 70       	andi	r25, 0x03	; 3
     756:	08 95       	ret

00000758 <PWM8_write>:
     758:	81 11       	cpse	r24, r1
     75a:	05 c0       	rjmp	.+10     	; 0x766 <PWM8_write+0xe>
     75c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     760:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     764:	08 95       	ret
     766:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     76a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     76e:	08 95       	ret

00000770 <motor_init>:
     770:	8a b1       	in	r24, 0x0a	; 10
     772:	80 6f       	ori	r24, 0xF0	; 240
     774:	8a b9       	out	0x0a, r24	; 10
     776:	8b b1       	in	r24, 0x0b	; 11
     778:	8f 70       	andi	r24, 0x0F	; 15
     77a:	8b b9       	out	0x0b, r24	; 11
     77c:	81 ea       	ldi	r24, 0xA1	; 161
     77e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     788:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     78c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     790:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     794:	a8 e8       	ldi	r26, 0x88	; 136
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	1c 92       	st	X, r1
     79a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     79e:	ea e8       	ldi	r30, 0x8A	; 138
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	10 82       	st	Z, r1
     7a4:	84 b1       	in	r24, 0x04	; 4
     7a6:	86 60       	ori	r24, 0x06	; 6
     7a8:	84 b9       	out	0x04, r24	; 4
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	1c 92       	st	X, r1
     7ae:	1e 92       	st	-X, r1
     7b0:	11 82       	std	Z+1, r1	; 0x01
     7b2:	10 82       	st	Z, r1
     7b4:	08 95       	ret

000007b6 <motor_set_speed>:
     7b6:	77 ff       	sbrs	r23, 7
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <motor_set_speed+0x8>
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	65 36       	cpi	r22, 0x65	; 101
     7c0:	71 05       	cpc	r23, r1
     7c2:	14 f0       	brlt	.+4      	; 0x7c8 <motor_set_speed+0x12>
     7c4:	64 e6       	ldi	r22, 0x64	; 100
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	9b 01       	movw	r18, r22
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	75 95       	asr	r23
     7d0:	67 95       	ror	r22
     7d2:	62 0f       	add	r22, r18
     7d4:	73 1f       	adc	r23, r19
     7d6:	81 11       	cpse	r24, r1
     7d8:	09 c0       	rjmp	.+18     	; 0x7ec <motor_set_speed+0x36>
     7da:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     7de:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     7e2:	70 93 8a 04 	sts	0x048A, r23	; 0x80048a <rightWst+0x1>
     7e6:	60 93 89 04 	sts	0x0489, r22	; 0x800489 <rightWst>
     7ea:	08 95       	ret
     7ec:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     7f0:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     7f4:	70 93 8e 04 	sts	0x048E, r23	; 0x80048e <leftWst+0x1>
     7f8:	60 93 8d 04 	sts	0x048D, r22	; 0x80048d <leftWst>
     7fc:	08 95       	ret

000007fe <motor_set_dir>:
     7fe:	cf 93       	push	r28
     800:	c6 2f       	mov	r28, r22
     802:	26 2f       	mov	r18, r22
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	81 11       	cpse	r24, r1
     808:	2b c0       	rjmp	.+86     	; 0x860 <motor_set_dir+0x62>
     80a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <rightWst+0x2>
     80e:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <rightWst+0x3>
     812:	82 17       	cp	r24, r18
     814:	93 07       	cpc	r25, r19
     816:	59 f0       	breq	.+22     	; 0x82e <motor_set_dir+0x30>
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <motor_set_speed>
     822:	8f e9       	ldi	r24, 0x9F	; 159
     824:	9f e0       	ldi	r25, 0x0F	; 15
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <motor_set_dir+0x28>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <motor_set_dir+0x2e>
     82c:	00 00       	nop
     82e:	c1 11       	cpse	r28, r1
     830:	0e c0       	rjmp	.+28     	; 0x84e <motor_set_dir+0x50>
     832:	5e 98       	cbi	0x0b, 6	; 11
     834:	5f 9a       	sbi	0x0b, 7	; 11
     836:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <rightWst+0x3>
     83a:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <rightWst+0x2>
     83e:	8f e3       	ldi	r24, 0x3F	; 63
     840:	9c e9       	ldi	r25, 0x9C	; 156
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <motor_set_dir+0x44>
     846:	00 c0       	rjmp	.+0      	; 0x848 <motor_set_dir+0x4a>
     848:	00 00       	nop
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret
     84e:	5e 9a       	sbi	0x0b, 6	; 11
     850:	5f 98       	cbi	0x0b, 7	; 11
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <rightWst+0x3>
     85a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <rightWst+0x2>
     85e:	ef cf       	rjmp	.-34     	; 0x83e <motor_set_dir+0x40>
     860:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <leftWst+0x2>
     864:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <leftWst+0x3>
     868:	82 17       	cp	r24, r18
     86a:	93 07       	cpc	r25, r19
     86c:	59 f0       	breq	.+22     	; 0x884 <motor_set_dir+0x86>
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 db 03 	call	0x7b6	; 0x7b6 <motor_set_speed>
     878:	8f e9       	ldi	r24, 0x9F	; 159
     87a:	9f e0       	ldi	r25, 0x0F	; 15
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <motor_set_dir+0x7e>
     880:	00 c0       	rjmp	.+0      	; 0x882 <motor_set_dir+0x84>
     882:	00 00       	nop
     884:	c1 11       	cpse	r28, r1
     886:	07 c0       	rjmp	.+14     	; 0x896 <motor_set_dir+0x98>
     888:	5c 9a       	sbi	0x0b, 4	; 11
     88a:	5d 98       	cbi	0x0b, 5	; 11
     88c:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <leftWst+0x3>
     890:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <leftWst+0x2>
     894:	d4 cf       	rjmp	.-88     	; 0x83e <motor_set_dir+0x40>
     896:	5c 98       	cbi	0x0b, 4	; 11
     898:	5d 9a       	sbi	0x0b, 5	; 11
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <leftWst+0x3>
     8a2:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <leftWst+0x2>
     8a6:	cb cf       	rjmp	.-106    	; 0x83e <motor_set_dir+0x40>

000008a8 <robo_motorSpeed>:
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
     8b2:	8b 01       	movw	r16, r22
     8b4:	97 ff       	sbrs	r25, 7
     8b6:	1c c0       	rjmp	.+56     	; 0x8f0 <robo_motorSpeed+0x48>
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 ff 03 	call	0x7fe	; 0x7fe <motor_set_dir>
     8c0:	d1 95       	neg	r29
     8c2:	c1 95       	neg	r28
     8c4:	d1 09       	sbc	r29, r1
     8c6:	17 ff       	sbrs	r17, 7
     8c8:	18 c0       	rjmp	.+48     	; 0x8fa <robo_motorSpeed+0x52>
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 ff 03 	call	0x7fe	; 0x7fe <motor_set_dir>
     8d2:	11 95       	neg	r17
     8d4:	01 95       	neg	r16
     8d6:	11 09       	sbc	r17, r1
     8d8:	b8 01       	movw	r22, r16
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <motor_set_speed>
     8e0:	be 01       	movw	r22, r28
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <motor_set_speed>
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <motor_set_dir>
     8f8:	e6 cf       	rjmp	.-52     	; 0x8c6 <robo_motorSpeed+0x1e>
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 ff 03 	call	0x7fe	; 0x7fe <motor_set_dir>
     902:	ea cf       	rjmp	.-44     	; 0x8d8 <robo_motorSpeed+0x30>

00000904 <USART0_init>:
     904:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     908:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     90c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     910:	88 e1       	ldi	r24, 0x18	; 24
     912:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     91c:	08 95       	ret

0000091e <cputchar>:
     91e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     922:	95 ff       	sbrs	r25, 5
     924:	fc cf       	rjmp	.-8      	; 0x91e <cputchar>
     926:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     92a:	08 95       	ret

0000092c <cgetchar>:
     92c:	cf 93       	push	r28
     92e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     932:	87 ff       	sbrs	r24, 7
     934:	fc cf       	rjmp	.-8      	; 0x92e <cgetchar+0x2>
     936:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     93a:	8c 2f       	mov	r24, r28
     93c:	0e 94 8f 04 	call	0x91e	; 0x91e <cputchar>
     940:	8c 2f       	mov	r24, r28
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <cputs>:
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	89 91       	ld	r24, Y+
     94e:	81 11       	cpse	r24, r1
     950:	03 c0       	rjmp	.+6      	; 0x958 <cputs+0x12>
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret
     958:	0e 94 8f 04 	call	0x91e	; 0x91e <cputchar>
     95c:	f7 cf       	rjmp	.-18     	; 0x94c <cputs+0x6>

0000095e <robo_proxSensor>:
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 93 03 	call	0x726	; 0x726 <ADC_read>
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	84 36       	cpi	r24, 0x64	; 100
     96a:	91 05       	cpc	r25, r1
     96c:	10 f0       	brcs	.+4      	; 0x972 <robo_proxSensor+0x14>
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	c9 01       	movw	r24, r18
     974:	08 95       	ret

00000976 <robo_lightSensor>:
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	0e 94 93 03 	call	0x726	; 0x726 <ADC_read>
     97c:	2b ef       	ldi	r18, 0xFB	; 251
     97e:	ac 01       	movw	r20, r24
     980:	24 03       	mulsu	r18, r20
     982:	c0 01       	movw	r24, r0
     984:	25 9f       	mul	r18, r21
     986:	90 0d       	add	r25, r0
     988:	11 24       	eor	r1, r1
     98a:	85 50       	subi	r24, 0x05	; 5
     98c:	9c 4e       	sbci	r25, 0xEC	; 236
     98e:	63 e3       	ldi	r22, 0x33	; 51
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__divmodhi4>
     996:	cb 01       	movw	r24, r22
     998:	65 36       	cpi	r22, 0x65	; 101
     99a:	71 05       	cpc	r23, r1
     99c:	14 f0       	brlt	.+4      	; 0x9a2 <robo_lightSensor+0x2c>
     99e:	84 e6       	ldi	r24, 0x64	; 100
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	08 95       	ret

000009a4 <robo_lineSensor>:
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	c0 e0       	ldi	r28, 0x00	; 0
     9aa:	d1 e0       	ldi	r29, 0x01	; 1
     9ac:	cc 0f       	add	r28, r28
     9ae:	8d 2f       	mov	r24, r29
     9b0:	0e 94 93 03 	call	0x726	; 0x726 <ADC_read>
     9b4:	8c 32       	cpi	r24, 0x2C	; 44
     9b6:	91 40       	sbci	r25, 0x01	; 1
     9b8:	0c f4       	brge	.+2      	; 0x9bc <robo_lineSensor+0x18>
     9ba:	c1 60       	ori	r28, 0x01	; 1
     9bc:	df 5f       	subi	r29, 0xFF	; 255
     9be:	d4 30       	cpi	r29, 0x04	; 4
     9c0:	a9 f7       	brne	.-22     	; 0x9ac <robo_lineSensor+0x8>
     9c2:	8c 2f       	mov	r24, r28
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <robo_bumpSensorR>:
     9cc:	83 b1       	in	r24, 0x03	; 3
     9ce:	82 95       	swap	r24
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	89 27       	eor	r24, r25
     9d6:	81 70       	andi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	08 95       	ret

000009dc <robo_bumpSensorL>:
     9dc:	83 b1       	in	r24, 0x03	; 3
     9de:	86 95       	lsr	r24
     9e0:	86 95       	lsr	r24
     9e2:	86 95       	lsr	r24
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	89 27       	eor	r24, r25
     9e8:	81 70       	andi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	08 95       	ret

000009ee <robo_Honk>:
     9ee:	5b 9a       	sbi	0x0b, 3	; 11
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	85 ea       	ldi	r24, 0xA5	; 165
     9f4:	9e e0       	ldi	r25, 0x0E	; 14
     9f6:	21 50       	subi	r18, 0x01	; 1
     9f8:	80 40       	sbci	r24, 0x00	; 0
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <robo_Honk+0x8>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <robo_Honk+0x12>
     a00:	00 00       	nop
     a02:	5b 98       	cbi	0x0b, 3	; 11
     a04:	2f ef       	ldi	r18, 0xFF	; 255
     a06:	85 ea       	ldi	r24, 0xA5	; 165
     a08:	9e e0       	ldi	r25, 0x0E	; 14
     a0a:	21 50       	subi	r18, 0x01	; 1
     a0c:	80 40       	sbci	r24, 0x00	; 0
     a0e:	90 40       	sbci	r25, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <robo_Honk+0x1c>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <robo_Honk+0x26>
     a14:	00 00       	nop
     a16:	08 95       	ret

00000a18 <robo_checkBattery>:
     a18:	85 e0       	ldi	r24, 0x05	; 5
     a1a:	0e 94 93 03 	call	0x726	; 0x726 <ADC_read>
     a1e:	84 3f       	cpi	r24, 0xF4	; 244
     a20:	91 40       	sbci	r25, 0x01	; 1
     a22:	10 f4       	brcc	.+4      	; 0xa28 <robo_checkBattery+0x10>
     a24:	28 9a       	sbi	0x05, 0	; 5
     a26:	08 95       	ret
     a28:	28 98       	cbi	0x05, 0	; 5
     a2a:	08 95       	ret

00000a2c <robo_goPressed>:
     a2c:	89 b1       	in	r24, 0x09	; 9
     a2e:	82 fb       	bst	r24, 2
     a30:	88 27       	eor	r24, r24
     a32:	80 f9       	bld	r24, 0
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	89 27       	eor	r24, r25
     a38:	08 95       	ret

00000a3a <robo_wait4goPress>:
     a3a:	0e 94 16 05 	call	0xa2c	; 0xa2c <robo_goPressed>
     a3e:	88 23       	and	r24, r24
     a40:	e1 f3       	breq	.-8      	; 0xa3a <robo_wait4goPress>
     a42:	08 95       	ret

00000a44 <OS_ticks_init>:
     a44:	f8 94       	cli
     a46:	85 e0       	ldi	r24, 0x05	; 5
     a48:	85 bd       	out	0x25, r24	; 37
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     a50:	84 e6       	ldi	r24, 0x64	; 100
     a52:	86 bd       	out	0x26, r24	; 38
     a54:	78 94       	sei
     a56:	08 95       	ret

00000a58 <HAL_init>:
     a58:	87 e6       	ldi	r24, 0x67	; 103
     a5a:	0e 94 82 04 	call	0x904	; 0x904 <USART0_init>
     a5e:	0c 94 8c 03 	jmp	0x718	; 0x718 <ADC_init>

00000a62 <robo_Setup>:
     a62:	0e 94 2c 05 	call	0xa58	; 0xa58 <HAL_init>
     a66:	0e 94 b8 03 	call	0x770	; 0x770 <motor_init>
     a6a:	53 9a       	sbi	0x0a, 3	; 10
     a6c:	5b 98       	cbi	0x0b, 3	; 11
     a6e:	20 9a       	sbi	0x04, 0	; 4
     a70:	52 98       	cbi	0x0a, 2	; 10
     a72:	5a 9a       	sbi	0x0b, 2	; 11
     a74:	24 98       	cbi	0x04, 4	; 4
     a76:	23 98       	cbi	0x04, 3	; 4
     a78:	85 b1       	in	r24, 0x05	; 5
     a7a:	88 61       	ori	r24, 0x18	; 24
     a7c:	85 b9       	out	0x05, r24	; 5
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 ff 03 	call	0x7fe	; 0x7fe <motor_set_dir>
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <motor_set_dir>
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <robo_motorSpeed>

00000a9a <cprintf>:
     a9a:	4f 92       	push	r4
     a9c:	5f 92       	push	r5
     a9e:	6f 92       	push	r6
     aa0:	7f 92       	push	r7
     aa2:	8f 92       	push	r8
     aa4:	9f 92       	push	r9
     aa6:	af 92       	push	r10
     aa8:	bf 92       	push	r11
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	de 01       	movw	r26, r28
     ac0:	53 96       	adiw	r26, 0x13	; 19
     ac2:	ed 91       	ld	r30, X+
     ac4:	fd 91       	ld	r31, X+
     ac6:	8d 01       	movw	r16, r26
     ac8:	5a e0       	ldi	r21, 0x0A	; 10
     aca:	65 2e       	mov	r6, r21
     acc:	71 2c       	mov	r7, r1
     ace:	80 81       	ld	r24, Z
     ad0:	85 32       	cpi	r24, 0x25	; 37
     ad2:	81 f4       	brne	.+32     	; 0xaf4 <cprintf+0x5a>
     ad4:	5f 01       	movw	r10, r30
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	a8 0e       	add	r10, r24
     ada:	b1 1c       	adc	r11, r1
     adc:	81 81       	ldd	r24, Z+1	; 0x01
     ade:	84 36       	cpi	r24, 0x64	; 100
     ae0:	09 f4       	brne	.+2      	; 0xae4 <cprintf+0x4a>
     ae2:	50 c0       	rjmp	.+160    	; 0xb84 <cprintf+0xea>
     ae4:	90 f4       	brcc	.+36     	; 0xb0a <cprintf+0x70>
     ae6:	83 36       	cpi	r24, 0x63	; 99
     ae8:	61 f4       	brne	.+24     	; 0xb02 <cprintf+0x68>
     aea:	f8 01       	movw	r30, r16
     aec:	80 81       	ld	r24, Z
     aee:	0e 5f       	subi	r16, 0xFE	; 254
     af0:	1f 4f       	sbci	r17, 0xFF	; 255
     af2:	07 c0       	rjmp	.+14     	; 0xb02 <cprintf+0x68>
     af4:	88 23       	and	r24, r24
     af6:	09 f4       	brne	.+2      	; 0xafa <cprintf+0x60>
     af8:	5d c0       	rjmp	.+186    	; 0xbb4 <cprintf+0x11a>
     afa:	5f 01       	movw	r10, r30
     afc:	9f ef       	ldi	r25, 0xFF	; 255
     afe:	a9 1a       	sub	r10, r25
     b00:	b9 0a       	sbc	r11, r25
     b02:	0e 94 8f 04 	call	0x91e	; 0x91e <cputchar>
     b06:	f5 01       	movw	r30, r10
     b08:	e2 cf       	rjmp	.-60     	; 0xace <cprintf+0x34>
     b0a:	83 37       	cpi	r24, 0x73	; 115
     b0c:	71 f1       	breq	.+92     	; 0xb6a <cprintf+0xd0>
     b0e:	30 e1       	ldi	r19, 0x10	; 16
     b10:	83 2e       	mov	r8, r19
     b12:	91 2c       	mov	r9, r1
     b14:	e1 2c       	mov	r14, r1
     b16:	40 e1       	ldi	r20, 0x10	; 16
     b18:	f4 2e       	mov	r15, r20
     b1a:	88 37       	cpi	r24, 0x78	; 120
     b1c:	91 f7       	brne	.-28     	; 0xb02 <cprintf+0x68>
     b1e:	f8 01       	movw	r30, r16
     b20:	c0 80       	ld	r12, Z
     b22:	d1 80       	ldd	r13, Z+1	; 0x01
     b24:	0e 5f       	subi	r16, 0xFE	; 254
     b26:	1f 4f       	sbci	r17, 0xFF	; 255
     b28:	84 36       	cpi	r24, 0x64	; 100
     b2a:	59 f4       	brne	.+22     	; 0xb42 <cprintf+0xa8>
     b2c:	d7 fe       	sbrs	r13, 7
     b2e:	06 c0       	rjmp	.+12     	; 0xb3c <cprintf+0xa2>
     b30:	d1 94       	neg	r13
     b32:	c1 94       	neg	r12
     b34:	d1 08       	sbc	r13, r1
     b36:	8d e2       	ldi	r24, 0x2D	; 45
     b38:	0e 94 8f 04 	call	0x91e	; 0x91e <cputchar>
     b3c:	ce 14       	cp	r12, r14
     b3e:	df 04       	cpc	r13, r15
     b40:	48 f1       	brcs	.+82     	; 0xb94 <cprintf+0xfa>
     b42:	c6 01       	movw	r24, r12
     b44:	b7 01       	movw	r22, r14
     b46:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__udivmodhi4>
     b4a:	2c 01       	movw	r4, r24
     b4c:	68 5f       	subi	r22, 0xF8	; 248
     b4e:	7d 4f       	sbci	r23, 0xFD	; 253
     b50:	fb 01       	movw	r30, r22
     b52:	80 81       	ld	r24, Z
     b54:	0e 94 8f 04 	call	0x91e	; 0x91e <cputchar>
     b58:	62 01       	movw	r12, r4
     b5a:	c7 01       	movw	r24, r14
     b5c:	b4 01       	movw	r22, r8
     b5e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__udivmodhi4>
     b62:	7b 01       	movw	r14, r22
     b64:	67 2b       	or	r22, r23
     b66:	69 f7       	brne	.-38     	; 0xb42 <cprintf+0xa8>
     b68:	ce cf       	rjmp	.-100    	; 0xb06 <cprintf+0x6c>
     b6a:	f8 01       	movw	r30, r16
     b6c:	e0 80       	ld	r14, Z
     b6e:	f1 80       	ldd	r15, Z+1	; 0x01
     b70:	0e 5f       	subi	r16, 0xFE	; 254
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	f7 01       	movw	r30, r14
     b76:	81 91       	ld	r24, Z+
     b78:	7f 01       	movw	r14, r30
     b7a:	88 23       	and	r24, r24
     b7c:	21 f2       	breq	.-120    	; 0xb06 <cprintf+0x6c>
     b7e:	0e 94 8f 04 	call	0x91e	; 0x91e <cputchar>
     b82:	f8 cf       	rjmp	.-16     	; 0xb74 <cprintf+0xda>
     b84:	9a e0       	ldi	r25, 0x0A	; 10
     b86:	89 2e       	mov	r8, r25
     b88:	91 2c       	mov	r9, r1
     b8a:	20 e1       	ldi	r18, 0x10	; 16
     b8c:	e2 2e       	mov	r14, r18
     b8e:	27 e2       	ldi	r18, 0x27	; 39
     b90:	f2 2e       	mov	r15, r18
     b92:	c5 cf       	rjmp	.-118    	; 0xb1e <cprintf+0x84>
     b94:	c7 01       	movw	r24, r14
     b96:	b3 01       	movw	r22, r6
     b98:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__udivmodhi4>
     b9c:	7b 01       	movw	r14, r22
     b9e:	62 30       	cpi	r22, 0x02	; 2
     ba0:	71 05       	cpc	r23, r1
     ba2:	60 f6       	brcc	.-104    	; 0xb3c <cprintf+0xa2>
     ba4:	c6 01       	movw	r24, r12
     ba6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__udivmodhi4>
     baa:	fb 01       	movw	r30, r22
     bac:	e8 5f       	subi	r30, 0xF8	; 248
     bae:	fd 4f       	sbci	r31, 0xFD	; 253
     bb0:	80 81       	ld	r24, Z
     bb2:	a7 cf       	rjmp	.-178    	; 0xb02 <cprintf+0x68>
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	9f 90       	pop	r9
     bce:	8f 90       	pop	r8
     bd0:	7f 90       	pop	r7
     bd2:	6f 90       	pop	r6
     bd4:	5f 90       	pop	r5
     bd6:	4f 90       	pop	r4
     bd8:	08 95       	ret

00000bda <OSStartHighRdy>:
     bda:	00 91 92 04 	lds	r16, 0x0492	; 0x800492 <OSRunning>
     bde:	03 95       	inc	r16
     be0:	00 93 92 04 	sts	0x0492, r16	; 0x800492 <OSRunning>
     be4:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <OSTCBHighRdy>
     be8:	f0 91 a3 04 	lds	r31, 0x04A3	; 0x8004a3 <OSTCBHighRdy+0x1>
     bec:	c1 91       	ld	r28, Z+
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	d1 91       	ld	r29, Z+
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f 91       	pop	r16
     bf6:	0f bf       	out	0x3f, r16	; 63
     bf8:	ff 91       	pop	r31
     bfa:	ef 91       	pop	r30
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	bf 91       	pop	r27
     c02:	af 91       	pop	r26
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	7f 91       	pop	r23
     c0a:	6f 91       	pop	r22
     c0c:	5f 91       	pop	r21
     c0e:	4f 91       	pop	r20
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	5f 90       	pop	r5
     c2e:	4f 90       	pop	r4
     c30:	3f 90       	pop	r3
     c32:	2f 90       	pop	r2
     c34:	1f 90       	pop	r1
     c36:	0f 90       	pop	r0
     c38:	08 95       	ret

00000c3a <OSCtxSw>:
     c3a:	0f 92       	push	r0
     c3c:	1f 92       	push	r1
     c3e:	2f 92       	push	r2
     c40:	3f 92       	push	r3
     c42:	4f 92       	push	r4
     c44:	5f 92       	push	r5
     c46:	6f 92       	push	r6
     c48:	7f 92       	push	r7
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
     c7a:	0f b7       	in	r16, 0x3f	; 63
     c7c:	0f 93       	push	r16
     c7e:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <OSTCBCur>
     c82:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <OSTCBCur+0x1>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	c1 93       	st	Z+, r28
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	d1 93       	st	Z+, r29
     c8e:	00 91 97 04 	lds	r16, 0x0497	; 0x800497 <OSPrioHighRdy>
     c92:	00 93 98 04 	sts	0x0498, r16	; 0x800498 <OSPrioCur>
     c96:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <OSTCBHighRdy>
     c9a:	f0 91 a3 04 	lds	r31, 0x04A3	; 0x8004a3 <OSTCBHighRdy+0x1>
     c9e:	e0 93 aa 04 	sts	0x04AA, r30	; 0x8004aa <OSTCBCur>
     ca2:	f0 93 ab 04 	sts	0x04AB, r31	; 0x8004ab <OSTCBCur+0x1>
     ca6:	c1 91       	ld	r28, Z+
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	d1 91       	ld	r29, Z+
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f 91       	pop	r16
     cb0:	0f bf       	out	0x3f, r16	; 63
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	9f 90       	pop	r9
     ce0:	8f 90       	pop	r8
     ce2:	7f 90       	pop	r7
     ce4:	6f 90       	pop	r6
     ce6:	5f 90       	pop	r5
     ce8:	4f 90       	pop	r4
     cea:	3f 90       	pop	r3
     cec:	2f 90       	pop	r2
     cee:	1f 90       	pop	r1
     cf0:	0f 90       	pop	r0
     cf2:	08 95       	ret

00000cf4 <OSIntCtxSw>:
     cf4:	00 91 97 04 	lds	r16, 0x0497	; 0x800497 <OSPrioHighRdy>
     cf8:	00 93 98 04 	sts	0x0498, r16	; 0x800498 <OSPrioCur>
     cfc:	e0 91 a2 04 	lds	r30, 0x04A2	; 0x8004a2 <OSTCBHighRdy>
     d00:	f0 91 a3 04 	lds	r31, 0x04A3	; 0x8004a3 <OSTCBHighRdy+0x1>
     d04:	e0 93 aa 04 	sts	0x04AA, r30	; 0x8004aa <OSTCBCur>
     d08:	f0 93 ab 04 	sts	0x04AB, r31	; 0x8004ab <OSTCBCur+0x1>
     d0c:	c1 91       	ld	r28, Z+
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	d1 91       	ld	r29, Z+
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f 91       	pop	r16
     d16:	0f bf       	out	0x3f, r16	; 63
     d18:	ff 91       	pop	r31
     d1a:	ef 91       	pop	r30
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	bf 91       	pop	r27
     d22:	af 91       	pop	r26
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	7f 91       	pop	r23
     d2a:	6f 91       	pop	r22
     d2c:	5f 91       	pop	r21
     d2e:	4f 91       	pop	r20
     d30:	3f 91       	pop	r19
     d32:	2f 91       	pop	r18
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	bf 90       	pop	r11
     d42:	af 90       	pop	r10
     d44:	9f 90       	pop	r9
     d46:	8f 90       	pop	r8
     d48:	7f 90       	pop	r7
     d4a:	6f 90       	pop	r6
     d4c:	5f 90       	pop	r5
     d4e:	4f 90       	pop	r4
     d50:	3f 90       	pop	r3
     d52:	2f 90       	pop	r2
     d54:	1f 90       	pop	r1
     d56:	0f 90       	pop	r0
     d58:	08 95       	ret

00000d5a <OSTickISR>:
     d5a:	0f 92       	push	r0
     d5c:	1f 92       	push	r1
     d5e:	2f 92       	push	r2
     d60:	3f 92       	push	r3
     d62:	4f 92       	push	r4
     d64:	5f 92       	push	r5
     d66:	6f 92       	push	r6
     d68:	7f 92       	push	r7
     d6a:	8f 92       	push	r8
     d6c:	9f 92       	push	r9
     d6e:	af 92       	push	r10
     d70:	bf 92       	push	r11
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	0f b7       	in	r16, 0x3f	; 63
     d9c:	00 68       	ori	r16, 0x80	; 128
     d9e:	0f 93       	push	r16
     da0:	00 91 a9 04 	lds	r16, 0x04A9	; 0x8004a9 <OSIntNesting>
     da4:	03 95       	inc	r16
     da6:	00 93 a9 04 	sts	0x04A9, r16	; 0x8004a9 <OSIntNesting>
     daa:	01 30       	cpi	r16, 0x01	; 1
     dac:	41 f4       	brne	.+16     	; 0xdbe <_not_first_int>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <OSTCBCur>
     db6:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <OSTCBCur+0x1>
     dba:	c1 93       	st	Z+, r28
     dbc:	d1 93       	st	Z+, r29

00000dbe <_not_first_int>:
     dbe:	04 e6       	ldi	r16, 0x64	; 100
     dc0:	06 bd       	out	0x26, r16	; 38
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	1f 2e       	mov	r1, r31
     dc6:	78 94       	sei
     dc8:	0e 94 10 08 	call	0x1020	; 0x1020 <OSTimeTick>
     dcc:	00 00       	nop
     dce:	0e 94 83 07 	call	0xf06	; 0xf06 <OSIntExit>
     dd2:	0f 91       	pop	r16
     dd4:	0f bf       	out	0x3f, r16	; 63
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	4f 90       	pop	r4
     e0e:	3f 90       	pop	r3
     e10:	2f 90       	pop	r2
     e12:	1f 90       	pop	r1
     e14:	0f 90       	pop	r0
     e16:	08 95       	ret

00000e18 <OSTaskStkInit>:
     e18:	fa 01       	movw	r30, r20
     e1a:	80 83       	st	Z, r24
     e1c:	31 97       	sbiw	r30, 0x01	; 1
     e1e:	90 83       	st	Z, r25
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	10 82       	st	Z, r1
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	10 82       	st	Z, r1
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	10 82       	st	Z, r1
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	10 82       	st	Z, r1
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	10 82       	st	Z, r1
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	10 82       	st	Z, r1
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	10 82       	st	Z, r1
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	10 82       	st	Z, r1
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	10 82       	st	Z, r1
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	10 82       	st	Z, r1
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	10 82       	st	Z, r1
     e4c:	31 97       	sbiw	r30, 0x01	; 1
     e4e:	10 82       	st	Z, r1
     e50:	31 97       	sbiw	r30, 0x01	; 1
     e52:	10 82       	st	Z, r1
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	10 82       	st	Z, r1
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	10 82       	st	Z, r1
     e5c:	31 97       	sbiw	r30, 0x01	; 1
     e5e:	10 82       	st	Z, r1
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	10 82       	st	Z, r1
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	10 82       	st	Z, r1
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	10 82       	st	Z, r1
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	10 82       	st	Z, r1
     e70:	31 97       	sbiw	r30, 0x01	; 1
     e72:	10 82       	st	Z, r1
     e74:	31 97       	sbiw	r30, 0x01	; 1
     e76:	10 82       	st	Z, r1
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	10 82       	st	Z, r1
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	10 82       	st	Z, r1
     e80:	31 97       	sbiw	r30, 0x01	; 1
     e82:	60 83       	st	Z, r22
     e84:	31 97       	sbiw	r30, 0x01	; 1
     e86:	70 83       	st	Z, r23
     e88:	31 97       	sbiw	r30, 0x01	; 1
     e8a:	10 82       	st	Z, r1
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	10 82       	st	Z, r1
     e90:	31 97       	sbiw	r30, 0x01	; 1
     e92:	10 82       	st	Z, r1
     e94:	31 97       	sbiw	r30, 0x01	; 1
     e96:	10 82       	st	Z, r1
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	10 82       	st	Z, r1
     e9c:	31 97       	sbiw	r30, 0x01	; 1
     e9e:	10 82       	st	Z, r1
     ea0:	31 97       	sbiw	r30, 0x01	; 1
     ea2:	80 e8       	ldi	r24, 0x80	; 128
     ea4:	80 83       	st	Z, r24
     ea6:	ca 01       	movw	r24, r20
     ea8:	83 97       	sbiw	r24, 0x23	; 35
     eaa:	08 95       	ret

00000eac <OSTaskCreateHook>:
     eac:	08 95       	ret

00000eae <OSTaskDelHook>:
     eae:	08 95       	ret

00000eb0 <OSTaskSwHook>:
     eb0:	08 95       	ret

00000eb2 <OSTaskStatHook>:
     eb2:	08 95       	ret

00000eb4 <OSTimeTickHook>:
     eb4:	08 95       	ret

00000eb6 <OSInitHookBegin>:
     eb6:	08 95       	ret

00000eb8 <OSInitHookEnd>:
     eb8:	08 95       	ret

00000eba <OSTaskIdleHook>:
     eba:	08 95       	ret

00000ebc <OSTCBInitHook>:
     ebc:	08 95       	ret

00000ebe <OS_TaskIdle>:
     ebe:	f8 94       	cli
     ec0:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <OSIdleCtr>
     ec4:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <OSIdleCtr+0x1>
     ec8:	a0 91 95 04 	lds	r26, 0x0495	; 0x800495 <OSIdleCtr+0x2>
     ecc:	b0 91 96 04 	lds	r27, 0x0496	; 0x800496 <OSIdleCtr+0x3>
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	a1 1d       	adc	r26, r1
     ed4:	b1 1d       	adc	r27, r1
     ed6:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <OSIdleCtr>
     eda:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <OSIdleCtr+0x1>
     ede:	a0 93 95 04 	sts	0x0495, r26	; 0x800495 <OSIdleCtr+0x2>
     ee2:	b0 93 96 04 	sts	0x0496, r27	; 0x800496 <OSIdleCtr+0x3>
     ee6:	78 94       	sei
     ee8:	0e 94 5d 07 	call	0xeba	; 0xeba <OSTaskIdleHook>
     eec:	e8 cf       	rjmp	.-48     	; 0xebe <OS_TaskIdle>

00000eee <OSIntEnter>:
     eee:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <OSRunning>
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	39 f4       	brne	.+14     	; 0xf04 <OSIntEnter+0x16>
     ef6:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <OSIntNesting>
     efa:	8f 3f       	cpi	r24, 0xFF	; 255
     efc:	19 f0       	breq	.+6      	; 0xf04 <OSIntEnter+0x16>
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <OSIntNesting>
     f04:	08 95       	ret

00000f06 <OSIntExit>:
     f06:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <OSRunning>
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <OSIntExit+0xa>
     f0e:	4c c0       	rjmp	.+152    	; 0xfa8 <OSIntExit+0xa2>
     f10:	f8 94       	cli
     f12:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <OSIntNesting>
     f16:	88 23       	and	r24, r24
     f18:	19 f0       	breq	.+6      	; 0xf20 <OSIntExit+0x1a>
     f1a:	81 50       	subi	r24, 0x01	; 1
     f1c:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <OSIntNesting>
     f20:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <OSIntNesting>
     f24:	81 11       	cpse	r24, r1
     f26:	3f c0       	rjmp	.+126    	; 0xfa6 <OSIntExit+0xa0>
     f28:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <OSLockNesting>
     f2c:	81 11       	cpse	r24, r1
     f2e:	3b c0       	rjmp	.+118    	; 0xfa6 <OSIntExit+0xa0>
     f30:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <OSRdyGrp>
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	e0 50       	subi	r30, 0x00	; 0
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	e0 81       	ld	r30, Z
     f3c:	e0 93 a8 04 	sts	0x04A8, r30	; 0x8004a8 <OSIntExitY>
     f40:	ae 2f       	mov	r26, r30
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ab 55       	subi	r26, 0x5B	; 91
     f46:	bb 4f       	sbci	r27, 0xFB	; 251
     f48:	ac 91       	ld	r26, X
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	a0 50       	subi	r26, 0x00	; 0
     f4e:	bf 4f       	sbci	r27, 0xFF	; 255
     f50:	ee 0f       	add	r30, r30
     f52:	ee 0f       	add	r30, r30
     f54:	ee 0f       	add	r30, r30
     f56:	8c 91       	ld	r24, X
     f58:	e8 0f       	add	r30, r24
     f5a:	e0 93 97 04 	sts	0x0497, r30	; 0x800497 <OSPrioHighRdy>
     f5e:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <OSPrioCur>
     f62:	e8 17       	cp	r30, r24
     f64:	01 f1       	breq	.+64     	; 0xfa6 <OSIntExit+0xa0>
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	e5 51       	subi	r30, 0x15	; 21
     f6e:	fa 4f       	sbci	r31, 0xFA	; 250
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <OSTCBHighRdy+0x1>
     f78:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <OSTCBHighRdy>
     f7c:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSCtxSwCtr>
     f80:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <OSCtxSwCtr+0x1>
     f84:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <OSCtxSwCtr+0x2>
     f88:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <OSCtxSwCtr+0x3>
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	a1 1d       	adc	r26, r1
     f90:	b1 1d       	adc	r27, r1
     f92:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <OSCtxSwCtr>
     f96:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <OSCtxSwCtr+0x1>
     f9a:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <OSCtxSwCtr+0x2>
     f9e:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <OSCtxSwCtr+0x3>
     fa2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <OSIntCtxSw>
     fa6:	78 94       	sei
     fa8:	08 95       	ret

00000faa <OSSchedLock>:
     faa:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <OSRunning>
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	49 f4       	brne	.+18     	; 0xfc4 <OSSchedLock+0x1a>
     fb2:	f8 94       	cli
     fb4:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <OSLockNesting>
     fb8:	8f 3f       	cpi	r24, 0xFF	; 255
     fba:	19 f0       	breq	.+6      	; 0xfc2 <OSSchedLock+0x18>
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <OSLockNesting>
     fc2:	78 94       	sei
     fc4:	08 95       	ret

00000fc6 <OSStart>:
     fc6:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <OSRunning>
     fca:	81 11       	cpse	r24, r1
     fcc:	28 c0       	rjmp	.+80     	; 0x101e <OSStart+0x58>
     fce:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <OSRdyGrp>
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	e0 50       	subi	r30, 0x00	; 0
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	e0 81       	ld	r30, Z
     fda:	ae 2f       	mov	r26, r30
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ab 55       	subi	r26, 0x5B	; 91
     fe0:	bb 4f       	sbci	r27, 0xFB	; 251
     fe2:	ac 91       	ld	r26, X
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	a0 50       	subi	r26, 0x00	; 0
     fe8:	bf 4f       	sbci	r27, 0xFF	; 255
     fea:	ee 0f       	add	r30, r30
     fec:	ee 0f       	add	r30, r30
     fee:	ee 0f       	add	r30, r30
     ff0:	8c 91       	ld	r24, X
     ff2:	e8 0f       	add	r30, r24
     ff4:	e0 93 97 04 	sts	0x0497, r30	; 0x800497 <OSPrioHighRdy>
     ff8:	e0 93 98 04 	sts	0x0498, r30	; 0x800498 <OSPrioCur>
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	e5 51       	subi	r30, 0x15	; 21
    1004:	fa 4f       	sbci	r31, 0xFA	; 250
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <OSTCBHighRdy+0x1>
    100e:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <OSTCBHighRdy>
    1012:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <OSTCBCur+0x1>
    1016:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <OSTCBCur>
    101a:	0c 94 ed 05 	jmp	0xbda	; 0xbda <OSStartHighRdy>
    101e:	08 95       	ret

00001020 <OSTimeTick>:
    1020:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <OSTimeTickHook>
    1024:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <OSRunning>
    1028:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <OSTCBList>
    102c:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <OSTCBList+0x1>
    1030:	21 e0       	ldi	r18, 0x01	; 1
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	01 f1       	breq	.+64     	; 0x1078 <OSTimeTick+0x58>
    1038:	08 95       	ret
    103a:	f8 94       	cli
    103c:	86 81       	ldd	r24, Z+6	; 0x06
    103e:	97 81       	ldd	r25, Z+7	; 0x07
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	b1 f0       	breq	.+44     	; 0x1070 <OSTimeTick+0x50>
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	97 83       	std	Z+7, r25	; 0x07
    1048:	86 83       	std	Z+6, r24	; 0x06
    104a:	89 2b       	or	r24, r25
    104c:	89 f4       	brne	.+34     	; 0x1070 <OSTimeTick+0x50>
    104e:	80 85       	ldd	r24, Z+8	; 0x08
    1050:	83 fd       	sbrc	r24, 3
    1052:	16 c0       	rjmp	.+44     	; 0x1080 <OSTimeTick+0x60>
    1054:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <OSRdyGrp>
    1058:	95 85       	ldd	r25, Z+13	; 0x0d
    105a:	89 2b       	or	r24, r25
    105c:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <OSRdyGrp>
    1060:	a3 85       	ldd	r26, Z+11	; 0x0b
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ab 55       	subi	r26, 0x5B	; 91
    1066:	bb 4f       	sbci	r27, 0xFB	; 251
    1068:	8c 91       	ld	r24, X
    106a:	94 85       	ldd	r25, Z+12	; 0x0c
    106c:	89 2b       	or	r24, r25
    106e:	8c 93       	st	X, r24
    1070:	02 80       	ldd	r0, Z+2	; 0x02
    1072:	f3 81       	ldd	r31, Z+3	; 0x03
    1074:	e0 2d       	mov	r30, r0
    1076:	78 94       	sei
    1078:	81 85       	ldd	r24, Z+9	; 0x09
    107a:	80 31       	cpi	r24, 0x10	; 16
    107c:	f1 f6       	brne	.-68     	; 0x103a <OSTimeTick+0x1a>
    107e:	dc cf       	rjmp	.-72     	; 0x1038 <OSTimeTick+0x18>
    1080:	37 83       	std	Z+7, r19	; 0x07
    1082:	26 83       	std	Z+6, r18	; 0x06
    1084:	f5 cf       	rjmp	.-22     	; 0x1070 <OSTimeTick+0x50>

00001086 <OSVersion>:
    1086:	8c ef       	ldi	r24, 0xFC	; 252
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	08 95       	ret

0000108c <OS_Dummy>:
    108c:	08 95       	ret

0000108e <OS_Sched>:
    108e:	f8 94       	cli
    1090:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <OSIntNesting>
    1094:	81 11       	cpse	r24, r1
    1096:	3d c0       	rjmp	.+122    	; 0x1112 <OS_Sched+0x84>
    1098:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <OSLockNesting>
    109c:	81 11       	cpse	r24, r1
    109e:	39 c0       	rjmp	.+114    	; 0x1112 <OS_Sched+0x84>
    10a0:	e0 91 a4 04 	lds	r30, 0x04A4	; 0x8004a4 <OSRdyGrp>
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	e0 50       	subi	r30, 0x00	; 0
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	e0 81       	ld	r30, Z
    10ac:	ae 2f       	mov	r26, r30
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ab 55       	subi	r26, 0x5B	; 91
    10b2:	bb 4f       	sbci	r27, 0xFB	; 251
    10b4:	ac 91       	ld	r26, X
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	a0 50       	subi	r26, 0x00	; 0
    10ba:	bf 4f       	sbci	r27, 0xFF	; 255
    10bc:	ee 0f       	add	r30, r30
    10be:	ee 0f       	add	r30, r30
    10c0:	ee 0f       	add	r30, r30
    10c2:	8c 91       	ld	r24, X
    10c4:	e8 0f       	add	r30, r24
    10c6:	e0 93 97 04 	sts	0x0497, r30	; 0x800497 <OSPrioHighRdy>
    10ca:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <OSPrioCur>
    10ce:	e8 17       	cp	r30, r24
    10d0:	01 f1       	breq	.+64     	; 0x1112 <OS_Sched+0x84>
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	e5 51       	subi	r30, 0x15	; 21
    10da:	fa 4f       	sbci	r31, 0xFA	; 250
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <OSTCBHighRdy+0x1>
    10e4:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <OSTCBHighRdy>
    10e8:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSCtxSwCtr>
    10ec:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <OSCtxSwCtr+0x1>
    10f0:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <OSCtxSwCtr+0x2>
    10f4:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <OSCtxSwCtr+0x3>
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	a1 1d       	adc	r26, r1
    10fc:	b1 1d       	adc	r27, r1
    10fe:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <OSCtxSwCtr>
    1102:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <OSCtxSwCtr+0x1>
    1106:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <OSCtxSwCtr+0x2>
    110a:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <OSCtxSwCtr+0x3>
    110e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <OSCtxSw>
    1112:	78 94       	sei
    1114:	08 95       	ret

00001116 <OSSchedUnlock>:
    1116:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <OSRunning>
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	91 f4       	brne	.+36     	; 0x1142 <OSSchedUnlock+0x2c>
    111e:	f8 94       	cli
    1120:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <OSLockNesting>
    1124:	88 23       	and	r24, r24
    1126:	61 f0       	breq	.+24     	; 0x1140 <OSSchedUnlock+0x2a>
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <OSLockNesting>
    112e:	81 11       	cpse	r24, r1
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <OSSchedUnlock+0x2a>
    1132:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <OSIntNesting>
    1136:	81 11       	cpse	r24, r1
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <OSSchedUnlock+0x2a>
    113a:	78 94       	sei
    113c:	0c 94 47 08 	jmp	0x108e	; 0x108e <OS_Sched>
    1140:	78 94       	sei
    1142:	08 95       	ret

00001144 <OSTimeDly.part.0>:
    1144:	ac 01       	movw	r20, r24
    1146:	f8 94       	cli
    1148:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <OSTCBCur>
    114c:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <OSTCBCur+0x1>
    1150:	1b 96       	adiw	r26, 0x0b	; 11
    1152:	ec 91       	ld	r30, X
    1154:	1b 97       	sbiw	r26, 0x0b	; 11
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	1c 96       	adiw	r26, 0x0c	; 12
    115a:	9c 91       	ld	r25, X
    115c:	1c 97       	sbiw	r26, 0x0c	; 12
    115e:	90 95       	com	r25
    1160:	eb 55       	subi	r30, 0x5B	; 91
    1162:	fb 4f       	sbci	r31, 0xFB	; 251
    1164:	80 81       	ld	r24, Z
    1166:	98 23       	and	r25, r24
    1168:	90 83       	st	Z, r25
    116a:	91 11       	cpse	r25, r1
    116c:	0a c0       	rjmp	.+20     	; 0x1182 <OSTimeDly.part.0+0x3e>
    116e:	1d 96       	adiw	r26, 0x0d	; 13
    1170:	9c 91       	ld	r25, X
    1172:	1d 97       	sbiw	r26, 0x0d	; 13
    1174:	29 2f       	mov	r18, r25
    1176:	20 95       	com	r18
    1178:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <OSRdyGrp>
    117c:	92 23       	and	r25, r18
    117e:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <OSRdyGrp>
    1182:	17 96       	adiw	r26, 0x07	; 7
    1184:	5c 93       	st	X, r21
    1186:	4e 93       	st	-X, r20
    1188:	16 97       	sbiw	r26, 0x06	; 6
    118a:	78 94       	sei
    118c:	0c 94 47 08 	jmp	0x108e	; 0x108e <OS_Sched>

00001190 <OS_TCBInit>:
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	f8 94       	cli
    1198:	c0 91 9f 04 	lds	r28, 0x049F	; 0x80049f <OSTCBFreeList>
    119c:	d0 91 a0 04 	lds	r29, 0x04A0	; 0x8004a0 <OSTCBFreeList+0x1>
    11a0:	20 97       	sbiw	r28, 0x00	; 0
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <OS_TCBInit+0x16>
    11a4:	54 c0       	rjmp	.+168    	; 0x124e <OS_TCBInit+0xbe>
    11a6:	18 2f       	mov	r17, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	9b 81       	ldd	r25, Y+3	; 0x03
    11ac:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <OSTCBFreeList+0x1>
    11b0:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <OSTCBFreeList>
    11b4:	78 94       	sei
    11b6:	79 83       	std	Y+1, r23	; 0x01
    11b8:	68 83       	st	Y, r22
    11ba:	19 87       	std	Y+9, r17	; 0x09
    11bc:	18 86       	std	Y+8, r1	; 0x08
    11be:	1f 82       	std	Y+7, r1	; 0x07
    11c0:	1e 82       	std	Y+6, r1	; 0x06
    11c2:	1e 86       	std	Y+14, r1	; 0x0e
    11c4:	e1 2f       	mov	r30, r17
    11c6:	e6 95       	lsr	r30
    11c8:	e6 95       	lsr	r30
    11ca:	e6 95       	lsr	r30
    11cc:	eb 87       	std	Y+11, r30	; 0x0b
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	e0 50       	subi	r30, 0x00	; 0
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	80 81       	ld	r24, Z
    11d6:	8d 87       	std	Y+13, r24	; 0x0d
    11d8:	e1 2f       	mov	r30, r17
    11da:	e7 70       	andi	r30, 0x07	; 7
    11dc:	ea 87       	std	Y+10, r30	; 0x0a
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	e0 50       	subi	r30, 0x00	; 0
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	80 81       	ld	r24, Z
    11e6:	8c 87       	std	Y+12, r24	; 0x0c
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 5e 07 	call	0xebc	; 0xebc <OSTCBInitHook>
    11ee:	ce 01       	movw	r24, r28
    11f0:	0e 94 56 07 	call	0xeac	; 0xeac <OSTaskCreateHook>
    11f4:	f8 94       	cli
    11f6:	e1 2f       	mov	r30, r17
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	e5 51       	subi	r30, 0x15	; 21
    1200:	fa 4f       	sbci	r31, 0xFA	; 250
    1202:	d1 83       	std	Z+1, r29	; 0x01
    1204:	c0 83       	st	Z, r28
    1206:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <OSTCBList>
    120a:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <OSTCBList+0x1>
    120e:	fb 83       	std	Y+3, r31	; 0x03
    1210:	ea 83       	std	Y+2, r30	; 0x02
    1212:	1d 82       	std	Y+5, r1	; 0x05
    1214:	1c 82       	std	Y+4, r1	; 0x04
    1216:	30 97       	sbiw	r30, 0x00	; 0
    1218:	11 f0       	breq	.+4      	; 0x121e <OS_TCBInit+0x8e>
    121a:	d5 83       	std	Z+5, r29	; 0x05
    121c:	c4 83       	std	Z+4, r28	; 0x04
    121e:	d0 93 9a 04 	sts	0x049A, r29	; 0x80049a <OSTCBList+0x1>
    1222:	c0 93 99 04 	sts	0x0499, r28	; 0x800499 <OSTCBList>
    1226:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <OSRdyGrp>
    122a:	9d 85       	ldd	r25, Y+13	; 0x0d
    122c:	89 2b       	or	r24, r25
    122e:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <OSRdyGrp>
    1232:	eb 85       	ldd	r30, Y+11	; 0x0b
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	eb 55       	subi	r30, 0x5B	; 91
    1238:	fb 4f       	sbci	r31, 0xFB	; 251
    123a:	80 81       	ld	r24, Z
    123c:	9c 85       	ldd	r25, Y+12	; 0x0c
    123e:	89 2b       	or	r24, r25
    1240:	80 83       	st	Z, r24
    1242:	78 94       	sei
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	08 95       	ret
    124e:	78 94       	sei
    1250:	86 e4       	ldi	r24, 0x46	; 70
    1252:	f9 cf       	rjmp	.-14     	; 0x1246 <OS_TCBInit+0xb6>

00001254 <OSTaskCreate>:
    1254:	9f 92       	push	r9
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	cf 92       	push	r12
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	f8 94       	cli
    126c:	c2 2f       	mov	r28, r18
    126e:	d0 e0       	ldi	r29, 0x00	; 0
    1270:	cc 0f       	add	r28, r28
    1272:	dd 1f       	adc	r29, r29
    1274:	c5 51       	subi	r28, 0x15	; 21
    1276:	da 4f       	sbci	r29, 0xFA	; 250
    1278:	e8 81       	ld	r30, Y
    127a:	f9 81       	ldd	r31, Y+1	; 0x01
    127c:	ef 2b       	or	r30, r31
    127e:	09 f0       	breq	.+2      	; 0x1282 <OSTaskCreate+0x2e>
    1280:	3b c0       	rjmp	.+118    	; 0x12f8 <OSTaskCreate+0xa4>
    1282:	92 2e       	mov	r9, r18
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	39 83       	std	Y+1, r19	; 0x01
    128a:	28 83       	st	Y, r18
    128c:	78 94       	sei
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	0e 94 0c 07 	call	0xe18	; 0xe18 <OSTaskStkInit>
    1296:	b1 2c       	mov	r11, r1
    1298:	a1 2c       	mov	r10, r1
    129a:	d1 2c       	mov	r13, r1
    129c:	c1 2c       	mov	r12, r1
    129e:	e1 2c       	mov	r14, r1
    12a0:	f1 2c       	mov	r15, r1
    12a2:	87 01       	movw	r16, r14
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	bc 01       	movw	r22, r24
    12ae:	89 2d       	mov	r24, r9
    12b0:	0e 94 c8 08 	call	0x1190	; 0x1190 <OS_TCBInit>
    12b4:	18 2f       	mov	r17, r24
    12b6:	81 11       	cpse	r24, r1
    12b8:	1a c0       	rjmp	.+52     	; 0x12ee <OSTaskCreate+0x9a>
    12ba:	f8 94       	cli
    12bc:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <OSTaskCtr>
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <OSTaskCtr>
    12c6:	78 94       	sei
    12c8:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <OSRunning>
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <OSTaskCreate+0x80>
    12d0:	0e 94 47 08 	call	0x108e	; 0x108e <OS_Sched>
    12d4:	81 2f       	mov	r24, r17
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	df 90       	pop	r13
    12e4:	cf 90       	pop	r12
    12e6:	bf 90       	pop	r11
    12e8:	af 90       	pop	r10
    12ea:	9f 90       	pop	r9
    12ec:	08 95       	ret
    12ee:	f8 94       	cli
    12f0:	19 82       	std	Y+1, r1	; 0x01
    12f2:	18 82       	st	Y, r1
    12f4:	78 94       	sei
    12f6:	ee cf       	rjmp	.-36     	; 0x12d4 <OSTaskCreate+0x80>
    12f8:	78 94       	sei
    12fa:	18 e2       	ldi	r17, 0x28	; 40
    12fc:	eb cf       	rjmp	.-42     	; 0x12d4 <OSTaskCreate+0x80>

000012fe <OSInit>:
    12fe:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <OSInitHookBegin>
    1302:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <OSIntNesting>
    1306:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <OSLockNesting>
    130a:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <OSTaskCtr>
    130e:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <OSRunning>
    1312:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <OSCtxSwCtr>
    1316:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <OSCtxSwCtr+0x1>
    131a:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <OSCtxSwCtr+0x2>
    131e:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <OSCtxSwCtr+0x3>
    1322:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OSIdleCtr>
    1326:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <OSIdleCtr+0x1>
    132a:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <OSIdleCtr+0x2>
    132e:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <OSIdleCtr+0x3>
    1332:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <OSRdyGrp>
    1336:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <OSRdyTbl>
    133a:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <OSRdyTbl+0x1>
    133e:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <OSRdyTbl+0x2>
    1342:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <OSPrioCur>
    1346:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <OSPrioHighRdy>
    134a:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <OSTCBHighRdy+0x1>
    134e:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <OSTCBHighRdy>
    1352:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <OSTCBCur+0x1>
    1356:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <OSTCBCur>
    135a:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <OSTCBList+0x1>
    135e:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <OSTCBList>
    1362:	eb ee       	ldi	r30, 0xEB	; 235
    1364:	f5 e0       	ldi	r31, 0x05	; 5
    1366:	11 92       	st	Z+, r1
    1368:	11 92       	st	Z+, r1
    136a:	86 e0       	ldi	r24, 0x06	; 6
    136c:	ed 30       	cpi	r30, 0x0D	; 13
    136e:	f8 07       	cpc	r31, r24
    1370:	d1 f7       	brne	.-12     	; 0x1366 <OSInit+0x68>
    1372:	ec ee       	ldi	r30, 0xEC	; 236
    1374:	f4 e0       	ldi	r31, 0x04	; 4
    1376:	cf 01       	movw	r24, r30
    1378:	0f 96       	adiw	r24, 0x0f	; 15
    137a:	93 83       	std	Z+3, r25	; 0x03
    137c:	82 83       	std	Z+2, r24	; 0x02
    137e:	fc 01       	movw	r30, r24
    1380:	85 e0       	ldi	r24, 0x05	; 5
    1382:	ec 3d       	cpi	r30, 0xDC	; 220
    1384:	f8 07       	cpc	r31, r24
    1386:	b9 f7       	brne	.-18     	; 0x1376 <OSInit+0x78>
    1388:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <OSTCBTbl+0xf3>
    138c:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <OSTCBTbl+0xf2>
    1390:	8c ee       	ldi	r24, 0xEC	; 236
    1392:	94 e0       	ldi	r25, 0x04	; 4
    1394:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <OSTCBFreeList+0x1>
    1398:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <OSTCBFreeList>
    139c:	20 e1       	ldi	r18, 0x10	; 16
    139e:	4b ee       	ldi	r20, 0xEB	; 235
    13a0:	54 e0       	ldi	r21, 0x04	; 4
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	8f e5       	ldi	r24, 0x5F	; 95
    13a8:	97 e0       	ldi	r25, 0x07	; 7
    13aa:	0e 94 2a 09 	call	0x1254	; 0x1254 <OSTaskCreate>
    13ae:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <OSInitHookEnd>

000013b2 <OSTaskDel>:
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	f0 90 a9 04 	lds	r15, 0x04A9	; 0x8004a9 <OSIntNesting>
    13c0:	f1 10       	cpse	r15, r1
    13c2:	76 c0       	rjmp	.+236    	; 0x14b0 <OSTaskDel+0xfe>
    13c4:	f8 94       	cli
    13c6:	8f 3f       	cpi	r24, 0xFF	; 255
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <OSTaskDel+0x22>
    13ca:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <OSTCBCur>
    13ce:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <OSTCBCur+0x1>
    13d2:	81 85       	ldd	r24, Z+9	; 0x09
    13d4:	08 2f       	mov	r16, r24
    13d6:	10 e0       	ldi	r17, 0x00	; 0
    13d8:	00 0f       	add	r16, r16
    13da:	11 1f       	adc	r17, r17
    13dc:	f8 01       	movw	r30, r16
    13de:	e5 51       	subi	r30, 0x15	; 21
    13e0:	fa 4f       	sbci	r31, 0xFA	; 250
    13e2:	c0 81       	ld	r28, Z
    13e4:	d1 81       	ldd	r29, Z+1	; 0x01
    13e6:	20 97       	sbiw	r28, 0x00	; 0
    13e8:	09 f4       	brne	.+2      	; 0x13ec <OSTaskDel+0x3a>
    13ea:	5e c0       	rjmp	.+188    	; 0x14a8 <OSTaskDel+0xf6>
    13ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f2:	80 95       	com	r24
    13f4:	eb 55       	subi	r30, 0x5B	; 91
    13f6:	fb 4f       	sbci	r31, 0xFB	; 251
    13f8:	90 81       	ld	r25, Z
    13fa:	89 23       	and	r24, r25
    13fc:	80 83       	st	Z, r24
    13fe:	81 11       	cpse	r24, r1
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <OSTaskDel+0x60>
    1402:	8d 85       	ldd	r24, Y+13	; 0x0d
    1404:	98 2f       	mov	r25, r24
    1406:	90 95       	com	r25
    1408:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <OSRdyGrp>
    140c:	89 23       	and	r24, r25
    140e:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <OSRdyGrp>
    1412:	1f 82       	std	Y+7, r1	; 0x07
    1414:	1e 82       	std	Y+6, r1	; 0x06
    1416:	18 86       	std	Y+8, r1	; 0x08
    1418:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <OSLockNesting>
    141c:	8f 3f       	cpi	r24, 0xFF	; 255
    141e:	19 f0       	breq	.+6      	; 0x1426 <OSTaskDel+0x74>
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <OSLockNesting>
    1426:	78 94       	sei
    1428:	f8 94       	cli
    142a:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <OSLockNesting>
    142e:	88 23       	and	r24, r24
    1430:	19 f0       	breq	.+6      	; 0x1438 <OSTaskDel+0x86>
    1432:	81 50       	subi	r24, 0x01	; 1
    1434:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <OSLockNesting>
    1438:	ce 01       	movw	r24, r28
    143a:	0e 94 57 07 	call	0xeae	; 0xeae <OSTaskDelHook>
    143e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <OSTaskCtr>
    1442:	81 50       	subi	r24, 0x01	; 1
    1444:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <OSTaskCtr>
    1448:	f8 01       	movw	r30, r16
    144a:	e5 51       	subi	r30, 0x15	; 21
    144c:	fa 4f       	sbci	r31, 0xFA	; 250
    144e:	11 82       	std	Z+1, r1	; 0x01
    1450:	10 82       	st	Z, r1
    1452:	ec 81       	ldd	r30, Y+4	; 0x04
    1454:	fd 81       	ldd	r31, Y+5	; 0x05
    1456:	aa 81       	ldd	r26, Y+2	; 0x02
    1458:	bb 81       	ldd	r27, Y+3	; 0x03
    145a:	30 97       	sbiw	r30, 0x00	; 0
    145c:	e1 f4       	brne	.+56     	; 0x1496 <OSTaskDel+0xe4>
    145e:	15 96       	adiw	r26, 0x05	; 5
    1460:	1c 92       	st	X, r1
    1462:	1e 92       	st	-X, r1
    1464:	14 97       	sbiw	r26, 0x04	; 4
    1466:	b0 93 9a 04 	sts	0x049A, r27	; 0x80049a <OSTCBList+0x1>
    146a:	a0 93 99 04 	sts	0x0499, r26	; 0x800499 <OSTCBList>
    146e:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <OSTCBFreeList>
    1472:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <OSTCBFreeList+0x1>
    1476:	9b 83       	std	Y+3, r25	; 0x03
    1478:	8a 83       	std	Y+2, r24	; 0x02
    147a:	d0 93 a0 04 	sts	0x04A0, r29	; 0x8004a0 <OSTCBFreeList+0x1>
    147e:	c0 93 9f 04 	sts	0x049F, r28	; 0x80049f <OSTCBFreeList>
    1482:	78 94       	sei
    1484:	0e 94 47 08 	call	0x108e	; 0x108e <OS_Sched>
    1488:	8f 2d       	mov	r24, r15
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	08 95       	ret
    1496:	b3 83       	std	Z+3, r27	; 0x03
    1498:	a2 83       	std	Z+2, r26	; 0x02
    149a:	aa 81       	ldd	r26, Y+2	; 0x02
    149c:	bb 81       	ldd	r27, Y+3	; 0x03
    149e:	15 96       	adiw	r26, 0x05	; 5
    14a0:	fc 93       	st	X, r31
    14a2:	ee 93       	st	-X, r30
    14a4:	14 97       	sbiw	r26, 0x04	; 4
    14a6:	e3 cf       	rjmp	.-58     	; 0x146e <OSTaskDel+0xbc>
    14a8:	78 94       	sei
    14aa:	9c e3       	ldi	r25, 0x3C	; 60
    14ac:	f9 2e       	mov	r15, r25
    14ae:	ec cf       	rjmp	.-40     	; 0x1488 <OSTaskDel+0xd6>
    14b0:	8f e3       	ldi	r24, 0x3F	; 63
    14b2:	f8 2e       	mov	r15, r24
    14b4:	e9 cf       	rjmp	.-46     	; 0x1488 <OSTaskDel+0xd6>

000014b6 <OSTaskDelReq>:
    14b6:	8f 3f       	cpi	r24, 0xFF	; 255
    14b8:	41 f4       	brne	.+16     	; 0x14ca <OSTaskDelReq+0x14>
    14ba:	f8 94       	cli
    14bc:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <OSTCBCur>
    14c0:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <OSTCBCur+0x1>
    14c4:	86 85       	ldd	r24, Z+14	; 0x0e
    14c6:	78 94       	sei
    14c8:	08 95       	ret
    14ca:	f8 94       	cli
    14cc:	e8 2f       	mov	r30, r24
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	e5 51       	subi	r30, 0x15	; 21
    14d6:	fa 4f       	sbci	r31, 0xFA	; 250
    14d8:	01 90       	ld	r0, Z+
    14da:	f0 81       	ld	r31, Z
    14dc:	e0 2d       	mov	r30, r0
    14de:	8b e0       	ldi	r24, 0x0B	; 11
    14e0:	30 97       	sbiw	r30, 0x00	; 0
    14e2:	89 f3       	breq	.-30     	; 0x14c6 <OSTaskDelReq+0x10>
    14e4:	8e e3       	ldi	r24, 0x3E	; 62
    14e6:	86 87       	std	Z+14, r24	; 0x0e
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	ed cf       	rjmp	.-38     	; 0x14c6 <OSTaskDelReq+0x10>

000014ec <OSTimeDly>:
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <OSTimeDly+0x8>
    14f0:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <OSTimeDly.part.0>
    14f4:	08 95       	ret

000014f6 <OSTimeDlyHMSM>:
    14f6:	cf 92       	push	r12
    14f8:	df 92       	push	r13
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	81 11       	cpse	r24, r1
    1500:	0d c0       	rjmp	.+26     	; 0x151c <OSTimeDlyHMSM+0x26>
    1502:	61 11       	cpse	r22, r1
    1504:	0b c0       	rjmp	.+22     	; 0x151c <OSTimeDlyHMSM+0x26>
    1506:	41 11       	cpse	r20, r1
    1508:	0c c0       	rjmp	.+24     	; 0x1522 <OSTimeDlyHMSM+0x2c>
    150a:	21 15       	cp	r18, r1
    150c:	31 05       	cpc	r19, r1
    150e:	61 f4       	brne	.+24     	; 0x1528 <OSTimeDlyHMSM+0x32>
    1510:	84 e5       	ldi	r24, 0x54	; 84
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	df 90       	pop	r13
    1518:	cf 90       	pop	r12
    151a:	08 95       	ret
    151c:	6c 33       	cpi	r22, 0x3C	; 60
    151e:	08 f0       	brcs	.+2      	; 0x1522 <OSTimeDlyHMSM+0x2c>
    1520:	4f c0       	rjmp	.+158    	; 0x15c0 <OSTimeDlyHMSM+0xca>
    1522:	4c 33       	cpi	r20, 0x3C	; 60
    1524:	08 f0       	brcs	.+2      	; 0x1528 <OSTimeDlyHMSM+0x32>
    1526:	4e c0       	rjmp	.+156    	; 0x15c4 <OSTimeDlyHMSM+0xce>
    1528:	28 3e       	cpi	r18, 0xE8	; 232
    152a:	93 e0       	ldi	r25, 0x03	; 3
    152c:	39 07       	cpc	r19, r25
    152e:	08 f0       	brcs	.+2      	; 0x1532 <OSTimeDlyHMSM+0x3c>
    1530:	4b c0       	rjmp	.+150    	; 0x15c8 <OSTimeDlyHMSM+0xd2>
    1532:	f9 01       	movw	r30, r18
    1534:	58 2f       	mov	r21, r24
    1536:	26 2f       	mov	r18, r22
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	ac e3       	ldi	r26, 0x3C	; 60
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__umulhisi3>
    1542:	6b 01       	movw	r12, r22
    1544:	7c 01       	movw	r14, r24
    1546:	c4 0e       	add	r12, r20
    1548:	d1 1c       	adc	r13, r1
    154a:	e1 1c       	adc	r14, r1
    154c:	f1 1c       	adc	r15, r1
    154e:	25 2f       	mov	r18, r21
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	a0 e1       	ldi	r26, 0x10	; 16
    1554:	be e0       	ldi	r27, 0x0E	; 14
    1556:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__umulhisi3>
    155a:	a7 01       	movw	r20, r14
    155c:	96 01       	movw	r18, r12
    155e:	26 0f       	add	r18, r22
    1560:	37 1f       	adc	r19, r23
    1562:	48 1f       	adc	r20, r24
    1564:	59 1f       	adc	r21, r25
    1566:	a4 e6       	ldi	r26, 0x64	; 100
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__muluhisi3>
    156e:	6b 01       	movw	r12, r22
    1570:	7c 01       	movw	r14, r24
    1572:	9f 01       	movw	r18, r30
    1574:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__umulhisi3>
    1578:	6c 50       	subi	r22, 0x0C	; 12
    157a:	7e 4f       	sbci	r23, 0xFE	; 254
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	28 ee       	ldi	r18, 0xE8	; 232
    1582:	33 e0       	ldi	r19, 0x03	; 3
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__udivmodsi4>
    158c:	d7 01       	movw	r26, r14
    158e:	c6 01       	movw	r24, r12
    1590:	82 0f       	add	r24, r18
    1592:	93 1f       	adc	r25, r19
    1594:	a4 1f       	adc	r26, r20
    1596:	b5 1f       	adc	r27, r21
    1598:	7d 01       	movw	r14, r26
    159a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <OSTimeDly>
    159e:	e1 14       	cp	r14, r1
    15a0:	f1 04       	cpc	r15, r1
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <OSTimeDlyHMSM+0xb2>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	b5 cf       	rjmp	.-150    	; 0x1512 <OSTimeDlyHMSM+0x1c>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e8       	ldi	r25, 0x80	; 128
    15ac:	0e 94 a2 08 	call	0x1144	; 0x1144 <OSTimeDly.part.0>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e8       	ldi	r25, 0x80	; 128
    15b4:	0e 94 a2 08 	call	0x1144	; 0x1144 <OSTimeDly.part.0>
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	e8 1a       	sub	r14, r24
    15bc:	f1 08       	sbc	r15, r1
    15be:	ef cf       	rjmp	.-34     	; 0x159e <OSTimeDlyHMSM+0xa8>
    15c0:	81 e5       	ldi	r24, 0x51	; 81
    15c2:	a7 cf       	rjmp	.-178    	; 0x1512 <OSTimeDlyHMSM+0x1c>
    15c4:	82 e5       	ldi	r24, 0x52	; 82
    15c6:	a5 cf       	rjmp	.-182    	; 0x1512 <OSTimeDlyHMSM+0x1c>
    15c8:	83 e5       	ldi	r24, 0x53	; 83
    15ca:	a3 cf       	rjmp	.-186    	; 0x1512 <OSTimeDlyHMSM+0x1c>

000015cc <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    15cc:	0e 94 31 05 	call	0xa62	; 0xa62 <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    15d0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    15e0:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <myrobot+0x1>
    15e4:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    15e8:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <myrobot+0x3>
    15ec:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    15f0:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <myrobot+0x4>
    myrobot.KP = DEFAULT_KP; //0.03
    15f4:	84 ef       	ldi	r24, 0xF4	; 244
    15f6:	9d ef       	ldi	r25, 0xFD	; 253
    15f8:	a4 e5       	ldi	r26, 0x54	; 84
    15fa:	bd e3       	ldi	r27, 0x3D	; 61
    15fc:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <myrobot+0x5>
    1600:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <myrobot+0x6>
    1604:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <myrobot+0x7>
    1608:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <myrobot+0x8>
    myrobot.KD = DEFAULT_KD; //0.07
    160c:	81 e3       	ldi	r24, 0x31	; 49
    160e:	98 e0       	ldi	r25, 0x08	; 8
    1610:	ac e2       	ldi	r26, 0x2C	; 44
    1612:	bd e3       	ldi	r27, 0x3D	; 61
    1614:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <myrobot+0x9>
    1618:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <myrobot+0xa>
    161c:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <myrobot+0xb>
    1620:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <myrobot+0xc>
    myrobot.KI = DEFAULT_KI; //0.0004
    1624:	8c ea       	ldi	r24, 0xAC	; 172
    1626:	95 ec       	ldi	r25, 0xC5	; 197
    1628:	a7 ea       	ldi	r26, 0xA7	; 167
    162a:	b7 e3       	ldi	r27, 0x37	; 55
    162c:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <myrobot+0xd>
    1630:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <myrobot+0xe>
    1634:	a0 93 ef 02 	sts	0x02EF, r26	; 0x8002ef <myrobot+0xf>
    1638:	b0 93 f0 02 	sts	0x02F0, r27	; 0x8002f0 <myrobot+0x10>
    myrobot.lastError = 0.0;
    163c:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x11>
    1640:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x12>
    1644:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <myrobot+0x13>
    1648:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <myrobot+0x14>
    myrobot.integral = 0.0;
    164c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <myrobot+0x15>
    1650:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <myrobot+0x16>
    1654:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <myrobot+0x17>
    1658:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <myrobot+0x18>
    myrobot.prevLeftSpeed = 0;
    165c:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <myrobot+0x1c>
    1660:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <myrobot+0x1b>
    myrobot.prevRightSpeed = 0;
    1664:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <myrobot+0x1e>
    1668:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <myrobot+0x1d>
    myrobot.inRoundabout = 0;
    166c:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <myrobot+0x20>
    1670:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <myrobot+0x1f>
    myrobot.clickCount = 0;
    1674:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <myrobot+0x22>
    1678:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <myrobot+0x21>
    myrobot.inLightField = 0;
    167c:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <myrobot+0x24>
    1680:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <myrobot+0x23>
    myrobot.inBlackBox = 0;
    1684:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <myrobot+0x26>
    1688:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <myrobot+0x25>
    myrobot.turn = 1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <myrobot+0x28>
    1694:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <myrobot+0x27>
    myrobot.goal = 1000;                                      /* goal is to follow on the middle sensor */
    1698:	88 ee       	ldi	r24, 0xE8	; 232
    169a:	93 e0       	ldi	r25, 0x03	; 3
    169c:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <myrobot+0x1a>
    16a0:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <myrobot+0x19>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    16a6:	48 e0       	ldi	r20, 0x08	; 8
    16a8:	54 e0       	ldi	r21, 0x04	; 4
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	8d e8       	ldi	r24, 0x8D	; 141
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 2a 09 	call	0x1254	; 0x1254 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    16b6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <robo_Honk>
    16ba:	0e 94 1d 05 	call	0xa3a	; 0xa3a <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    16be:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <OSStart>
    16c2:	ff cf       	rjmp	.-2      	; 0x16c2 <main+0xf6>

000016c4 <__udivmodhi4>:
    16c4:	aa 1b       	sub	r26, r26
    16c6:	bb 1b       	sub	r27, r27
    16c8:	51 e1       	ldi	r21, 0x11	; 17
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <__udivmodhi4_ep>

000016cc <__udivmodhi4_loop>:
    16cc:	aa 1f       	adc	r26, r26
    16ce:	bb 1f       	adc	r27, r27
    16d0:	a6 17       	cp	r26, r22
    16d2:	b7 07       	cpc	r27, r23
    16d4:	10 f0       	brcs	.+4      	; 0x16da <__udivmodhi4_ep>
    16d6:	a6 1b       	sub	r26, r22
    16d8:	b7 0b       	sbc	r27, r23

000016da <__udivmodhi4_ep>:
    16da:	88 1f       	adc	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	5a 95       	dec	r21
    16e0:	a9 f7       	brne	.-22     	; 0x16cc <__udivmodhi4_loop>
    16e2:	80 95       	com	r24
    16e4:	90 95       	com	r25
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
    16ea:	08 95       	ret

000016ec <__divmodhi4>:
    16ec:	97 fb       	bst	r25, 7
    16ee:	07 2e       	mov	r0, r23
    16f0:	16 f4       	brtc	.+4      	; 0x16f6 <__divmodhi4+0xa>
    16f2:	00 94       	com	r0
    16f4:	07 d0       	rcall	.+14     	; 0x1704 <__divmodhi4_neg1>
    16f6:	77 fd       	sbrc	r23, 7
    16f8:	09 d0       	rcall	.+18     	; 0x170c <__divmodhi4_neg2>
    16fa:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__udivmodhi4>
    16fe:	07 fc       	sbrc	r0, 7
    1700:	05 d0       	rcall	.+10     	; 0x170c <__divmodhi4_neg2>
    1702:	3e f4       	brtc	.+14     	; 0x1712 <__divmodhi4_exit>

00001704 <__divmodhi4_neg1>:
    1704:	90 95       	com	r25
    1706:	81 95       	neg	r24
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	08 95       	ret

0000170c <__divmodhi4_neg2>:
    170c:	70 95       	com	r23
    170e:	61 95       	neg	r22
    1710:	7f 4f       	sbci	r23, 0xFF	; 255

00001712 <__divmodhi4_exit>:
    1712:	08 95       	ret

00001714 <__udivmodsi4>:
    1714:	a1 e2       	ldi	r26, 0x21	; 33
    1716:	1a 2e       	mov	r1, r26
    1718:	aa 1b       	sub	r26, r26
    171a:	bb 1b       	sub	r27, r27
    171c:	fd 01       	movw	r30, r26
    171e:	0d c0       	rjmp	.+26     	; 0x173a <__udivmodsi4_ep>

00001720 <__udivmodsi4_loop>:
    1720:	aa 1f       	adc	r26, r26
    1722:	bb 1f       	adc	r27, r27
    1724:	ee 1f       	adc	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	a2 17       	cp	r26, r18
    172a:	b3 07       	cpc	r27, r19
    172c:	e4 07       	cpc	r30, r20
    172e:	f5 07       	cpc	r31, r21
    1730:	20 f0       	brcs	.+8      	; 0x173a <__udivmodsi4_ep>
    1732:	a2 1b       	sub	r26, r18
    1734:	b3 0b       	sbc	r27, r19
    1736:	e4 0b       	sbc	r30, r20
    1738:	f5 0b       	sbc	r31, r21

0000173a <__udivmodsi4_ep>:
    173a:	66 1f       	adc	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	88 1f       	adc	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	1a 94       	dec	r1
    1744:	69 f7       	brne	.-38     	; 0x1720 <__udivmodsi4_loop>
    1746:	60 95       	com	r22
    1748:	70 95       	com	r23
    174a:	80 95       	com	r24
    174c:	90 95       	com	r25
    174e:	9b 01       	movw	r18, r22
    1750:	ac 01       	movw	r20, r24
    1752:	bd 01       	movw	r22, r26
    1754:	cf 01       	movw	r24, r30
    1756:	08 95       	ret

00001758 <__tablejump2__>:
    1758:	ee 0f       	add	r30, r30
    175a:	ff 1f       	adc	r31, r31
    175c:	05 90       	lpm	r0, Z+
    175e:	f4 91       	lpm	r31, Z
    1760:	e0 2d       	mov	r30, r0
    1762:	09 94       	ijmp

00001764 <__umulhisi3>:
    1764:	a2 9f       	mul	r26, r18
    1766:	b0 01       	movw	r22, r0
    1768:	b3 9f       	mul	r27, r19
    176a:	c0 01       	movw	r24, r0
    176c:	a3 9f       	mul	r26, r19
    176e:	70 0d       	add	r23, r0
    1770:	81 1d       	adc	r24, r1
    1772:	11 24       	eor	r1, r1
    1774:	91 1d       	adc	r25, r1
    1776:	b2 9f       	mul	r27, r18
    1778:	70 0d       	add	r23, r0
    177a:	81 1d       	adc	r24, r1
    177c:	11 24       	eor	r1, r1
    177e:	91 1d       	adc	r25, r1
    1780:	08 95       	ret

00001782 <__muluhisi3>:
    1782:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__umulhisi3>
    1786:	a5 9f       	mul	r26, r21
    1788:	90 0d       	add	r25, r0
    178a:	b4 9f       	mul	r27, r20
    178c:	90 0d       	add	r25, r0
    178e:	a4 9f       	mul	r26, r20
    1790:	80 0d       	add	r24, r0
    1792:	91 1d       	adc	r25, r1
    1794:	11 24       	eor	r1, r1
    1796:	08 95       	ret

00001798 <__subsf3>:
    1798:	50 58       	subi	r21, 0x80	; 128

0000179a <__addsf3>:
    179a:	bb 27       	eor	r27, r27
    179c:	aa 27       	eor	r26, r26
    179e:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__addsf3x>
    17a2:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__fp_round>
    17a6:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_pscA>
    17aa:	38 f0       	brcs	.+14     	; 0x17ba <__addsf3+0x20>
    17ac:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fp_pscB>
    17b0:	20 f0       	brcs	.+8      	; 0x17ba <__addsf3+0x20>
    17b2:	39 f4       	brne	.+14     	; 0x17c2 <__addsf3+0x28>
    17b4:	9f 3f       	cpi	r25, 0xFF	; 255
    17b6:	19 f4       	brne	.+6      	; 0x17be <__addsf3+0x24>
    17b8:	26 f4       	brtc	.+8      	; 0x17c2 <__addsf3+0x28>
    17ba:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__fp_nan>
    17be:	0e f4       	brtc	.+2      	; 0x17c2 <__addsf3+0x28>
    17c0:	e0 95       	com	r30
    17c2:	e7 fb       	bst	r30, 7
    17c4:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_inf>

000017c8 <__addsf3x>:
    17c8:	e9 2f       	mov	r30, r25
    17ca:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__fp_split3>
    17ce:	58 f3       	brcs	.-42     	; 0x17a6 <__addsf3+0xc>
    17d0:	ba 17       	cp	r27, r26
    17d2:	62 07       	cpc	r22, r18
    17d4:	73 07       	cpc	r23, r19
    17d6:	84 07       	cpc	r24, r20
    17d8:	95 07       	cpc	r25, r21
    17da:	20 f0       	brcs	.+8      	; 0x17e4 <__addsf3x+0x1c>
    17dc:	79 f4       	brne	.+30     	; 0x17fc <__addsf3x+0x34>
    17de:	a6 f5       	brtc	.+104    	; 0x1848 <__addsf3x+0x80>
    17e0:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__fp_zero>
    17e4:	0e f4       	brtc	.+2      	; 0x17e8 <__addsf3x+0x20>
    17e6:	e0 95       	com	r30
    17e8:	0b 2e       	mov	r0, r27
    17ea:	ba 2f       	mov	r27, r26
    17ec:	a0 2d       	mov	r26, r0
    17ee:	0b 01       	movw	r0, r22
    17f0:	b9 01       	movw	r22, r18
    17f2:	90 01       	movw	r18, r0
    17f4:	0c 01       	movw	r0, r24
    17f6:	ca 01       	movw	r24, r20
    17f8:	a0 01       	movw	r20, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	ff 27       	eor	r31, r31
    17fe:	59 1b       	sub	r21, r25
    1800:	99 f0       	breq	.+38     	; 0x1828 <__addsf3x+0x60>
    1802:	59 3f       	cpi	r21, 0xF9	; 249
    1804:	50 f4       	brcc	.+20     	; 0x181a <__addsf3x+0x52>
    1806:	50 3e       	cpi	r21, 0xE0	; 224
    1808:	68 f1       	brcs	.+90     	; 0x1864 <__addsf3x+0x9c>
    180a:	1a 16       	cp	r1, r26
    180c:	f0 40       	sbci	r31, 0x00	; 0
    180e:	a2 2f       	mov	r26, r18
    1810:	23 2f       	mov	r18, r19
    1812:	34 2f       	mov	r19, r20
    1814:	44 27       	eor	r20, r20
    1816:	58 5f       	subi	r21, 0xF8	; 248
    1818:	f3 cf       	rjmp	.-26     	; 0x1800 <__addsf3x+0x38>
    181a:	46 95       	lsr	r20
    181c:	37 95       	ror	r19
    181e:	27 95       	ror	r18
    1820:	a7 95       	ror	r26
    1822:	f0 40       	sbci	r31, 0x00	; 0
    1824:	53 95       	inc	r21
    1826:	c9 f7       	brne	.-14     	; 0x181a <__addsf3x+0x52>
    1828:	7e f4       	brtc	.+30     	; 0x1848 <__addsf3x+0x80>
    182a:	1f 16       	cp	r1, r31
    182c:	ba 0b       	sbc	r27, r26
    182e:	62 0b       	sbc	r22, r18
    1830:	73 0b       	sbc	r23, r19
    1832:	84 0b       	sbc	r24, r20
    1834:	ba f0       	brmi	.+46     	; 0x1864 <__addsf3x+0x9c>
    1836:	91 50       	subi	r25, 0x01	; 1
    1838:	a1 f0       	breq	.+40     	; 0x1862 <__addsf3x+0x9a>
    183a:	ff 0f       	add	r31, r31
    183c:	bb 1f       	adc	r27, r27
    183e:	66 1f       	adc	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	88 1f       	adc	r24, r24
    1844:	c2 f7       	brpl	.-16     	; 0x1836 <__addsf3x+0x6e>
    1846:	0e c0       	rjmp	.+28     	; 0x1864 <__addsf3x+0x9c>
    1848:	ba 0f       	add	r27, r26
    184a:	62 1f       	adc	r22, r18
    184c:	73 1f       	adc	r23, r19
    184e:	84 1f       	adc	r24, r20
    1850:	48 f4       	brcc	.+18     	; 0x1864 <__addsf3x+0x9c>
    1852:	87 95       	ror	r24
    1854:	77 95       	ror	r23
    1856:	67 95       	ror	r22
    1858:	b7 95       	ror	r27
    185a:	f7 95       	ror	r31
    185c:	9e 3f       	cpi	r25, 0xFE	; 254
    185e:	08 f0       	brcs	.+2      	; 0x1862 <__addsf3x+0x9a>
    1860:	b0 cf       	rjmp	.-160    	; 0x17c2 <__addsf3+0x28>
    1862:	93 95       	inc	r25
    1864:	88 0f       	add	r24, r24
    1866:	08 f0       	brcs	.+2      	; 0x186a <__addsf3x+0xa2>
    1868:	99 27       	eor	r25, r25
    186a:	ee 0f       	add	r30, r30
    186c:	97 95       	ror	r25
    186e:	87 95       	ror	r24
    1870:	08 95       	ret

00001872 <__fixsfsi>:
    1872:	0e 94 40 0c 	call	0x1880	; 0x1880 <__fixunssfsi>
    1876:	68 94       	set
    1878:	b1 11       	cpse	r27, r1
    187a:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__fp_szero>
    187e:	08 95       	ret

00001880 <__fixunssfsi>:
    1880:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__fp_splitA>
    1884:	88 f0       	brcs	.+34     	; 0x18a8 <__fixunssfsi+0x28>
    1886:	9f 57       	subi	r25, 0x7F	; 127
    1888:	98 f0       	brcs	.+38     	; 0x18b0 <__fixunssfsi+0x30>
    188a:	b9 2f       	mov	r27, r25
    188c:	99 27       	eor	r25, r25
    188e:	b7 51       	subi	r27, 0x17	; 23
    1890:	b0 f0       	brcs	.+44     	; 0x18be <__fixunssfsi+0x3e>
    1892:	e1 f0       	breq	.+56     	; 0x18cc <__fixunssfsi+0x4c>
    1894:	66 0f       	add	r22, r22
    1896:	77 1f       	adc	r23, r23
    1898:	88 1f       	adc	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	1a f0       	brmi	.+6      	; 0x18a4 <__fixunssfsi+0x24>
    189e:	ba 95       	dec	r27
    18a0:	c9 f7       	brne	.-14     	; 0x1894 <__fixunssfsi+0x14>
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <__fixunssfsi+0x4c>
    18a4:	b1 30       	cpi	r27, 0x01	; 1
    18a6:	91 f0       	breq	.+36     	; 0x18cc <__fixunssfsi+0x4c>
    18a8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_zero>
    18ac:	b1 e0       	ldi	r27, 0x01	; 1
    18ae:	08 95       	ret
    18b0:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__fp_zero>
    18b4:	67 2f       	mov	r22, r23
    18b6:	78 2f       	mov	r23, r24
    18b8:	88 27       	eor	r24, r24
    18ba:	b8 5f       	subi	r27, 0xF8	; 248
    18bc:	39 f0       	breq	.+14     	; 0x18cc <__fixunssfsi+0x4c>
    18be:	b9 3f       	cpi	r27, 0xF9	; 249
    18c0:	cc f3       	brlt	.-14     	; 0x18b4 <__fixunssfsi+0x34>
    18c2:	86 95       	lsr	r24
    18c4:	77 95       	ror	r23
    18c6:	67 95       	ror	r22
    18c8:	b3 95       	inc	r27
    18ca:	d9 f7       	brne	.-10     	; 0x18c2 <__fixunssfsi+0x42>
    18cc:	3e f4       	brtc	.+14     	; 0x18dc <__fixunssfsi+0x5c>
    18ce:	90 95       	com	r25
    18d0:	80 95       	com	r24
    18d2:	70 95       	com	r23
    18d4:	61 95       	neg	r22
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	08 95       	ret

000018de <__floatunsisf>:
    18de:	e8 94       	clt
    18e0:	09 c0       	rjmp	.+18     	; 0x18f4 <__floatsisf+0x12>

000018e2 <__floatsisf>:
    18e2:	97 fb       	bst	r25, 7
    18e4:	3e f4       	brtc	.+14     	; 0x18f4 <__floatsisf+0x12>
    18e6:	90 95       	com	r25
    18e8:	80 95       	com	r24
    18ea:	70 95       	com	r23
    18ec:	61 95       	neg	r22
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	8f 4f       	sbci	r24, 0xFF	; 255
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	99 23       	and	r25, r25
    18f6:	a9 f0       	breq	.+42     	; 0x1922 <__floatsisf+0x40>
    18f8:	f9 2f       	mov	r31, r25
    18fa:	96 e9       	ldi	r25, 0x96	; 150
    18fc:	bb 27       	eor	r27, r27
    18fe:	93 95       	inc	r25
    1900:	f6 95       	lsr	r31
    1902:	87 95       	ror	r24
    1904:	77 95       	ror	r23
    1906:	67 95       	ror	r22
    1908:	b7 95       	ror	r27
    190a:	f1 11       	cpse	r31, r1
    190c:	f8 cf       	rjmp	.-16     	; 0x18fe <__floatsisf+0x1c>
    190e:	fa f4       	brpl	.+62     	; 0x194e <__floatsisf+0x6c>
    1910:	bb 0f       	add	r27, r27
    1912:	11 f4       	brne	.+4      	; 0x1918 <__floatsisf+0x36>
    1914:	60 ff       	sbrs	r22, 0
    1916:	1b c0       	rjmp	.+54     	; 0x194e <__floatsisf+0x6c>
    1918:	6f 5f       	subi	r22, 0xFF	; 255
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	8f 4f       	sbci	r24, 0xFF	; 255
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	16 c0       	rjmp	.+44     	; 0x194e <__floatsisf+0x6c>
    1922:	88 23       	and	r24, r24
    1924:	11 f0       	breq	.+4      	; 0x192a <__floatsisf+0x48>
    1926:	96 e9       	ldi	r25, 0x96	; 150
    1928:	11 c0       	rjmp	.+34     	; 0x194c <__floatsisf+0x6a>
    192a:	77 23       	and	r23, r23
    192c:	21 f0       	breq	.+8      	; 0x1936 <__floatsisf+0x54>
    192e:	9e e8       	ldi	r25, 0x8E	; 142
    1930:	87 2f       	mov	r24, r23
    1932:	76 2f       	mov	r23, r22
    1934:	05 c0       	rjmp	.+10     	; 0x1940 <__floatsisf+0x5e>
    1936:	66 23       	and	r22, r22
    1938:	71 f0       	breq	.+28     	; 0x1956 <__floatsisf+0x74>
    193a:	96 e8       	ldi	r25, 0x86	; 134
    193c:	86 2f       	mov	r24, r22
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	2a f0       	brmi	.+10     	; 0x194e <__floatsisf+0x6c>
    1944:	9a 95       	dec	r25
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	da f7       	brpl	.-10     	; 0x1944 <__floatsisf+0x62>
    194e:	88 0f       	add	r24, r24
    1950:	96 95       	lsr	r25
    1952:	87 95       	ror	r24
    1954:	97 f9       	bld	r25, 7
    1956:	08 95       	ret

00001958 <__fp_inf>:
    1958:	97 f9       	bld	r25, 7
    195a:	9f 67       	ori	r25, 0x7F	; 127
    195c:	80 e8       	ldi	r24, 0x80	; 128
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	08 95       	ret

00001964 <__fp_nan>:
    1964:	9f ef       	ldi	r25, 0xFF	; 255
    1966:	80 ec       	ldi	r24, 0xC0	; 192
    1968:	08 95       	ret

0000196a <__fp_pscA>:
    196a:	00 24       	eor	r0, r0
    196c:	0a 94       	dec	r0
    196e:	16 16       	cp	r1, r22
    1970:	17 06       	cpc	r1, r23
    1972:	18 06       	cpc	r1, r24
    1974:	09 06       	cpc	r0, r25
    1976:	08 95       	ret

00001978 <__fp_pscB>:
    1978:	00 24       	eor	r0, r0
    197a:	0a 94       	dec	r0
    197c:	12 16       	cp	r1, r18
    197e:	13 06       	cpc	r1, r19
    1980:	14 06       	cpc	r1, r20
    1982:	05 06       	cpc	r0, r21
    1984:	08 95       	ret

00001986 <__fp_round>:
    1986:	09 2e       	mov	r0, r25
    1988:	03 94       	inc	r0
    198a:	00 0c       	add	r0, r0
    198c:	11 f4       	brne	.+4      	; 0x1992 <__fp_round+0xc>
    198e:	88 23       	and	r24, r24
    1990:	52 f0       	brmi	.+20     	; 0x19a6 <__fp_round+0x20>
    1992:	bb 0f       	add	r27, r27
    1994:	40 f4       	brcc	.+16     	; 0x19a6 <__fp_round+0x20>
    1996:	bf 2b       	or	r27, r31
    1998:	11 f4       	brne	.+4      	; 0x199e <__fp_round+0x18>
    199a:	60 ff       	sbrs	r22, 0
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <__fp_round+0x20>
    199e:	6f 5f       	subi	r22, 0xFF	; 255
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	8f 4f       	sbci	r24, 0xFF	; 255
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	08 95       	ret

000019a8 <__fp_split3>:
    19a8:	57 fd       	sbrc	r21, 7
    19aa:	90 58       	subi	r25, 0x80	; 128
    19ac:	44 0f       	add	r20, r20
    19ae:	55 1f       	adc	r21, r21
    19b0:	59 f0       	breq	.+22     	; 0x19c8 <__fp_splitA+0x10>
    19b2:	5f 3f       	cpi	r21, 0xFF	; 255
    19b4:	71 f0       	breq	.+28     	; 0x19d2 <__fp_splitA+0x1a>
    19b6:	47 95       	ror	r20

000019b8 <__fp_splitA>:
    19b8:	88 0f       	add	r24, r24
    19ba:	97 fb       	bst	r25, 7
    19bc:	99 1f       	adc	r25, r25
    19be:	61 f0       	breq	.+24     	; 0x19d8 <__fp_splitA+0x20>
    19c0:	9f 3f       	cpi	r25, 0xFF	; 255
    19c2:	79 f0       	breq	.+30     	; 0x19e2 <__fp_splitA+0x2a>
    19c4:	87 95       	ror	r24
    19c6:	08 95       	ret
    19c8:	12 16       	cp	r1, r18
    19ca:	13 06       	cpc	r1, r19
    19cc:	14 06       	cpc	r1, r20
    19ce:	55 1f       	adc	r21, r21
    19d0:	f2 cf       	rjmp	.-28     	; 0x19b6 <__fp_split3+0xe>
    19d2:	46 95       	lsr	r20
    19d4:	f1 df       	rcall	.-30     	; 0x19b8 <__fp_splitA>
    19d6:	08 c0       	rjmp	.+16     	; 0x19e8 <__fp_splitA+0x30>
    19d8:	16 16       	cp	r1, r22
    19da:	17 06       	cpc	r1, r23
    19dc:	18 06       	cpc	r1, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	f1 cf       	rjmp	.-30     	; 0x19c4 <__fp_splitA+0xc>
    19e2:	86 95       	lsr	r24
    19e4:	71 05       	cpc	r23, r1
    19e6:	61 05       	cpc	r22, r1
    19e8:	08 94       	sec
    19ea:	08 95       	ret

000019ec <__fp_zero>:
    19ec:	e8 94       	clt

000019ee <__fp_szero>:
    19ee:	bb 27       	eor	r27, r27
    19f0:	66 27       	eor	r22, r22
    19f2:	77 27       	eor	r23, r23
    19f4:	cb 01       	movw	r24, r22
    19f6:	97 f9       	bld	r25, 7
    19f8:	08 95       	ret

000019fa <__mulsf3>:
    19fa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__mulsf3x>
    19fe:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__fp_round>
    1a02:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_pscA>
    1a06:	38 f0       	brcs	.+14     	; 0x1a16 <__mulsf3+0x1c>
    1a08:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fp_pscB>
    1a0c:	20 f0       	brcs	.+8      	; 0x1a16 <__mulsf3+0x1c>
    1a0e:	95 23       	and	r25, r21
    1a10:	11 f0       	breq	.+4      	; 0x1a16 <__mulsf3+0x1c>
    1a12:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_inf>
    1a16:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__fp_nan>
    1a1a:	11 24       	eor	r1, r1
    1a1c:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__fp_szero>

00001a20 <__mulsf3x>:
    1a20:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__fp_split3>
    1a24:	70 f3       	brcs	.-36     	; 0x1a02 <__mulsf3+0x8>

00001a26 <__mulsf3_pse>:
    1a26:	95 9f       	mul	r25, r21
    1a28:	c1 f3       	breq	.-16     	; 0x1a1a <__mulsf3+0x20>
    1a2a:	95 0f       	add	r25, r21
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	55 1f       	adc	r21, r21
    1a30:	62 9f       	mul	r22, r18
    1a32:	f0 01       	movw	r30, r0
    1a34:	72 9f       	mul	r23, r18
    1a36:	bb 27       	eor	r27, r27
    1a38:	f0 0d       	add	r31, r0
    1a3a:	b1 1d       	adc	r27, r1
    1a3c:	63 9f       	mul	r22, r19
    1a3e:	aa 27       	eor	r26, r26
    1a40:	f0 0d       	add	r31, r0
    1a42:	b1 1d       	adc	r27, r1
    1a44:	aa 1f       	adc	r26, r26
    1a46:	64 9f       	mul	r22, r20
    1a48:	66 27       	eor	r22, r22
    1a4a:	b0 0d       	add	r27, r0
    1a4c:	a1 1d       	adc	r26, r1
    1a4e:	66 1f       	adc	r22, r22
    1a50:	82 9f       	mul	r24, r18
    1a52:	22 27       	eor	r18, r18
    1a54:	b0 0d       	add	r27, r0
    1a56:	a1 1d       	adc	r26, r1
    1a58:	62 1f       	adc	r22, r18
    1a5a:	73 9f       	mul	r23, r19
    1a5c:	b0 0d       	add	r27, r0
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	62 1f       	adc	r22, r18
    1a62:	83 9f       	mul	r24, r19
    1a64:	a0 0d       	add	r26, r0
    1a66:	61 1d       	adc	r22, r1
    1a68:	22 1f       	adc	r18, r18
    1a6a:	74 9f       	mul	r23, r20
    1a6c:	33 27       	eor	r19, r19
    1a6e:	a0 0d       	add	r26, r0
    1a70:	61 1d       	adc	r22, r1
    1a72:	23 1f       	adc	r18, r19
    1a74:	84 9f       	mul	r24, r20
    1a76:	60 0d       	add	r22, r0
    1a78:	21 1d       	adc	r18, r1
    1a7a:	82 2f       	mov	r24, r18
    1a7c:	76 2f       	mov	r23, r22
    1a7e:	6a 2f       	mov	r22, r26
    1a80:	11 24       	eor	r1, r1
    1a82:	9f 57       	subi	r25, 0x7F	; 127
    1a84:	50 40       	sbci	r21, 0x00	; 0
    1a86:	9a f0       	brmi	.+38     	; 0x1aae <__mulsf3_pse+0x88>
    1a88:	f1 f0       	breq	.+60     	; 0x1ac6 <__mulsf3_pse+0xa0>
    1a8a:	88 23       	and	r24, r24
    1a8c:	4a f0       	brmi	.+18     	; 0x1aa0 <__mulsf3_pse+0x7a>
    1a8e:	ee 0f       	add	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	bb 1f       	adc	r27, r27
    1a94:	66 1f       	adc	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	88 1f       	adc	r24, r24
    1a9a:	91 50       	subi	r25, 0x01	; 1
    1a9c:	50 40       	sbci	r21, 0x00	; 0
    1a9e:	a9 f7       	brne	.-22     	; 0x1a8a <__mulsf3_pse+0x64>
    1aa0:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	80 f0       	brcs	.+32     	; 0x1ac6 <__mulsf3_pse+0xa0>
    1aa6:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_inf>
    1aaa:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__fp_szero>
    1aae:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab0:	e4 f3       	brlt	.-8      	; 0x1aaa <__mulsf3_pse+0x84>
    1ab2:	98 3e       	cpi	r25, 0xE8	; 232
    1ab4:	d4 f3       	brlt	.-12     	; 0x1aaa <__mulsf3_pse+0x84>
    1ab6:	86 95       	lsr	r24
    1ab8:	77 95       	ror	r23
    1aba:	67 95       	ror	r22
    1abc:	b7 95       	ror	r27
    1abe:	f7 95       	ror	r31
    1ac0:	e7 95       	ror	r30
    1ac2:	9f 5f       	subi	r25, 0xFF	; 255
    1ac4:	c1 f7       	brne	.-16     	; 0x1ab6 <__mulsf3_pse+0x90>
    1ac6:	fe 2b       	or	r31, r30
    1ac8:	88 0f       	add	r24, r24
    1aca:	91 1d       	adc	r25, r1
    1acc:	96 95       	lsr	r25
    1ace:	87 95       	ror	r24
    1ad0:	97 f9       	bld	r25, 7
    1ad2:	08 95       	ret

00001ad4 <_exit>:
    1ad4:	f8 94       	cli

00001ad6 <__stop_program>:
    1ad6:	ff cf       	rjmp	.-2      	; 0x1ad6 <__stop_program>
