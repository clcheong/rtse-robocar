
robocarChatGPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00001abc  00001b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ad  00800252  00800252  00001ca2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000031  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017b8  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000918  00000000  00000000  00003648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d0a  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000fc  00000000  00000000  00004c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000723  00000000  00000000  00004d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000479  00000000  00000000  0000548b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00005904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec eb       	ldi	r30, 0xBC	; 188
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 35       	cpi	r26, 0x52	; 82
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a2 e5       	ldi	r26, 0x52	; 82
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3f       	cpi	r26, 0xFF	; 255
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <main>
      9e:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
            cprintf("Obstacle Detected\n");
      a6:	c9 e1       	ldi	r28, 0x19	; 25
      a8:	d2 e0       	ldi	r29, 0x02	; 2
            myrobot.obstacle = 1;  
      aa:	11 e0       	ldi	r17, 0x01	; 1
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
      ac:	0e 94 a1 04 	call	0x942	; 0x942 <robo_proxSensor>
      b0:	01 97       	sbiw	r24, 0x01	; 1
      b2:	81 f4       	brne	.+32     	; 0xd4 <CheckCollision+0x2e>
            cprintf("Obstacle Detected\n");
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <cprintf>
            myrobot.obstacle = 1;  
      bc:	10 93 d6 02 	sts	0x02D6, r17	; 0x8002d6 <myrobot+0x4>
      c0:	0f 90       	pop	r0
      c2:	0f 90       	pop	r0
        }                                           /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 15);                /* Task period ~ 100 ms              */
      c4:	2f e0       	ldi	r18, 0x0F	; 15
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	80 e0       	ldi	r24, 0x00	; 0
      ce:	0e 94 6d 0a 	call	0x14da	; 0x14da <OSTimeDlyHMSM>
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) ){             /* obstacle?                         */
      d2:	ec cf       	rjmp	.-40     	; 0xac <CheckCollision+0x6>
            cprintf("Obstacle Detected\n");
            myrobot.obstacle = 1;  
        }                                           /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      d4:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <myrobot+0x4>
      d8:	f5 cf       	rjmp	.-22     	; 0xc4 <CheckCollision+0x1e>

000000da <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      da:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <myrobot>
      de:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <myrobot+0x1>
      e2:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <myrobot+0x2>
      e6:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <myrobot+0x3>
      ea:	0e 94 46 04 	call	0x88c	; 0x88c <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 20);                /* Task period ~ 250 ms              */
      ee:	24 e1       	ldi	r18, 0x14	; 20
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	0e 94 6d 0a 	call	0x14da	; 0x14da <OSTimeDlyHMSM>
      fc:	ee cf       	rjmp	.-36     	; 0xda <CntrlMotors>

000000fe <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    cprintf("Task Start\n");
      fe:	8c e2       	ldi	r24, 0x2C	; 44
     100:	92 e0       	ldi	r25, 0x02	; 2
     102:	9f 93       	push	r25
     104:	8f 93       	push	r24
     106:	0e 94 3f 05 	call	0xa7e	; 0xa7e <cprintf>

    OS_ticks_init();                                        /* enable RTOS timer tick        */
     10a:	0e 94 14 05 	call	0xa28	; 0xa28 <OS_ticks_init>

    OSTaskCreate(Navig,                                     /* Task function                 */
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	4a e7       	ldi	r20, 0x7A	; 122
     112:	54 e0       	ldi	r21, 0x04	; 4
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	8e e7       	ldi	r24, 0x7E	; 126
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 1c 09 	call	0x1238	; 0x1238 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

    OSTaskCreate(CheckCollision,                            /* Task function                 */
     120:	22 e0       	ldi	r18, 0x02	; 2
     122:	41 ed       	ldi	r20, 0xD1	; 209
     124:	52 e0       	ldi	r21, 0x02	; 2
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	83 e5       	ldi	r24, 0x53	; 83
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 1c 09 	call	0x1238	; 0x1238 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     132:	22 e0       	ldi	r18, 0x02	; 2
     134:	4a e7       	ldi	r20, 0x7A	; 122
     136:	53 e0       	ldi	r21, 0x03	; 3
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	8d e6       	ldi	r24, 0x6D	; 109
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 1c 09 	call	0x1238	; 0x1238 <OSTaskCreate>
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0



    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	45 e0       	ldi	r20, 0x05	; 5
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	0e 94 6d 0a 	call	0x14da	; 0x14da <OSTimeDlyHMSM>
     156:	f8 cf       	rjmp	.-16     	; 0x148 <TaskStart+0x4a>

00000158 <constrain>:
    int inBlackBox;
    int turn;
} myrobot;

int constrain(int value, int lowerBound, int upperBound) {
    if (value < lowerBound) {
     158:	86 17       	cp	r24, r22
     15a:	97 07       	cpc	r25, r23
     15c:	2c f0       	brlt	.+10     	; 0x168 <constrain+0x10>
     15e:	bc 01       	movw	r22, r24
     160:	48 17       	cp	r20, r24
     162:	59 07       	cpc	r21, r25
     164:	0c f4       	brge	.+2      	; 0x168 <constrain+0x10>
     166:	ba 01       	movw	r22, r20
        return upperBound;
    }
    else {
        return value;
    }
}
     168:	cb 01       	movw	r24, r22
     16a:	08 95       	ret

0000016c <absoluteValue>:

int absoluteValue(int num) {
     16c:	97 ff       	sbrs	r25, 7
     16e:	03 c0       	rjmp	.+6      	; 0x176 <absoluteValue+0xa>
     170:	91 95       	neg	r25
     172:	81 95       	neg	r24
     174:	91 09       	sbc	r25, r1
    if (num < 0)
        return -num;
    else
        return num;
}
     176:	08 95       	ret

00000178 <pidControl>:

void pidControl(int sense) {
     178:	4f 92       	push	r4
     17a:	5f 92       	push	r5
     17c:	6f 92       	push	r6
     17e:	7f 92       	push	r7
     180:	8f 92       	push	r8
     182:	9f 92       	push	r9
     184:	af 92       	push	r10
     186:	bf 92       	push	r11
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inLightField == 1) {
     190:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <myrobot+0x23>
     194:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <myrobot+0x24>
     198:	21 30       	cpi	r18, 0x01	; 1
     19a:	31 05       	cpc	r19, r1
     19c:	61 f4       	brne	.+24     	; 0x1b6 <pidControl+0x3e>
        myrobot.KP = 0.065;
     19e:	48 eb       	ldi	r20, 0xB8	; 184
     1a0:	5e e1       	ldi	r21, 0x1E	; 30
     1a2:	65 e8       	ldi	r22, 0x85	; 133
     1a4:	7d e3       	ldi	r23, 0x3D	; 61
     1a6:	40 93 d7 02 	sts	0x02D7, r20	; 0x8002d7 <myrobot+0x5>
     1aa:	50 93 d8 02 	sts	0x02D8, r21	; 0x8002d8 <myrobot+0x6>
     1ae:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <myrobot+0x7>
     1b2:	70 93 da 02 	sts	0x02DA, r23	; 0x8002da <myrobot+0x8>
    // } else {
    //     motorSpeed = DEFAULT_MOTOR_SPEED;
    //     myrobot.KP = DEFAULT_KP; 
    // }

    int error = myrobot.goal - sense;
     1b6:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <myrobot+0x19>
     1ba:	70 91 ec 02 	lds	r23, 0x02EC	; 0x8002ec <myrobot+0x1a>
     1be:	68 1b       	sub	r22, r24
     1c0:	79 0b       	sbc	r23, r25

    myrobot.integral = myrobot.integral + error;
     1c2:	07 2e       	mov	r0, r23
     1c4:	00 0c       	add	r0, r0
     1c6:	88 0b       	sbc	r24, r24
     1c8:	99 0b       	sbc	r25, r25
     1ca:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__floatsisf>
     1ce:	6b 01       	movw	r12, r22
     1d0:	7c 01       	movw	r14, r24
     1d2:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <myrobot+0x15>
     1d6:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <myrobot+0x16>
     1da:	40 91 e9 02 	lds	r20, 0x02E9	; 0x8002e9 <myrobot+0x17>
     1de:	50 91 ea 02 	lds	r21, 0x02EA	; 0x8002ea <myrobot+0x18>
     1e2:	0e 94 bf 0b 	call	0x177e	; 0x177e <__addsf3>
     1e6:	4b 01       	movw	r8, r22
     1e8:	5c 01       	movw	r10, r24
     1ea:	80 92 e7 02 	sts	0x02E7, r8	; 0x8002e7 <myrobot+0x15>
     1ee:	90 92 e8 02 	sts	0x02E8, r9	; 0x8002e8 <myrobot+0x16>
     1f2:	a0 92 e9 02 	sts	0x02E9, r10	; 0x8002e9 <myrobot+0x17>
     1f6:	b0 92 ea 02 	sts	0x02EA, r11	; 0x8002ea <myrobot+0x18>
    //     myrobot.turn += 1;
    // }


    // Calculate motor adjustments
    int adjustment = (myrobot.KP * error) + (myrobot.KI * (myrobot.integral)) + (myrobot.KD * (error - myrobot.lastError));
     1fa:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <myrobot+0x5>
     1fe:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <myrobot+0x6>
     202:	40 91 d9 02 	lds	r20, 0x02D9	; 0x8002d9 <myrobot+0x7>
     206:	50 91 da 02 	lds	r21, 0x02DA	; 0x8002da <myrobot+0x8>
     20a:	c7 01       	movw	r24, r14
     20c:	b6 01       	movw	r22, r12
     20e:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsf3>
     212:	2b 01       	movw	r4, r22
     214:	3c 01       	movw	r6, r24
     216:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <myrobot+0xd>
     21a:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <myrobot+0xe>
     21e:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <myrobot+0xf>
     222:	50 91 e2 02 	lds	r21, 0x02E2	; 0x8002e2 <myrobot+0x10>
     226:	c5 01       	movw	r24, r10
     228:	b4 01       	movw	r22, r8
     22a:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsf3>
     22e:	9b 01       	movw	r18, r22
     230:	ac 01       	movw	r20, r24
     232:	c3 01       	movw	r24, r6
     234:	b2 01       	movw	r22, r4
     236:	0e 94 bf 0b 	call	0x177e	; 0x177e <__addsf3>
     23a:	4b 01       	movw	r8, r22
     23c:	5c 01       	movw	r10, r24
     23e:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <myrobot+0x11>
     242:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <myrobot+0x12>
     246:	40 91 e5 02 	lds	r20, 0x02E5	; 0x8002e5 <myrobot+0x13>
     24a:	50 91 e6 02 	lds	r21, 0x02E6	; 0x8002e6 <myrobot+0x14>
     24e:	c7 01       	movw	r24, r14
     250:	b6 01       	movw	r22, r12
     252:	0e 94 be 0b 	call	0x177c	; 0x177c <__subsf3>
     256:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <myrobot+0x9>
     25a:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <myrobot+0xa>
     25e:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <myrobot+0xb>
     262:	50 91 de 02 	lds	r21, 0x02DE	; 0x8002de <myrobot+0xc>
     266:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsf3>
     26a:	9b 01       	movw	r18, r22
     26c:	ac 01       	movw	r20, r24
     26e:	c5 01       	movw	r24, r10
     270:	b4 01       	movw	r22, r8
     272:	0e 94 bf 0b 	call	0x177e	; 0x177e <__addsf3>
     276:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixsfsi>

    // Store error for the next iteration
    myrobot.lastError = error;
     27a:	c0 92 e3 02 	sts	0x02E3, r12	; 0x8002e3 <myrobot+0x11>
     27e:	d0 92 e4 02 	sts	0x02E4, r13	; 0x8002e4 <myrobot+0x12>
     282:	e0 92 e5 02 	sts	0x02E5, r14	; 0x8002e5 <myrobot+0x13>
     286:	f0 92 e6 02 	sts	0x02E6, r15	; 0x8002e6 <myrobot+0x14>

    // Adjust motors
    myrobot.lspeed = constrain((motorSpeed - adjustment), -100 , 100);
     28a:	29 e1       	ldi	r18, 0x19	; 25
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	26 1b       	sub	r18, r22
     290:	37 0b       	sbc	r19, r23
     292:	25 36       	cpi	r18, 0x65	; 101
     294:	31 05       	cpc	r19, r1
     296:	14 f0       	brlt	.+4      	; 0x29c <pidControl+0x124>
     298:	24 e6       	ldi	r18, 0x64	; 100
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	2c 39       	cpi	r18, 0x9C	; 156
     29e:	4f ef       	ldi	r20, 0xFF	; 255
     2a0:	34 07       	cpc	r19, r20
     2a2:	14 f4       	brge	.+4      	; 0x2a8 <pidControl+0x130>
     2a4:	2c e9       	ldi	r18, 0x9C	; 156
     2a6:	3f ef       	ldi	r19, 0xFF	; 255
     2a8:	30 93 d5 02 	sts	0x02D5, r19	; 0x8002d5 <myrobot+0x3>
     2ac:	20 93 d4 02 	sts	0x02D4, r18	; 0x8002d4 <myrobot+0x2>
    myrobot.rspeed = constrain((motorSpeed + adjustment), -100 , 100);
     2b0:	67 5e       	subi	r22, 0xE7	; 231
     2b2:	7f 4f       	sbci	r23, 0xFF	; 255
     2b4:	65 36       	cpi	r22, 0x65	; 101
     2b6:	71 05       	cpc	r23, r1
     2b8:	14 f0       	brlt	.+4      	; 0x2be <pidControl+0x146>
     2ba:	64 e6       	ldi	r22, 0x64	; 100
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	6c 39       	cpi	r22, 0x9C	; 156
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	78 07       	cpc	r23, r24
     2c4:	14 f4       	brge	.+4      	; 0x2ca <pidControl+0x152>
     2c6:	6c e9       	ldi	r22, 0x9C	; 156
     2c8:	7f ef       	ldi	r23, 0xFF	; 255
     2ca:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <myrobot+0x1>
     2ce:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <myrobot>
    

    myrobot.prevLeftSpeed = myrobot.lspeed;
     2d2:	30 93 ee 02 	sts	0x02EE, r19	; 0x8002ee <myrobot+0x1c>
     2d6:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <myrobot+0x1b>
    myrobot.prevRightSpeed = myrobot.rspeed;
     2da:	70 93 f0 02 	sts	0x02F0, r23	; 0x8002f0 <myrobot+0x1e>
     2de:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <myrobot+0x1d>
}
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	bf 90       	pop	r11
     2ec:	af 90       	pop	r10
     2ee:	9f 90       	pop	r9
     2f0:	8f 90       	pop	r8
     2f2:	7f 90       	pop	r7
     2f4:	6f 90       	pop	r6
     2f6:	5f 90       	pop	r5
     2f8:	4f 90       	pop	r4
     2fa:	08 95       	ret

000002fc <Navig>:

void Navig (void *data)
{
    

    int pressCount = 0;
     2fc:	51 2c       	mov	r5, r1
     2fe:	41 2c       	mov	r4, r1
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     300:	c2 ee       	ldi	r28, 0xE2	; 226
     302:	df ef       	ldi	r29, 0xFF	; 255

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     304:	01 e4       	ldi	r16, 0x41	; 65
     306:	10 e0       	ldi	r17, 0x00	; 0

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     308:	6d ed       	ldi	r22, 0xDD	; 221
     30a:	e6 2e       	mov	r14, r22
     30c:	ff 24       	eor	r15, r15
     30e:	fa 94       	dec	r15
                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
     310:	7d e2       	ldi	r23, 0x2D	; 45
     312:	67 2e       	mov	r6, r23
     314:	71 2c       	mov	r7, r1

            } else {

                // normal mode
                switch (sensorValue) {
                    case 2: myrobot.lspeed = 50;
     316:	e2 e3       	ldi	r30, 0x32	; 50
     318:	ce 2e       	mov	r12, r30
     31a:	d1 2c       	mov	r13, r1
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
                            break;

                    case 0: myrobot.lspeed = 30;
     31c:	fe e1       	ldi	r31, 0x1E	; 30
     31e:	8f 2e       	mov	r8, r31
     320:	91 2c       	mov	r9, r1
                            myrobot.rspeed = 60;
     322:	ac e3       	ldi	r26, 0x3C	; 60
     324:	2a 2e       	mov	r2, r26
     326:	31 2c       	mov	r3, r1

    int pressCount = 0;
    for (;;)
    {

        cprintf("Navigate\n");
     328:	88 e3       	ldi	r24, 0x38	; 56
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	0e 94 3f 05 	call	0xa7e	; 0xa7e <cprintf>
		// {
		// 	myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
        //     myrobot.lspeed   =  LOW_SPEED;
		// }

        int lightSense = robo_lightSensor();
     334:	0e 94 ad 04 	call	0x95a	; 0x95a <robo_lightSensor>
     338:	5c 01       	movw	r10, r24

        if(robo_goPressed() != NULL){
     33a:	0e 94 08 05 	call	0xa10	; 0xa10 <robo_goPressed>
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	88 23       	and	r24, r24
     344:	19 f1       	breq	.+70     	; 0x38c <Navig+0x90>

            while(robo_goPressed() != NULL);
     346:	0e 94 08 05 	call	0xa10	; 0xa10 <robo_goPressed>
     34a:	81 11       	cpse	r24, r1
     34c:	fc cf       	rjmp	.-8      	; 0x346 <Navig+0x4a>

            pressCount++;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	48 1a       	sub	r4, r24
     352:	58 0a       	sbc	r5, r24
            if (pressCount >= 5){
     354:	95 e0       	ldi	r25, 0x05	; 5
     356:	49 16       	cp	r4, r25
     358:	51 04       	cpc	r5, r1
     35a:	64 f1       	brlt	.+88     	; 0x3b4 <Navig+0xb8>
                myrobot.inBlackBox = 1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <myrobot+0x26>
     364:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <myrobot+0x25>
                } else {
                    myrobot.inRoundabout = 0;
                }
            }

            if(myrobot.inBlackBox == 1){
     368:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <myrobot+0x25>
     36c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <myrobot+0x26>
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	11 f4       	brne	.+4      	; 0x378 <Navig+0x7c>
                robo_Honk();
     374:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <robo_Honk>
            }
            
            if (myrobot.inBlackBox == 0) {
     378:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <myrobot+0x25>
     37c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <myrobot+0x26>
     380:	89 2b       	or	r24, r25
     382:	21 f4       	brne	.+8      	; 0x38c <Navig+0x90>
                robo_LED_toggle();
     384:	85 b1       	in	r24, 0x05	; 5
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	89 27       	eor	r24, r25
     38a:	85 b9       	out	0x05, r24	; 5
            }

        }


        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
     38c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <myrobot+0x4>
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	09 f0       	breq	.+2      	; 0x396 <Navig+0x9a>
     394:	4e c0       	rjmp	.+156    	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
     396:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <myrobot+0x23>
     39a:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <myrobot+0x24>
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	09 f5       	brne	.+66     	; 0x3e4 <Navig+0xe8>
            myrobot.lspeed = 0;
     3a2:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <myrobot+0x3>
     3a6:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = 0;
     3aa:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <myrobot+0x1>
     3ae:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <myrobot>
     3b2:	ba cf       	rjmp	.-140    	; 0x328 <Navig+0x2c>

            pressCount++;
            if (pressCount >= 5){
                myrobot.inBlackBox = 1;
            } else {
                if (myrobot.inRoundabout == 0 && myrobot.inBlackBox == 0) {
     3b4:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <myrobot+0x1f>
     3b8:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <myrobot+0x20>
     3bc:	89 2b       	or	r24, r25
     3be:	69 f4       	brne	.+26     	; 0x3da <Navig+0xde>
     3c0:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <myrobot+0x25>
     3c4:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <myrobot+0x26>
     3c8:	89 2b       	or	r24, r25
     3ca:	39 f4       	brne	.+14     	; 0x3da <Navig+0xde>
                    myrobot.inRoundabout = 1;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <myrobot+0x20>
     3d4:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <myrobot+0x1f>
     3d8:	c7 cf       	rjmp	.-114    	; 0x368 <Navig+0x6c>
                } else {
                    myrobot.inRoundabout = 0;
     3da:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x20>
     3de:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x1f>
     3e2:	c2 cf       	rjmp	.-124    	; 0x368 <Navig+0x6c>
        if (myrobot.obstacle == 1 && myrobot.inLightField == 1) {
            myrobot.lspeed = 0;
            myrobot.rspeed = 0;
        } else if (myrobot.obstacle == 1) {

            myrobot.inLightField = 0;
     3e4:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <myrobot+0x24>
     3e8:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <myrobot+0x23>
            myrobot.inRoundabout = 0;
     3ec:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x20>
     3f0:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x1f>
            myrobot.lspeed = 30;
     3f4:	90 92 d5 02 	sts	0x02D5, r9	; 0x8002d5 <myrobot+0x3>
     3f8:	80 92 d4 02 	sts	0x02D4, r8	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = -30;
     3fc:	d0 93 d3 02 	sts	0x02D3, r29	; 0x8002d3 <myrobot+0x1>
     400:	c0 93 d2 02 	sts	0x02D2, r28	; 0x8002d2 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 800); // TUNE HERE
     404:	20 e2       	ldi	r18, 0x20	; 32
     406:	33 e0       	ldi	r19, 0x03	; 3
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 6d 0a 	call	0x14da	; 0x14da <OSTimeDlyHMSM>

            myrobot.lspeed = 60;
     412:	30 92 d5 02 	sts	0x02D5, r3	; 0x8002d5 <myrobot+0x3>
     416:	20 92 d4 02 	sts	0x02D4, r2	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = 60;
     41a:	30 92 d3 02 	sts	0x02D3, r3	; 0x8002d3 <myrobot+0x1>
     41e:	20 92 d2 02 	sts	0x02D2, r2	; 0x8002d2 <myrobot>
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE
     422:	20 e2       	ldi	r18, 0x20	; 32
     424:	33 e0       	ldi	r19, 0x03	; 3
     426:	41 e0       	ldi	r20, 0x01	; 1
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 25);                /* Task period ~ 500 ms                  */
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 6d 0a 	call	0x14da	; 0x14da <OSTimeDlyHMSM>
     430:	7b cf       	rjmp	.-266    	; 0x328 <Navig+0x2c>

            myrobot.lspeed = 60;
            myrobot.rspeed = 60;
            OSTimeDlyHMSM(0, 0, 1, 800); // TUNE HERE

        } else if (lightSense >= 85 && myrobot.inLightField == 0) {
     432:	95 e5       	ldi	r25, 0x55	; 85
     434:	a9 16       	cp	r10, r25
     436:	b1 04       	cpc	r11, r1
     438:	cc f1       	brlt	.+114    	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
     43a:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <myrobot+0x23>
     43e:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <myrobot+0x24>
     442:	89 2b       	or	r24, r25
     444:	99 f5       	brne	.+102    	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>

            cprintf("Light Detected\n");
     446:	82 e4       	ldi	r24, 0x42	; 66
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <cprintf>

            myrobot.inRoundabout = 0;
     452:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x20>
     456:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x1f>
            myrobot.inLightField = 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <myrobot+0x24>
     462:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <myrobot+0x23>
            myrobot.lspeed = 30;
     466:	90 92 d5 02 	sts	0x02D5, r9	; 0x8002d5 <myrobot+0x3>
     46a:	80 92 d4 02 	sts	0x02D4, r8	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = 30;
     46e:	90 92 d3 02 	sts	0x02D3, r9	; 0x8002d3 <myrobot+0x1>
     472:	80 92 d2 02 	sts	0x02D2, r8	; 0x8002d2 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 600); // TUNE HERE
     476:	28 e5       	ldi	r18, 0x58	; 88
     478:	32 e0       	ldi	r19, 0x02	; 2
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 6d 0a 	call	0x14da	; 0x14da <OSTimeDlyHMSM>

            myrobot.lspeed = -65;
     484:	8f eb       	ldi	r24, 0xBF	; 191
     486:	9f ef       	ldi	r25, 0xFF	; 255
     488:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <myrobot+0x3>
     48c:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <myrobot+0x2>
            myrobot.rspeed = 65;
     490:	10 93 d3 02 	sts	0x02D3, r17	; 0x8002d3 <myrobot+0x1>
     494:	00 93 d2 02 	sts	0x02D2, r16	; 0x8002d2 <myrobot>
            OSTimeDlyHMSM(0, 0, 0, 200); // TUNE HERE
     498:	28 ec       	ldi	r18, 0xC8	; 200
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 6d 0a 	call	0x14da	; 0x14da <OSTimeDlyHMSM>
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	3e cf       	rjmp	.-388    	; 0x328 <Navig+0x2c>
        } else {

            int sense = myrobot.goal;
     4ac:	a0 90 eb 02 	lds	r10, 0x02EB	; 0x8002eb <myrobot+0x19>
     4b0:	b0 90 ec 02 	lds	r11, 0x02EC	; 0x8002ec <myrobot+0x1a>

            int sensorValue = robo_lineSensor();
     4b4:	0e 94 c4 04 	call	0x988	; 0x988 <robo_lineSensor>
     4b8:	fc 01       	movw	r30, r24

            // if(sensorValue == 100) {
            if(myrobot.inRoundabout == 1) {
     4ba:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <myrobot+0x1f>
     4be:	30 91 f2 02 	lds	r19, 0x02F2	; 0x8002f2 <myrobot+0x20>
     4c2:	21 30       	cpi	r18, 0x01	; 1
     4c4:	31 05       	cpc	r19, r1
     4c6:	f9 f4       	brne	.+62     	; 0x506 <__FUSE_REGION_LENGTH__+0x106>

                // roundabout mode

                switch (sensorValue) {
     4c8:	08 97       	sbiw	r24, 0x08	; 8
     4ca:	08 f0       	brcs	.+2      	; 0x4ce <__FUSE_REGION_LENGTH__+0xce>
     4cc:	47 c0       	rjmp	.+142    	; 0x55c <__FUSE_REGION_LENGTH__+0x15c>
     4ce:	e5 59       	subi	r30, 0x95	; 149
     4d0:	fd 4f       	sbci	r31, 0xFD	; 253
     4d2:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__tablejump2__>
     4d6:	b7 02       	muls	r27, r23
     4d8:	b7 02       	muls	r27, r23
     4da:	9c 02       	muls	r25, r28
     4dc:	73 02       	muls	r23, r19
     4de:	a6 02       	muls	r26, r22
     4e0:	9c 02       	muls	r25, r28
     4e2:	7e 02       	muls	r23, r30
     4e4:	b7 02       	muls	r27, r23
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 1500;
     4e6:	5c ed       	ldi	r21, 0xDC	; 220
     4e8:	a5 2e       	mov	r10, r21
     4ea:	55 e0       	ldi	r21, 0x05	; 5
     4ec:	b5 2e       	mov	r11, r21
                    default: myrobot.lspeed = -30;
                             myrobot.rspeed = -30;
                             break;
                }

                pidControl(sense);
     4ee:	c5 01       	movw	r24, r10
     4f0:	0e 94 bc 00 	call	0x178	; 0x178 <pidControl>
                }


            }

            OSTimeDlyHMSM(0, 0, 0, 25);                /* Task period ~ 500 ms                  */
     4f4:	29 e1       	ldi	r18, 0x19	; 25
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	96 cf       	rjmp	.-212    	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
                            break;

                    case 5: sense = 1000;
                            break;

                    case 6: sense = 500;
     4fc:	44 ef       	ldi	r20, 0xF4	; 244
     4fe:	a4 2e       	mov	r10, r20
     500:	bb 24       	eor	r11, r11
     502:	b3 94       	inc	r11
                            break;
     504:	f4 cf       	rjmp	.-24     	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
                // myrobot.rspeed = - (myrobot.prevLeftSpeed * 1.1);
                
                //myrobot.lspeed = - 40;
               // myrobot.rspeed = - 30;

            } else if (myrobot.inLightField == 1) {
     506:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <myrobot+0x23>
     50a:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <myrobot+0x24>
     50e:	21 30       	cpi	r18, 0x01	; 1
     510:	31 05       	cpc	r19, r1
     512:	91 f5       	brne	.+100    	; 0x578 <__FUSE_REGION_LENGTH__+0x178>

                // light field mode

                robo_LED_toggle();
     514:	25 b1       	in	r18, 0x05	; 5
     516:	31 e0       	ldi	r19, 0x01	; 1
     518:	23 27       	eor	r18, r19
     51a:	25 b9       	out	0x05, r18	; 5

                switch (sensorValue) {
     51c:	08 97       	sbiw	r24, 0x08	; 8
     51e:	f0 f4       	brcc	.+60     	; 0x55c <__FUSE_REGION_LENGTH__+0x15c>
     520:	ec 56       	subi	r30, 0x6C	; 108
     522:	fd 4f       	sbci	r31, 0xFD	; 253
     524:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__tablejump2__>
     528:	9c 02       	muls	r25, r28
     52a:	b7 02       	muls	r27, r23
     52c:	9c 02       	muls	r25, r28
     52e:	a1 02       	muls	r26, r17
     530:	a6 02       	muls	r26, r22
     532:	9c 02       	muls	r25, r28
     534:	a9 02       	muls	r26, r25
     536:	9c 02       	muls	r25, r28
                    case 2: sense = 1000;
     538:	38 ee       	ldi	r19, 0xE8	; 232
     53a:	a3 2e       	mov	r10, r19
     53c:	33 e0       	ldi	r19, 0x03	; 3
     53e:	b3 2e       	mov	r11, r19
     540:	d6 cf       	rjmp	.-84     	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 2500;
     542:	24 ec       	ldi	r18, 0xC4	; 196
     544:	a2 2e       	mov	r10, r18
     546:	29 e0       	ldi	r18, 0x09	; 9
     548:	b2 2e       	mov	r11, r18
                            break;
     54a:	d1 cf       	rjmp	.-94     	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>

                    case 4: sense = 0;
     54c:	b1 2c       	mov	r11, r1
     54e:	a1 2c       	mov	r10, r1
                            break;
     550:	ce cf       	rjmp	.-100    	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>

                    case 5: sense = 1000;
                            break;

                    case 6: sense = -500;
     552:	9c e0       	ldi	r25, 0x0C	; 12
     554:	a9 2e       	mov	r10, r25
     556:	9e ef       	ldi	r25, 0xFE	; 254
     558:	b9 2e       	mov	r11, r25
                            break;
     55a:	c9 cf       	rjmp	.-110    	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
                            break;
                    case 0:
                            sense = 1000;
                            break;               
                    
                    default: myrobot.lspeed = -30;
     55c:	d0 93 d5 02 	sts	0x02D5, r29	; 0x8002d5 <myrobot+0x3>
     560:	c0 93 d4 02 	sts	0x02D4, r28	; 0x8002d4 <myrobot+0x2>
                             myrobot.rspeed = -30;
     564:	d0 93 d3 02 	sts	0x02D3, r29	; 0x8002d3 <myrobot+0x1>
     568:	c0 93 d2 02 	sts	0x02D2, r28	; 0x8002d2 <myrobot>
                             break;
     56c:	c0 cf       	rjmp	.-128    	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>

                switch (sensorValue) {
                    case 2: sense = 1000;
                            break;
                    
                    case 1: sense = 2000;
     56e:	80 ed       	ldi	r24, 0xD0	; 208
     570:	a8 2e       	mov	r10, r24
     572:	87 e0       	ldi	r24, 0x07	; 7
     574:	b8 2e       	mov	r11, r24
     576:	bb cf       	rjmp	.-138    	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
                             break;
                }

                pidControl(sense);

            } else if (myrobot.inBlackBox == 1) {
     578:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <myrobot+0x25>
     57c:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <myrobot+0x26>
     580:	21 30       	cpi	r18, 0x01	; 1
     582:	31 05       	cpc	r19, r1
     584:	09 f0       	breq	.+2      	; 0x588 <__FUSE_REGION_LENGTH__+0x188>
     586:	3a c0       	rjmp	.+116    	; 0x5fc <__FUSE_REGION_LENGTH__+0x1fc>

                switch (sensorValue) {
     588:	08 97       	sbiw	r24, 0x08	; 8
     58a:	08 f0       	brcs	.+2      	; 0x58e <__FUSE_REGION_LENGTH__+0x18e>
     58c:	ae c0       	rjmp	.+348    	; 0x6ea <__FUSE_REGION_LENGTH__+0x2ea>
     58e:	e5 53       	subi	r30, 0x35	; 53
     590:	fd 4f       	sbci	r31, 0xFD	; 253
     592:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__tablejump2__>
     596:	f5 02       	muls	r31, r21
     598:	16 03       	mulsu	r17, r22
     59a:	0d 03       	fmul	r16, r21
     59c:	1f 03       	fmul	r17, r23
     59e:	24 03       	mulsu	r18, r20
     5a0:	d3 02       	muls	r29, r19
     5a2:	38 03       	fmul	r19, r16
     5a4:	ee 02       	muls	r30, r30

                    case 4: myrobot.lspeed = - 35;
                            myrobot.rspeed = 45;
                            break;

                    case 5: myrobot.lspeed = 75;
     5a6:	8b e4       	ldi	r24, 0x4B	; 75
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <myrobot+0x3>
     5ae:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <myrobot+0x2>
                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
                            myrobot.rspeed = 75;
     5b2:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <myrobot+0x1>
     5b6:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <myrobot>
                             myrobot.rspeed = -30;
                             break;
                }

                if(sensorValue != 0) {
                    myrobot.prevLeftSpeed = myrobot.lspeed;
     5ba:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <myrobot+0x2>
     5be:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <myrobot+0x3>
     5c2:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <myrobot+0x1c>
     5c6:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <myrobot+0x1b>
                    myrobot.prevRightSpeed = myrobot.rspeed;
     5ca:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <myrobot>
     5ce:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <myrobot+0x1>
     5d2:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <myrobot+0x1e>
     5d6:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <myrobot+0x1d>
     5da:	8c cf       	rjmp	.-232    	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     5dc:	10 93 d5 02 	sts	0x02D5, r17	; 0x8002d5 <myrobot+0x3>
     5e0:	00 93 d4 02 	sts	0x02D4, r16	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 75;
     5e4:	8b e4       	ldi	r24, 0x4B	; 75
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	e4 cf       	rjmp	.-56     	; 0x5b2 <__FUSE_REGION_LENGTH__+0x1b2>
                            break;

                    case 0: myrobot.lspeed = 30;
     5ea:	90 92 d5 02 	sts	0x02D5, r9	; 0x8002d5 <myrobot+0x3>
     5ee:	80 92 d4 02 	sts	0x02D4, r8	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 60;
     5f2:	30 92 d3 02 	sts	0x02D3, r3	; 0x8002d3 <myrobot+0x1>
     5f6:	20 92 d2 02 	sts	0x02D2, r2	; 0x8002d2 <myrobot>
     5fa:	7c cf       	rjmp	.-264    	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
                }

            } else {

                // normal mode
                switch (sensorValue) {
     5fc:	08 97       	sbiw	r24, 0x08	; 8
     5fe:	08 f0       	brcs	.+2      	; 0x602 <__FUSE_REGION_LENGTH__+0x202>
     600:	74 c0       	rjmp	.+232    	; 0x6ea <__FUSE_REGION_LENGTH__+0x2ea>
     602:	eb 5f       	subi	r30, 0xFB	; 251
     604:	fc 4f       	sbci	r31, 0xFC	; 252
     606:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__tablejump2__>
     60a:	44 03       	mulsu	r20, r20
     60c:	16 03       	mulsu	r17, r22
     60e:	0d 03       	fmul	r16, r21
     610:	1f 03       	fmul	r17, r23
     612:	24 03       	mulsu	r18, r20
     614:	2d 03       	fmul	r18, r21
     616:	38 03       	fmul	r19, r16
     618:	3d 03       	fmul	r19, r21
                    case 2: myrobot.lspeed = 50;
     61a:	d0 92 d5 02 	sts	0x02D5, r13	; 0x8002d5 <myrobot+0x3>
     61e:	c0 92 d4 02 	sts	0x02D4, r12	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 50;
     622:	d0 92 d3 02 	sts	0x02D3, r13	; 0x8002d3 <myrobot+0x1>
     626:	c0 92 d2 02 	sts	0x02D2, r12	; 0x8002d2 <myrobot>
                            break;
     62a:	c7 cf       	rjmp	.-114    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
                    
                    case 1: myrobot.lspeed = 45;
     62c:	70 92 d5 02 	sts	0x02D5, r7	; 0x8002d5 <myrobot+0x3>
     630:	60 92 d4 02 	sts	0x02D4, r6	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
                            myrobot.rspeed = - 35;
     634:	f0 92 d3 02 	sts	0x02D3, r15	; 0x8002d3 <myrobot+0x1>
     638:	e0 92 d2 02 	sts	0x02D2, r14	; 0x8002d2 <myrobot>
                            break;
     63c:	be cf       	rjmp	.-132    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
                    
                    case 1: myrobot.lspeed = 45;
                            myrobot.rspeed = - 35;
                            break;

                    case 3: myrobot.lspeed = 65;
     63e:	10 93 d5 02 	sts	0x02D5, r17	; 0x8002d5 <myrobot+0x3>
     642:	00 93 d4 02 	sts	0x02D4, r16	; 0x8002d4 <myrobot+0x2>
     646:	f6 cf       	rjmp	.-20     	; 0x634 <__FUSE_REGION_LENGTH__+0x234>
                            myrobot.rspeed = - 35;
                            break;

                    case 4: myrobot.lspeed = - 35;
     648:	f0 92 d5 02 	sts	0x02D5, r15	; 0x8002d5 <myrobot+0x3>
     64c:	e0 92 d4 02 	sts	0x02D4, r14	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 45;
     650:	70 92 d3 02 	sts	0x02D3, r7	; 0x8002d3 <myrobot+0x1>
     654:	60 92 d2 02 	sts	0x02D2, r6	; 0x8002d2 <myrobot>
                            break;
     658:	b0 cf       	rjmp	.-160    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>

                    case 5: myrobot.lspeed = - 65;
     65a:	8f eb       	ldi	r24, 0xBF	; 191
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <myrobot+0x3>
     662:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
                            myrobot.rspeed = 65;
     666:	10 93 d3 02 	sts	0x02D3, r17	; 0x8002d3 <myrobot+0x1>
     66a:	00 93 d2 02 	sts	0x02D2, r16	; 0x8002d2 <myrobot>
                            break;
     66e:	a5 cf       	rjmp	.-182    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>

                    case 5: myrobot.lspeed = - 65;
                            myrobot.rspeed = 65;
                            break;

                    case 6: myrobot.lspeed = - 35;
     670:	f0 92 d5 02 	sts	0x02D5, r15	; 0x8002d5 <myrobot+0x3>
     674:	e0 92 d4 02 	sts	0x02D4, r14	; 0x8002d4 <myrobot+0x2>
     678:	f6 cf       	rjmp	.-20     	; 0x666 <__FUSE_REGION_LENGTH__+0x266>
                            myrobot.rspeed = 65;
                            break;
                    
                    case 7: myrobot.lspeed = 65;
     67a:	10 93 d5 02 	sts	0x02D5, r17	; 0x8002d5 <myrobot+0x3>
     67e:	00 93 d4 02 	sts	0x02D4, r16	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = - 65;
     682:	8f eb       	ldi	r24, 0xBF	; 191
     684:	9f ef       	ldi	r25, 0xFF	; 255
     686:	95 cf       	rjmp	.-214    	; 0x5b2 <__FUSE_REGION_LENGTH__+0x1b2>
                            break;

                    case 0: //myrobot.lspeed = - 50;
                            //myrobot.rspeed = - 30;
                            myrobot.lspeed = - ((myrobot.prevRightSpeed+10) * 0.6);
     688:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <myrobot+0x1d>
     68c:	70 91 f0 02 	lds	r23, 0x02F0	; 0x8002f0 <myrobot+0x1e>
     690:	66 5f       	subi	r22, 0xF6	; 246
     692:	7f 4f       	sbci	r23, 0xFF	; 255
     694:	07 2e       	mov	r0, r23
     696:	00 0c       	add	r0, r0
     698:	88 0b       	sbc	r24, r24
     69a:	99 0b       	sbc	r25, r25
     69c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__floatsisf>
     6a0:	2a e9       	ldi	r18, 0x9A	; 154
     6a2:	39 e9       	ldi	r19, 0x99	; 153
     6a4:	49 e1       	ldi	r20, 0x19	; 25
     6a6:	5f e3       	ldi	r21, 0x3F	; 63
     6a8:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsf3>
     6ac:	90 58       	subi	r25, 0x80	; 128
     6ae:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixsfsi>
     6b2:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <myrobot+0x3>
     6b6:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <myrobot+0x2>
                            myrobot.rspeed = - (myrobot.prevLeftSpeed * 0.6);
     6ba:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <myrobot+0x1b>
     6be:	70 91 ee 02 	lds	r23, 0x02EE	; 0x8002ee <myrobot+0x1c>
     6c2:	07 2e       	mov	r0, r23
     6c4:	00 0c       	add	r0, r0
     6c6:	88 0b       	sbc	r24, r24
     6c8:	99 0b       	sbc	r25, r25
     6ca:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__floatsisf>
     6ce:	2a e9       	ldi	r18, 0x9A	; 154
     6d0:	39 e9       	ldi	r19, 0x99	; 153
     6d2:	49 e1       	ldi	r20, 0x19	; 25
     6d4:	5f e3       	ldi	r21, 0x3F	; 63
     6d6:	0e 94 ef 0c 	call	0x19de	; 0x19de <__mulsf3>
     6da:	90 58       	subi	r25, 0x80	; 128
     6dc:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fixsfsi>
     6e0:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <myrobot+0x1>
     6e4:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <myrobot>
     6e8:	05 cf       	rjmp	.-502    	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
                            break;                 
                    
                    default: myrobot.lspeed = -30;
     6ea:	d0 93 d5 02 	sts	0x02D5, r29	; 0x8002d5 <myrobot+0x3>
     6ee:	c0 93 d4 02 	sts	0x02D4, r28	; 0x8002d4 <myrobot+0x2>
                             myrobot.rspeed = -30;
     6f2:	d0 93 d3 02 	sts	0x02D3, r29	; 0x8002d3 <myrobot+0x1>
     6f6:	c0 93 d2 02 	sts	0x02D2, r28	; 0x8002d2 <myrobot>
                             break;
     6fa:	5f cf       	rjmp	.-322    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>

000006fc <ADC_init>:
     6fc:	80 e4       	ldi	r24, 0x40	; 64
     6fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     702:	86 e8       	ldi	r24, 0x86	; 134
     704:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     708:	08 95       	ret

0000070a <ADC_read>:
     70a:	f8 94       	cli
     70c:	80 64       	ori	r24, 0x40	; 64
     70e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     712:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     716:	80 64       	ori	r24, 0x40	; 64
     718:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     71c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     720:	84 ff       	sbrs	r24, 4
     722:	fc cf       	rjmp	.-8      	; 0x71c <ADC_read+0x12>
     724:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     728:	80 61       	ori	r24, 0x10	; 16
     72a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     72e:	78 94       	sei
     730:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     734:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     738:	93 70       	andi	r25, 0x03	; 3
     73a:	08 95       	ret

0000073c <PWM8_write>:
     73c:	81 11       	cpse	r24, r1
     73e:	05 c0       	rjmp	.+10     	; 0x74a <PWM8_write+0xe>
     740:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     744:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     748:	08 95       	ret
     74a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     74e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     752:	08 95       	ret

00000754 <motor_init>:
     754:	8a b1       	in	r24, 0x0a	; 10
     756:	80 6f       	ori	r24, 0xF0	; 240
     758:	8a b9       	out	0x0a, r24	; 10
     75a:	8b b1       	in	r24, 0x0b	; 11
     75c:	8f 70       	andi	r24, 0x0F	; 15
     75e:	8b b9       	out	0x0b, r24	; 11
     760:	81 ea       	ldi	r24, 0xA1	; 161
     762:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     76c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     770:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     774:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     778:	a8 e8       	ldi	r26, 0x88	; 136
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	1c 92       	st	X, r1
     77e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     782:	ea e8       	ldi	r30, 0x8A	; 138
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	10 82       	st	Z, r1
     788:	84 b1       	in	r24, 0x04	; 4
     78a:	86 60       	ori	r24, 0x06	; 6
     78c:	84 b9       	out	0x04, r24	; 4
     78e:	11 96       	adiw	r26, 0x01	; 1
     790:	1c 92       	st	X, r1
     792:	1e 92       	st	-X, r1
     794:	11 82       	std	Z+1, r1	; 0x01
     796:	10 82       	st	Z, r1
     798:	08 95       	ret

0000079a <motor_set_speed>:
     79a:	77 ff       	sbrs	r23, 7
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <motor_set_speed+0x8>
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	65 36       	cpi	r22, 0x65	; 101
     7a4:	71 05       	cpc	r23, r1
     7a6:	14 f0       	brlt	.+4      	; 0x7ac <motor_set_speed+0x12>
     7a8:	64 e6       	ldi	r22, 0x64	; 100
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	9b 01       	movw	r18, r22
     7ae:	22 0f       	add	r18, r18
     7b0:	33 1f       	adc	r19, r19
     7b2:	75 95       	asr	r23
     7b4:	67 95       	ror	r22
     7b6:	62 0f       	add	r22, r18
     7b8:	73 1f       	adc	r23, r19
     7ba:	81 11       	cpse	r24, r1
     7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <motor_set_speed+0x36>
     7be:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     7c2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     7c6:	70 93 7c 04 	sts	0x047C, r23	; 0x80047c <rightWst+0x1>
     7ca:	60 93 7b 04 	sts	0x047B, r22	; 0x80047b <rightWst>
     7ce:	08 95       	ret
     7d0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     7d4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     7d8:	70 93 80 04 	sts	0x0480, r23	; 0x800480 <leftWst+0x1>
     7dc:	60 93 7f 04 	sts	0x047F, r22	; 0x80047f <leftWst>
     7e0:	08 95       	ret

000007e2 <motor_set_dir>:
     7e2:	cf 93       	push	r28
     7e4:	c6 2f       	mov	r28, r22
     7e6:	26 2f       	mov	r18, r22
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	81 11       	cpse	r24, r1
     7ec:	2b c0       	rjmp	.+86     	; 0x844 <motor_set_dir+0x62>
     7ee:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <rightWst+0x2>
     7f2:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <rightWst+0x3>
     7f6:	82 17       	cp	r24, r18
     7f8:	93 07       	cpc	r25, r19
     7fa:	59 f0       	breq	.+22     	; 0x812 <motor_set_dir+0x30>
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 cd 03 	call	0x79a	; 0x79a <motor_set_speed>
     806:	8f e9       	ldi	r24, 0x9F	; 159
     808:	9f e0       	ldi	r25, 0x0F	; 15
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <motor_set_dir+0x28>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <motor_set_dir+0x2e>
     810:	00 00       	nop
     812:	c1 11       	cpse	r28, r1
     814:	0e c0       	rjmp	.+28     	; 0x832 <motor_set_dir+0x50>
     816:	5e 98       	cbi	0x0b, 6	; 11
     818:	5f 9a       	sbi	0x0b, 7	; 11
     81a:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <rightWst+0x3>
     81e:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <rightWst+0x2>
     822:	8f e3       	ldi	r24, 0x3F	; 63
     824:	9c e9       	ldi	r25, 0x9C	; 156
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <motor_set_dir+0x44>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <motor_set_dir+0x4a>
     82c:	00 00       	nop
     82e:	cf 91       	pop	r28
     830:	08 95       	ret
     832:	5e 9a       	sbi	0x0b, 6	; 11
     834:	5f 98       	cbi	0x0b, 7	; 11
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <rightWst+0x3>
     83e:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <rightWst+0x2>
     842:	ef cf       	rjmp	.-34     	; 0x822 <motor_set_dir+0x40>
     844:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <leftWst+0x2>
     848:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <leftWst+0x3>
     84c:	82 17       	cp	r24, r18
     84e:	93 07       	cpc	r25, r19
     850:	59 f0       	breq	.+22     	; 0x868 <motor_set_dir+0x86>
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 cd 03 	call	0x79a	; 0x79a <motor_set_speed>
     85c:	8f e9       	ldi	r24, 0x9F	; 159
     85e:	9f e0       	ldi	r25, 0x0F	; 15
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <motor_set_dir+0x7e>
     864:	00 c0       	rjmp	.+0      	; 0x866 <motor_set_dir+0x84>
     866:	00 00       	nop
     868:	c1 11       	cpse	r28, r1
     86a:	07 c0       	rjmp	.+14     	; 0x87a <motor_set_dir+0x98>
     86c:	5c 9a       	sbi	0x0b, 4	; 11
     86e:	5d 98       	cbi	0x0b, 5	; 11
     870:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <leftWst+0x3>
     874:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <leftWst+0x2>
     878:	d4 cf       	rjmp	.-88     	; 0x822 <motor_set_dir+0x40>
     87a:	5c 98       	cbi	0x0b, 4	; 11
     87c:	5d 9a       	sbi	0x0b, 5	; 11
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <leftWst+0x3>
     886:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <leftWst+0x2>
     88a:	cb cf       	rjmp	.-106    	; 0x822 <motor_set_dir+0x40>

0000088c <robo_motorSpeed>:
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
     896:	8b 01       	movw	r16, r22
     898:	97 ff       	sbrs	r25, 7
     89a:	1c c0       	rjmp	.+56     	; 0x8d4 <robo_motorSpeed+0x48>
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motor_set_dir>
     8a4:	d1 95       	neg	r29
     8a6:	c1 95       	neg	r28
     8a8:	d1 09       	sbc	r29, r1
     8aa:	17 ff       	sbrs	r17, 7
     8ac:	18 c0       	rjmp	.+48     	; 0x8de <robo_motorSpeed+0x52>
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motor_set_dir>
     8b6:	11 95       	neg	r17
     8b8:	01 95       	neg	r16
     8ba:	11 09       	sbc	r17, r1
     8bc:	b8 01       	movw	r22, r16
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 cd 03 	call	0x79a	; 0x79a <motor_set_speed>
     8c4:	be 01       	movw	r22, r28
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	0c 94 cd 03 	jmp	0x79a	; 0x79a <motor_set_speed>
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motor_set_dir>
     8dc:	e6 cf       	rjmp	.-52     	; 0x8aa <robo_motorSpeed+0x1e>
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motor_set_dir>
     8e6:	ea cf       	rjmp	.-44     	; 0x8bc <robo_motorSpeed+0x30>

000008e8 <USART0_init>:
     8e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     8ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     8f0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     8f4:	88 e1       	ldi	r24, 0x18	; 24
     8f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     8fa:	86 e0       	ldi	r24, 0x06	; 6
     8fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     900:	08 95       	ret

00000902 <cputchar>:
     902:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     906:	95 ff       	sbrs	r25, 5
     908:	fc cf       	rjmp	.-8      	; 0x902 <cputchar>
     90a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     90e:	08 95       	ret

00000910 <cgetchar>:
     910:	cf 93       	push	r28
     912:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     916:	87 ff       	sbrs	r24, 7
     918:	fc cf       	rjmp	.-8      	; 0x912 <cgetchar+0x2>
     91a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     91e:	8c 2f       	mov	r24, r28
     920:	0e 94 81 04 	call	0x902	; 0x902 <cputchar>
     924:	8c 2f       	mov	r24, r28
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <cputs>:
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
     930:	89 91       	ld	r24, Y+
     932:	81 11       	cpse	r24, r1
     934:	03 c0       	rjmp	.+6      	; 0x93c <cputs+0x12>
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret
     93c:	0e 94 81 04 	call	0x902	; 0x902 <cputchar>
     940:	f7 cf       	rjmp	.-18     	; 0x930 <cputs+0x6>

00000942 <robo_proxSensor>:
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 85 03 	call	0x70a	; 0x70a <ADC_read>
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	84 36       	cpi	r24, 0x64	; 100
     94e:	91 05       	cpc	r25, r1
     950:	10 f0       	brcs	.+4      	; 0x956 <robo_proxSensor+0x14>
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	c9 01       	movw	r24, r18
     958:	08 95       	ret

0000095a <robo_lightSensor>:
     95a:	84 e0       	ldi	r24, 0x04	; 4
     95c:	0e 94 85 03 	call	0x70a	; 0x70a <ADC_read>
     960:	2b ef       	ldi	r18, 0xFB	; 251
     962:	ac 01       	movw	r20, r24
     964:	24 03       	mulsu	r18, r20
     966:	c0 01       	movw	r24, r0
     968:	25 9f       	mul	r18, r21
     96a:	90 0d       	add	r25, r0
     96c:	11 24       	eor	r1, r1
     96e:	85 50       	subi	r24, 0x05	; 5
     970:	9c 4e       	sbci	r25, 0xEC	; 236
     972:	63 e3       	ldi	r22, 0x33	; 51
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__divmodhi4>
     97a:	cb 01       	movw	r24, r22
     97c:	65 36       	cpi	r22, 0x65	; 101
     97e:	71 05       	cpc	r23, r1
     980:	14 f0       	brlt	.+4      	; 0x986 <robo_lightSensor+0x2c>
     982:	84 e6       	ldi	r24, 0x64	; 100
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	08 95       	ret

00000988 <robo_lineSensor>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	c0 e0       	ldi	r28, 0x00	; 0
     98e:	d1 e0       	ldi	r29, 0x01	; 1
     990:	cc 0f       	add	r28, r28
     992:	8d 2f       	mov	r24, r29
     994:	0e 94 85 03 	call	0x70a	; 0x70a <ADC_read>
     998:	8c 32       	cpi	r24, 0x2C	; 44
     99a:	91 40       	sbci	r25, 0x01	; 1
     99c:	0c f4       	brge	.+2      	; 0x9a0 <robo_lineSensor+0x18>
     99e:	c1 60       	ori	r28, 0x01	; 1
     9a0:	df 5f       	subi	r29, 0xFF	; 255
     9a2:	d4 30       	cpi	r29, 0x04	; 4
     9a4:	a9 f7       	brne	.-22     	; 0x990 <robo_lineSensor+0x8>
     9a6:	8c 2f       	mov	r24, r28
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <robo_bumpSensorR>:
     9b0:	83 b1       	in	r24, 0x03	; 3
     9b2:	82 95       	swap	r24
     9b4:	8f 70       	andi	r24, 0x0F	; 15
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	89 27       	eor	r24, r25
     9ba:	81 70       	andi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	08 95       	ret

000009c0 <robo_bumpSensorL>:
     9c0:	83 b1       	in	r24, 0x03	; 3
     9c2:	86 95       	lsr	r24
     9c4:	86 95       	lsr	r24
     9c6:	86 95       	lsr	r24
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	89 27       	eor	r24, r25
     9cc:	81 70       	andi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	08 95       	ret

000009d2 <robo_Honk>:
     9d2:	5b 9a       	sbi	0x0b, 3	; 11
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	85 ea       	ldi	r24, 0xA5	; 165
     9d8:	9e e0       	ldi	r25, 0x0E	; 14
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	80 40       	sbci	r24, 0x00	; 0
     9de:	90 40       	sbci	r25, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <robo_Honk+0x8>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <robo_Honk+0x12>
     9e4:	00 00       	nop
     9e6:	5b 98       	cbi	0x0b, 3	; 11
     9e8:	2f ef       	ldi	r18, 0xFF	; 255
     9ea:	85 ea       	ldi	r24, 0xA5	; 165
     9ec:	9e e0       	ldi	r25, 0x0E	; 14
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	80 40       	sbci	r24, 0x00	; 0
     9f2:	90 40       	sbci	r25, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <robo_Honk+0x1c>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <robo_Honk+0x26>
     9f8:	00 00       	nop
     9fa:	08 95       	ret

000009fc <robo_checkBattery>:
     9fc:	85 e0       	ldi	r24, 0x05	; 5
     9fe:	0e 94 85 03 	call	0x70a	; 0x70a <ADC_read>
     a02:	84 3f       	cpi	r24, 0xF4	; 244
     a04:	91 40       	sbci	r25, 0x01	; 1
     a06:	10 f4       	brcc	.+4      	; 0xa0c <robo_checkBattery+0x10>
     a08:	28 9a       	sbi	0x05, 0	; 5
     a0a:	08 95       	ret
     a0c:	28 98       	cbi	0x05, 0	; 5
     a0e:	08 95       	ret

00000a10 <robo_goPressed>:
     a10:	89 b1       	in	r24, 0x09	; 9
     a12:	82 fb       	bst	r24, 2
     a14:	88 27       	eor	r24, r24
     a16:	80 f9       	bld	r24, 0
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	89 27       	eor	r24, r25
     a1c:	08 95       	ret

00000a1e <robo_wait4goPress>:
     a1e:	0e 94 08 05 	call	0xa10	; 0xa10 <robo_goPressed>
     a22:	88 23       	and	r24, r24
     a24:	e1 f3       	breq	.-8      	; 0xa1e <robo_wait4goPress>
     a26:	08 95       	ret

00000a28 <OS_ticks_init>:
     a28:	f8 94       	cli
     a2a:	85 e0       	ldi	r24, 0x05	; 5
     a2c:	85 bd       	out	0x25, r24	; 37
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     a34:	84 e6       	ldi	r24, 0x64	; 100
     a36:	86 bd       	out	0x26, r24	; 38
     a38:	78 94       	sei
     a3a:	08 95       	ret

00000a3c <HAL_init>:
     a3c:	87 e6       	ldi	r24, 0x67	; 103
     a3e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <USART0_init>
     a42:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <ADC_init>

00000a46 <robo_Setup>:
     a46:	0e 94 1e 05 	call	0xa3c	; 0xa3c <HAL_init>
     a4a:	0e 94 aa 03 	call	0x754	; 0x754 <motor_init>
     a4e:	53 9a       	sbi	0x0a, 3	; 10
     a50:	5b 98       	cbi	0x0b, 3	; 11
     a52:	20 9a       	sbi	0x04, 0	; 4
     a54:	52 98       	cbi	0x0a, 2	; 10
     a56:	5a 9a       	sbi	0x0b, 2	; 11
     a58:	24 98       	cbi	0x04, 4	; 4
     a5a:	23 98       	cbi	0x04, 3	; 4
     a5c:	85 b1       	in	r24, 0x05	; 5
     a5e:	88 61       	ori	r24, 0x18	; 24
     a60:	85 b9       	out	0x05, r24	; 5
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motor_set_dir>
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motor_set_dir>
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0c 94 46 04 	jmp	0x88c	; 0x88c <robo_motorSpeed>

00000a7e <cprintf>:
     a7e:	4f 92       	push	r4
     a80:	5f 92       	push	r5
     a82:	6f 92       	push	r6
     a84:	7f 92       	push	r7
     a86:	8f 92       	push	r8
     a88:	9f 92       	push	r9
     a8a:	af 92       	push	r10
     a8c:	bf 92       	push	r11
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	de 01       	movw	r26, r28
     aa4:	53 96       	adiw	r26, 0x13	; 19
     aa6:	ed 91       	ld	r30, X+
     aa8:	fd 91       	ld	r31, X+
     aaa:	8d 01       	movw	r16, r26
     aac:	5a e0       	ldi	r21, 0x0A	; 10
     aae:	65 2e       	mov	r6, r21
     ab0:	71 2c       	mov	r7, r1
     ab2:	80 81       	ld	r24, Z
     ab4:	85 32       	cpi	r24, 0x25	; 37
     ab6:	81 f4       	brne	.+32     	; 0xad8 <cprintf+0x5a>
     ab8:	5f 01       	movw	r10, r30
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	a8 0e       	add	r10, r24
     abe:	b1 1c       	adc	r11, r1
     ac0:	81 81       	ldd	r24, Z+1	; 0x01
     ac2:	84 36       	cpi	r24, 0x64	; 100
     ac4:	09 f4       	brne	.+2      	; 0xac8 <cprintf+0x4a>
     ac6:	50 c0       	rjmp	.+160    	; 0xb68 <cprintf+0xea>
     ac8:	90 f4       	brcc	.+36     	; 0xaee <cprintf+0x70>
     aca:	83 36       	cpi	r24, 0x63	; 99
     acc:	61 f4       	brne	.+24     	; 0xae6 <cprintf+0x68>
     ace:	f8 01       	movw	r30, r16
     ad0:	80 81       	ld	r24, Z
     ad2:	0e 5f       	subi	r16, 0xFE	; 254
     ad4:	1f 4f       	sbci	r17, 0xFF	; 255
     ad6:	07 c0       	rjmp	.+14     	; 0xae6 <cprintf+0x68>
     ad8:	88 23       	and	r24, r24
     ada:	09 f4       	brne	.+2      	; 0xade <cprintf+0x60>
     adc:	5d c0       	rjmp	.+186    	; 0xb98 <cprintf+0x11a>
     ade:	5f 01       	movw	r10, r30
     ae0:	9f ef       	ldi	r25, 0xFF	; 255
     ae2:	a9 1a       	sub	r10, r25
     ae4:	b9 0a       	sbc	r11, r25
     ae6:	0e 94 81 04 	call	0x902	; 0x902 <cputchar>
     aea:	f5 01       	movw	r30, r10
     aec:	e2 cf       	rjmp	.-60     	; 0xab2 <cprintf+0x34>
     aee:	83 37       	cpi	r24, 0x73	; 115
     af0:	71 f1       	breq	.+92     	; 0xb4e <cprintf+0xd0>
     af2:	30 e1       	ldi	r19, 0x10	; 16
     af4:	83 2e       	mov	r8, r19
     af6:	91 2c       	mov	r9, r1
     af8:	e1 2c       	mov	r14, r1
     afa:	40 e1       	ldi	r20, 0x10	; 16
     afc:	f4 2e       	mov	r15, r20
     afe:	88 37       	cpi	r24, 0x78	; 120
     b00:	91 f7       	brne	.-28     	; 0xae6 <cprintf+0x68>
     b02:	f8 01       	movw	r30, r16
     b04:	c0 80       	ld	r12, Z
     b06:	d1 80       	ldd	r13, Z+1	; 0x01
     b08:	0e 5f       	subi	r16, 0xFE	; 254
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	84 36       	cpi	r24, 0x64	; 100
     b0e:	59 f4       	brne	.+22     	; 0xb26 <cprintf+0xa8>
     b10:	d7 fe       	sbrs	r13, 7
     b12:	06 c0       	rjmp	.+12     	; 0xb20 <cprintf+0xa2>
     b14:	d1 94       	neg	r13
     b16:	c1 94       	neg	r12
     b18:	d1 08       	sbc	r13, r1
     b1a:	8d e2       	ldi	r24, 0x2D	; 45
     b1c:	0e 94 81 04 	call	0x902	; 0x902 <cputchar>
     b20:	ce 14       	cp	r12, r14
     b22:	df 04       	cpc	r13, r15
     b24:	48 f1       	brcs	.+82     	; 0xb78 <cprintf+0xfa>
     b26:	c6 01       	movw	r24, r12
     b28:	b7 01       	movw	r22, r14
     b2a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     b2e:	2c 01       	movw	r4, r24
     b30:	68 5f       	subi	r22, 0xF8	; 248
     b32:	7d 4f       	sbci	r23, 0xFD	; 253
     b34:	fb 01       	movw	r30, r22
     b36:	80 81       	ld	r24, Z
     b38:	0e 94 81 04 	call	0x902	; 0x902 <cputchar>
     b3c:	62 01       	movw	r12, r4
     b3e:	c7 01       	movw	r24, r14
     b40:	b4 01       	movw	r22, r8
     b42:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     b46:	7b 01       	movw	r14, r22
     b48:	67 2b       	or	r22, r23
     b4a:	69 f7       	brne	.-38     	; 0xb26 <cprintf+0xa8>
     b4c:	ce cf       	rjmp	.-100    	; 0xaea <cprintf+0x6c>
     b4e:	f8 01       	movw	r30, r16
     b50:	e0 80       	ld	r14, Z
     b52:	f1 80       	ldd	r15, Z+1	; 0x01
     b54:	0e 5f       	subi	r16, 0xFE	; 254
     b56:	1f 4f       	sbci	r17, 0xFF	; 255
     b58:	f7 01       	movw	r30, r14
     b5a:	81 91       	ld	r24, Z+
     b5c:	7f 01       	movw	r14, r30
     b5e:	88 23       	and	r24, r24
     b60:	21 f2       	breq	.-120    	; 0xaea <cprintf+0x6c>
     b62:	0e 94 81 04 	call	0x902	; 0x902 <cputchar>
     b66:	f8 cf       	rjmp	.-16     	; 0xb58 <cprintf+0xda>
     b68:	9a e0       	ldi	r25, 0x0A	; 10
     b6a:	89 2e       	mov	r8, r25
     b6c:	91 2c       	mov	r9, r1
     b6e:	20 e1       	ldi	r18, 0x10	; 16
     b70:	e2 2e       	mov	r14, r18
     b72:	27 e2       	ldi	r18, 0x27	; 39
     b74:	f2 2e       	mov	r15, r18
     b76:	c5 cf       	rjmp	.-118    	; 0xb02 <cprintf+0x84>
     b78:	c7 01       	movw	r24, r14
     b7a:	b3 01       	movw	r22, r6
     b7c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     b80:	7b 01       	movw	r14, r22
     b82:	62 30       	cpi	r22, 0x02	; 2
     b84:	71 05       	cpc	r23, r1
     b86:	60 f6       	brcc	.-104    	; 0xb20 <cprintf+0xa2>
     b88:	c6 01       	movw	r24, r12
     b8a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
     b8e:	fb 01       	movw	r30, r22
     b90:	e8 5f       	subi	r30, 0xF8	; 248
     b92:	fd 4f       	sbci	r31, 0xFD	; 253
     b94:	80 81       	ld	r24, Z
     b96:	a7 cf       	rjmp	.-178    	; 0xae6 <cprintf+0x68>
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	9f 90       	pop	r9
     bb2:	8f 90       	pop	r8
     bb4:	7f 90       	pop	r7
     bb6:	6f 90       	pop	r6
     bb8:	5f 90       	pop	r5
     bba:	4f 90       	pop	r4
     bbc:	08 95       	ret

00000bbe <OSStartHighRdy>:
     bbe:	00 91 84 04 	lds	r16, 0x0484	; 0x800484 <OSRunning>
     bc2:	03 95       	inc	r16
     bc4:	00 93 84 04 	sts	0x0484, r16	; 0x800484 <OSRunning>
     bc8:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <OSTCBHighRdy>
     bcc:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <OSTCBHighRdy+0x1>
     bd0:	c1 91       	ld	r28, Z+
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	d1 91       	ld	r29, Z+
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f 91       	pop	r16
     bda:	0f bf       	out	0x3f, r16	; 63
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	8f 90       	pop	r8
     c0c:	7f 90       	pop	r7
     c0e:	6f 90       	pop	r6
     c10:	5f 90       	pop	r5
     c12:	4f 90       	pop	r4
     c14:	3f 90       	pop	r3
     c16:	2f 90       	pop	r2
     c18:	1f 90       	pop	r1
     c1a:	0f 90       	pop	r0
     c1c:	08 95       	ret

00000c1e <OSCtxSw>:
     c1e:	0f 92       	push	r0
     c20:	1f 92       	push	r1
     c22:	2f 92       	push	r2
     c24:	3f 92       	push	r3
     c26:	4f 92       	push	r4
     c28:	5f 92       	push	r5
     c2a:	6f 92       	push	r6
     c2c:	7f 92       	push	r7
     c2e:	8f 92       	push	r8
     c30:	9f 92       	push	r9
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
     c5e:	0f b7       	in	r16, 0x3f	; 63
     c60:	0f 93       	push	r16
     c62:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <OSTCBCur>
     c66:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <OSTCBCur+0x1>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	c1 93       	st	Z+, r28
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	d1 93       	st	Z+, r29
     c72:	00 91 89 04 	lds	r16, 0x0489	; 0x800489 <OSPrioHighRdy>
     c76:	00 93 8a 04 	sts	0x048A, r16	; 0x80048a <OSPrioCur>
     c7a:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <OSTCBHighRdy>
     c7e:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <OSTCBHighRdy+0x1>
     c82:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <OSTCBCur>
     c86:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <OSTCBCur+0x1>
     c8a:	c1 91       	ld	r28, Z+
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	d1 91       	ld	r29, Z+
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f 91       	pop	r16
     c94:	0f bf       	out	0x3f, r16	; 63
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	7f 90       	pop	r7
     cc8:	6f 90       	pop	r6
     cca:	5f 90       	pop	r5
     ccc:	4f 90       	pop	r4
     cce:	3f 90       	pop	r3
     cd0:	2f 90       	pop	r2
     cd2:	1f 90       	pop	r1
     cd4:	0f 90       	pop	r0
     cd6:	08 95       	ret

00000cd8 <OSIntCtxSw>:
     cd8:	00 91 89 04 	lds	r16, 0x0489	; 0x800489 <OSPrioHighRdy>
     cdc:	00 93 8a 04 	sts	0x048A, r16	; 0x80048a <OSPrioCur>
     ce0:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <OSTCBHighRdy>
     ce4:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <OSTCBHighRdy+0x1>
     ce8:	e0 93 9c 04 	sts	0x049C, r30	; 0x80049c <OSTCBCur>
     cec:	f0 93 9d 04 	sts	0x049D, r31	; 0x80049d <OSTCBCur+0x1>
     cf0:	c1 91       	ld	r28, Z+
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	d1 91       	ld	r29, Z+
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f 91       	pop	r16
     cfa:	0f bf       	out	0x3f, r16	; 63
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	bf 90       	pop	r11
     d26:	af 90       	pop	r10
     d28:	9f 90       	pop	r9
     d2a:	8f 90       	pop	r8
     d2c:	7f 90       	pop	r7
     d2e:	6f 90       	pop	r6
     d30:	5f 90       	pop	r5
     d32:	4f 90       	pop	r4
     d34:	3f 90       	pop	r3
     d36:	2f 90       	pop	r2
     d38:	1f 90       	pop	r1
     d3a:	0f 90       	pop	r0
     d3c:	08 95       	ret

00000d3e <OSTickISR>:
     d3e:	0f 92       	push	r0
     d40:	1f 92       	push	r1
     d42:	2f 92       	push	r2
     d44:	3f 92       	push	r3
     d46:	4f 92       	push	r4
     d48:	5f 92       	push	r5
     d4a:	6f 92       	push	r6
     d4c:	7f 92       	push	r7
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	2f 93       	push	r18
     d64:	3f 93       	push	r19
     d66:	4f 93       	push	r20
     d68:	5f 93       	push	r21
     d6a:	6f 93       	push	r22
     d6c:	7f 93       	push	r23
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	af 93       	push	r26
     d74:	bf 93       	push	r27
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
     d7e:	0f b7       	in	r16, 0x3f	; 63
     d80:	00 68       	ori	r16, 0x80	; 128
     d82:	0f 93       	push	r16
     d84:	00 91 9b 04 	lds	r16, 0x049B	; 0x80049b <OSIntNesting>
     d88:	03 95       	inc	r16
     d8a:	00 93 9b 04 	sts	0x049B, r16	; 0x80049b <OSIntNesting>
     d8e:	01 30       	cpi	r16, 0x01	; 1
     d90:	41 f4       	brne	.+16     	; 0xda2 <_not_first_int>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <OSTCBCur>
     d9a:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <OSTCBCur+0x1>
     d9e:	c1 93       	st	Z+, r28
     da0:	d1 93       	st	Z+, r29

00000da2 <_not_first_int>:
     da2:	04 e6       	ldi	r16, 0x64	; 100
     da4:	06 bd       	out	0x26, r16	; 38
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	1f 2e       	mov	r1, r31
     daa:	78 94       	sei
     dac:	0e 94 02 08 	call	0x1004	; 0x1004 <OSTimeTick>
     db0:	00 00       	nop
     db2:	0e 94 75 07 	call	0xeea	; 0xeea <OSIntExit>
     db6:	0f 91       	pop	r16
     db8:	0f bf       	out	0x3f, r16	; 63
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	9f 90       	pop	r9
     de8:	8f 90       	pop	r8
     dea:	7f 90       	pop	r7
     dec:	6f 90       	pop	r6
     dee:	5f 90       	pop	r5
     df0:	4f 90       	pop	r4
     df2:	3f 90       	pop	r3
     df4:	2f 90       	pop	r2
     df6:	1f 90       	pop	r1
     df8:	0f 90       	pop	r0
     dfa:	08 95       	ret

00000dfc <OSTaskStkInit>:
     dfc:	fa 01       	movw	r30, r20
     dfe:	80 83       	st	Z, r24
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	90 83       	st	Z, r25
     e04:	31 97       	sbiw	r30, 0x01	; 1
     e06:	10 82       	st	Z, r1
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	10 82       	st	Z, r1
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	10 82       	st	Z, r1
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	10 82       	st	Z, r1
     e14:	31 97       	sbiw	r30, 0x01	; 1
     e16:	10 82       	st	Z, r1
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	10 82       	st	Z, r1
     e1c:	31 97       	sbiw	r30, 0x01	; 1
     e1e:	10 82       	st	Z, r1
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	10 82       	st	Z, r1
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	10 82       	st	Z, r1
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	10 82       	st	Z, r1
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	10 82       	st	Z, r1
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	10 82       	st	Z, r1
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	10 82       	st	Z, r1
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	10 82       	st	Z, r1
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	10 82       	st	Z, r1
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	10 82       	st	Z, r1
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	10 82       	st	Z, r1
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	10 82       	st	Z, r1
     e4c:	31 97       	sbiw	r30, 0x01	; 1
     e4e:	10 82       	st	Z, r1
     e50:	31 97       	sbiw	r30, 0x01	; 1
     e52:	10 82       	st	Z, r1
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	10 82       	st	Z, r1
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	10 82       	st	Z, r1
     e5c:	31 97       	sbiw	r30, 0x01	; 1
     e5e:	10 82       	st	Z, r1
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	10 82       	st	Z, r1
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	60 83       	st	Z, r22
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	70 83       	st	Z, r23
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	10 82       	st	Z, r1
     e70:	31 97       	sbiw	r30, 0x01	; 1
     e72:	10 82       	st	Z, r1
     e74:	31 97       	sbiw	r30, 0x01	; 1
     e76:	10 82       	st	Z, r1
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	10 82       	st	Z, r1
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	10 82       	st	Z, r1
     e80:	31 97       	sbiw	r30, 0x01	; 1
     e82:	10 82       	st	Z, r1
     e84:	31 97       	sbiw	r30, 0x01	; 1
     e86:	80 e8       	ldi	r24, 0x80	; 128
     e88:	80 83       	st	Z, r24
     e8a:	ca 01       	movw	r24, r20
     e8c:	83 97       	sbiw	r24, 0x23	; 35
     e8e:	08 95       	ret

00000e90 <OSTaskCreateHook>:
     e90:	08 95       	ret

00000e92 <OSTaskDelHook>:
     e92:	08 95       	ret

00000e94 <OSTaskSwHook>:
     e94:	08 95       	ret

00000e96 <OSTaskStatHook>:
     e96:	08 95       	ret

00000e98 <OSTimeTickHook>:
     e98:	08 95       	ret

00000e9a <OSInitHookBegin>:
     e9a:	08 95       	ret

00000e9c <OSInitHookEnd>:
     e9c:	08 95       	ret

00000e9e <OSTaskIdleHook>:
     e9e:	08 95       	ret

00000ea0 <OSTCBInitHook>:
     ea0:	08 95       	ret

00000ea2 <OS_TaskIdle>:
     ea2:	f8 94       	cli
     ea4:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <OSIdleCtr>
     ea8:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <OSIdleCtr+0x1>
     eac:	a0 91 87 04 	lds	r26, 0x0487	; 0x800487 <OSIdleCtr+0x2>
     eb0:	b0 91 88 04 	lds	r27, 0x0488	; 0x800488 <OSIdleCtr+0x3>
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	a1 1d       	adc	r26, r1
     eb8:	b1 1d       	adc	r27, r1
     eba:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <OSIdleCtr>
     ebe:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <OSIdleCtr+0x1>
     ec2:	a0 93 87 04 	sts	0x0487, r26	; 0x800487 <OSIdleCtr+0x2>
     ec6:	b0 93 88 04 	sts	0x0488, r27	; 0x800488 <OSIdleCtr+0x3>
     eca:	78 94       	sei
     ecc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <OSTaskIdleHook>
     ed0:	e8 cf       	rjmp	.-48     	; 0xea2 <OS_TaskIdle>

00000ed2 <OSIntEnter>:
     ed2:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	39 f4       	brne	.+14     	; 0xee8 <OSIntEnter+0x16>
     eda:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
     ede:	8f 3f       	cpi	r24, 0xFF	; 255
     ee0:	19 f0       	breq	.+6      	; 0xee8 <OSIntEnter+0x16>
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <OSIntNesting>
     ee8:	08 95       	ret

00000eea <OSIntExit>:
     eea:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	09 f0       	breq	.+2      	; 0xef4 <OSIntExit+0xa>
     ef2:	4c c0       	rjmp	.+152    	; 0xf8c <OSIntExit+0xa2>
     ef4:	f8 94       	cli
     ef6:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
     efa:	88 23       	and	r24, r24
     efc:	19 f0       	breq	.+6      	; 0xf04 <OSIntExit+0x1a>
     efe:	81 50       	subi	r24, 0x01	; 1
     f00:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <OSIntNesting>
     f04:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
     f08:	81 11       	cpse	r24, r1
     f0a:	3f c0       	rjmp	.+126    	; 0xf8a <OSIntExit+0xa0>
     f0c:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
     f10:	81 11       	cpse	r24, r1
     f12:	3b c0       	rjmp	.+118    	; 0xf8a <OSIntExit+0xa0>
     f14:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <OSRdyGrp>
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	e0 50       	subi	r30, 0x00	; 0
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	e0 81       	ld	r30, Z
     f20:	e0 93 9a 04 	sts	0x049A, r30	; 0x80049a <OSIntExitY>
     f24:	ae 2f       	mov	r26, r30
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	a9 56       	subi	r26, 0x69	; 105
     f2a:	bb 4f       	sbci	r27, 0xFB	; 251
     f2c:	ac 91       	ld	r26, X
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	a0 50       	subi	r26, 0x00	; 0
     f32:	bf 4f       	sbci	r27, 0xFF	; 255
     f34:	ee 0f       	add	r30, r30
     f36:	ee 0f       	add	r30, r30
     f38:	ee 0f       	add	r30, r30
     f3a:	8c 91       	ld	r24, X
     f3c:	e8 0f       	add	r30, r24
     f3e:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <OSPrioHighRdy>
     f42:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <OSPrioCur>
     f46:	e8 17       	cp	r30, r24
     f48:	01 f1       	breq	.+64     	; 0xf8a <OSIntExit+0xa0>
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	e3 52       	subi	r30, 0x23	; 35
     f52:	fa 4f       	sbci	r31, 0xFA	; 250
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <OSTCBHighRdy+0x1>
     f5c:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <OSTCBHighRdy>
     f60:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <OSCtxSwCtr>
     f64:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <OSCtxSwCtr+0x1>
     f68:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <OSCtxSwCtr+0x2>
     f6c:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <OSCtxSwCtr+0x3>
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	a1 1d       	adc	r26, r1
     f74:	b1 1d       	adc	r27, r1
     f76:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <OSCtxSwCtr>
     f7a:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <OSCtxSwCtr+0x1>
     f7e:	a0 93 8f 04 	sts	0x048F, r26	; 0x80048f <OSCtxSwCtr+0x2>
     f82:	b0 93 90 04 	sts	0x0490, r27	; 0x800490 <OSCtxSwCtr+0x3>
     f86:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <OSIntCtxSw>
     f8a:	78 94       	sei
     f8c:	08 95       	ret

00000f8e <OSSchedLock>:
     f8e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	49 f4       	brne	.+18     	; 0xfa8 <OSSchedLock+0x1a>
     f96:	f8 94       	cli
     f98:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
     f9c:	8f 3f       	cpi	r24, 0xFF	; 255
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <OSSchedLock+0x18>
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <OSLockNesting>
     fa6:	78 94       	sei
     fa8:	08 95       	ret

00000faa <OSStart>:
     faa:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
     fae:	81 11       	cpse	r24, r1
     fb0:	28 c0       	rjmp	.+80     	; 0x1002 <OSStart+0x58>
     fb2:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <OSRdyGrp>
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	e0 50       	subi	r30, 0x00	; 0
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	e0 81       	ld	r30, Z
     fbe:	ae 2f       	mov	r26, r30
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	a9 56       	subi	r26, 0x69	; 105
     fc4:	bb 4f       	sbci	r27, 0xFB	; 251
     fc6:	ac 91       	ld	r26, X
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	a0 50       	subi	r26, 0x00	; 0
     fcc:	bf 4f       	sbci	r27, 0xFF	; 255
     fce:	ee 0f       	add	r30, r30
     fd0:	ee 0f       	add	r30, r30
     fd2:	ee 0f       	add	r30, r30
     fd4:	8c 91       	ld	r24, X
     fd6:	e8 0f       	add	r30, r24
     fd8:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <OSPrioHighRdy>
     fdc:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <OSPrioCur>
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	e3 52       	subi	r30, 0x23	; 35
     fe8:	fa 4f       	sbci	r31, 0xFA	; 250
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <OSTCBHighRdy+0x1>
     ff2:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <OSTCBHighRdy>
     ff6:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <OSTCBCur+0x1>
     ffa:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <OSTCBCur>
     ffe:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <OSStartHighRdy>
    1002:	08 95       	ret

00001004 <OSTimeTick>:
    1004:	0e 94 4c 07 	call	0xe98	; 0xe98 <OSTimeTickHook>
    1008:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
    100c:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <OSTCBList>
    1010:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <OSTCBList+0x1>
    1014:	21 e0       	ldi	r18, 0x01	; 1
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	01 f1       	breq	.+64     	; 0x105c <OSTimeTick+0x58>
    101c:	08 95       	ret
    101e:	f8 94       	cli
    1020:	86 81       	ldd	r24, Z+6	; 0x06
    1022:	97 81       	ldd	r25, Z+7	; 0x07
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	b1 f0       	breq	.+44     	; 0x1054 <OSTimeTick+0x50>
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	97 83       	std	Z+7, r25	; 0x07
    102c:	86 83       	std	Z+6, r24	; 0x06
    102e:	89 2b       	or	r24, r25
    1030:	89 f4       	brne	.+34     	; 0x1054 <OSTimeTick+0x50>
    1032:	80 85       	ldd	r24, Z+8	; 0x08
    1034:	83 fd       	sbrc	r24, 3
    1036:	16 c0       	rjmp	.+44     	; 0x1064 <OSTimeTick+0x60>
    1038:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <OSRdyGrp>
    103c:	95 85       	ldd	r25, Z+13	; 0x0d
    103e:	89 2b       	or	r24, r25
    1040:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <OSRdyGrp>
    1044:	a3 85       	ldd	r26, Z+11	; 0x0b
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	a9 56       	subi	r26, 0x69	; 105
    104a:	bb 4f       	sbci	r27, 0xFB	; 251
    104c:	8c 91       	ld	r24, X
    104e:	94 85       	ldd	r25, Z+12	; 0x0c
    1050:	89 2b       	or	r24, r25
    1052:	8c 93       	st	X, r24
    1054:	02 80       	ldd	r0, Z+2	; 0x02
    1056:	f3 81       	ldd	r31, Z+3	; 0x03
    1058:	e0 2d       	mov	r30, r0
    105a:	78 94       	sei
    105c:	81 85       	ldd	r24, Z+9	; 0x09
    105e:	80 31       	cpi	r24, 0x10	; 16
    1060:	f1 f6       	brne	.-68     	; 0x101e <OSTimeTick+0x1a>
    1062:	dc cf       	rjmp	.-72     	; 0x101c <OSTimeTick+0x18>
    1064:	37 83       	std	Z+7, r19	; 0x07
    1066:	26 83       	std	Z+6, r18	; 0x06
    1068:	f5 cf       	rjmp	.-22     	; 0x1054 <OSTimeTick+0x50>

0000106a <OSVersion>:
    106a:	8c ef       	ldi	r24, 0xFC	; 252
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	08 95       	ret

00001070 <OS_Dummy>:
    1070:	08 95       	ret

00001072 <OS_Sched>:
    1072:	f8 94       	cli
    1074:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
    1078:	81 11       	cpse	r24, r1
    107a:	3d c0       	rjmp	.+122    	; 0x10f6 <OS_Sched+0x84>
    107c:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
    1080:	81 11       	cpse	r24, r1
    1082:	39 c0       	rjmp	.+114    	; 0x10f6 <OS_Sched+0x84>
    1084:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <OSRdyGrp>
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	e0 50       	subi	r30, 0x00	; 0
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	e0 81       	ld	r30, Z
    1090:	ae 2f       	mov	r26, r30
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	a9 56       	subi	r26, 0x69	; 105
    1096:	bb 4f       	sbci	r27, 0xFB	; 251
    1098:	ac 91       	ld	r26, X
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	a0 50       	subi	r26, 0x00	; 0
    109e:	bf 4f       	sbci	r27, 0xFF	; 255
    10a0:	ee 0f       	add	r30, r30
    10a2:	ee 0f       	add	r30, r30
    10a4:	ee 0f       	add	r30, r30
    10a6:	8c 91       	ld	r24, X
    10a8:	e8 0f       	add	r30, r24
    10aa:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <OSPrioHighRdy>
    10ae:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <OSPrioCur>
    10b2:	e8 17       	cp	r30, r24
    10b4:	01 f1       	breq	.+64     	; 0x10f6 <OS_Sched+0x84>
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e3 52       	subi	r30, 0x23	; 35
    10be:	fa 4f       	sbci	r31, 0xFA	; 250
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <OSTCBHighRdy+0x1>
    10c8:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <OSTCBHighRdy>
    10cc:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <OSCtxSwCtr>
    10d0:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <OSCtxSwCtr+0x1>
    10d4:	a0 91 8f 04 	lds	r26, 0x048F	; 0x80048f <OSCtxSwCtr+0x2>
    10d8:	b0 91 90 04 	lds	r27, 0x0490	; 0x800490 <OSCtxSwCtr+0x3>
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	a1 1d       	adc	r26, r1
    10e0:	b1 1d       	adc	r27, r1
    10e2:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <OSCtxSwCtr>
    10e6:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <OSCtxSwCtr+0x1>
    10ea:	a0 93 8f 04 	sts	0x048F, r26	; 0x80048f <OSCtxSwCtr+0x2>
    10ee:	b0 93 90 04 	sts	0x0490, r27	; 0x800490 <OSCtxSwCtr+0x3>
    10f2:	0e 94 0f 06 	call	0xc1e	; 0xc1e <OSCtxSw>
    10f6:	78 94       	sei
    10f8:	08 95       	ret

000010fa <OSSchedUnlock>:
    10fa:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 f4       	brne	.+36     	; 0x1126 <OSSchedUnlock+0x2c>
    1102:	f8 94       	cli
    1104:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
    1108:	88 23       	and	r24, r24
    110a:	61 f0       	breq	.+24     	; 0x1124 <OSSchedUnlock+0x2a>
    110c:	81 50       	subi	r24, 0x01	; 1
    110e:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <OSLockNesting>
    1112:	81 11       	cpse	r24, r1
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <OSSchedUnlock+0x2a>
    1116:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <OSIntNesting>
    111a:	81 11       	cpse	r24, r1
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <OSSchedUnlock+0x2a>
    111e:	78 94       	sei
    1120:	0c 94 39 08 	jmp	0x1072	; 0x1072 <OS_Sched>
    1124:	78 94       	sei
    1126:	08 95       	ret

00001128 <OSTimeDly.part.0>:
    1128:	ac 01       	movw	r20, r24
    112a:	f8 94       	cli
    112c:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <OSTCBCur>
    1130:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <OSTCBCur+0x1>
    1134:	1b 96       	adiw	r26, 0x0b	; 11
    1136:	ec 91       	ld	r30, X
    1138:	1b 97       	sbiw	r26, 0x0b	; 11
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	1c 96       	adiw	r26, 0x0c	; 12
    113e:	9c 91       	ld	r25, X
    1140:	1c 97       	sbiw	r26, 0x0c	; 12
    1142:	90 95       	com	r25
    1144:	e9 56       	subi	r30, 0x69	; 105
    1146:	fb 4f       	sbci	r31, 0xFB	; 251
    1148:	80 81       	ld	r24, Z
    114a:	98 23       	and	r25, r24
    114c:	90 83       	st	Z, r25
    114e:	91 11       	cpse	r25, r1
    1150:	0a c0       	rjmp	.+20     	; 0x1166 <OSTimeDly.part.0+0x3e>
    1152:	1d 96       	adiw	r26, 0x0d	; 13
    1154:	9c 91       	ld	r25, X
    1156:	1d 97       	sbiw	r26, 0x0d	; 13
    1158:	29 2f       	mov	r18, r25
    115a:	20 95       	com	r18
    115c:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <OSRdyGrp>
    1160:	92 23       	and	r25, r18
    1162:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <OSRdyGrp>
    1166:	17 96       	adiw	r26, 0x07	; 7
    1168:	5c 93       	st	X, r21
    116a:	4e 93       	st	-X, r20
    116c:	16 97       	sbiw	r26, 0x06	; 6
    116e:	78 94       	sei
    1170:	0c 94 39 08 	jmp	0x1072	; 0x1072 <OS_Sched>

00001174 <OS_TCBInit>:
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	f8 94       	cli
    117c:	c0 91 91 04 	lds	r28, 0x0491	; 0x800491 <OSTCBFreeList>
    1180:	d0 91 92 04 	lds	r29, 0x0492	; 0x800492 <OSTCBFreeList+0x1>
    1184:	20 97       	sbiw	r28, 0x00	; 0
    1186:	09 f4       	brne	.+2      	; 0x118a <OS_TCBInit+0x16>
    1188:	54 c0       	rjmp	.+168    	; 0x1232 <OS_TCBInit+0xbe>
    118a:	18 2f       	mov	r17, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	9b 81       	ldd	r25, Y+3	; 0x03
    1190:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <OSTCBFreeList+0x1>
    1194:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <OSTCBFreeList>
    1198:	78 94       	sei
    119a:	79 83       	std	Y+1, r23	; 0x01
    119c:	68 83       	st	Y, r22
    119e:	19 87       	std	Y+9, r17	; 0x09
    11a0:	18 86       	std	Y+8, r1	; 0x08
    11a2:	1f 82       	std	Y+7, r1	; 0x07
    11a4:	1e 82       	std	Y+6, r1	; 0x06
    11a6:	1e 86       	std	Y+14, r1	; 0x0e
    11a8:	e1 2f       	mov	r30, r17
    11aa:	e6 95       	lsr	r30
    11ac:	e6 95       	lsr	r30
    11ae:	e6 95       	lsr	r30
    11b0:	eb 87       	std	Y+11, r30	; 0x0b
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	e0 50       	subi	r30, 0x00	; 0
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	80 81       	ld	r24, Z
    11ba:	8d 87       	std	Y+13, r24	; 0x0d
    11bc:	e1 2f       	mov	r30, r17
    11be:	e7 70       	andi	r30, 0x07	; 7
    11c0:	ea 87       	std	Y+10, r30	; 0x0a
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	e0 50       	subi	r30, 0x00	; 0
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	80 81       	ld	r24, Z
    11ca:	8c 87       	std	Y+12, r24	; 0x0c
    11cc:	ce 01       	movw	r24, r28
    11ce:	0e 94 50 07 	call	0xea0	; 0xea0 <OSTCBInitHook>
    11d2:	ce 01       	movw	r24, r28
    11d4:	0e 94 48 07 	call	0xe90	; 0xe90 <OSTaskCreateHook>
    11d8:	f8 94       	cli
    11da:	e1 2f       	mov	r30, r17
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	e3 52       	subi	r30, 0x23	; 35
    11e4:	fa 4f       	sbci	r31, 0xFA	; 250
    11e6:	d1 83       	std	Z+1, r29	; 0x01
    11e8:	c0 83       	st	Z, r28
    11ea:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <OSTCBList>
    11ee:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <OSTCBList+0x1>
    11f2:	fb 83       	std	Y+3, r31	; 0x03
    11f4:	ea 83       	std	Y+2, r30	; 0x02
    11f6:	1d 82       	std	Y+5, r1	; 0x05
    11f8:	1c 82       	std	Y+4, r1	; 0x04
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	11 f0       	breq	.+4      	; 0x1202 <OS_TCBInit+0x8e>
    11fe:	d5 83       	std	Z+5, r29	; 0x05
    1200:	c4 83       	std	Z+4, r28	; 0x04
    1202:	d0 93 8c 04 	sts	0x048C, r29	; 0x80048c <OSTCBList+0x1>
    1206:	c0 93 8b 04 	sts	0x048B, r28	; 0x80048b <OSTCBList>
    120a:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <OSRdyGrp>
    120e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1210:	89 2b       	or	r24, r25
    1212:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <OSRdyGrp>
    1216:	eb 85       	ldd	r30, Y+11	; 0x0b
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	e9 56       	subi	r30, 0x69	; 105
    121c:	fb 4f       	sbci	r31, 0xFB	; 251
    121e:	80 81       	ld	r24, Z
    1220:	9c 85       	ldd	r25, Y+12	; 0x0c
    1222:	89 2b       	or	r24, r25
    1224:	80 83       	st	Z, r24
    1226:	78 94       	sei
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	08 95       	ret
    1232:	78 94       	sei
    1234:	86 e4       	ldi	r24, 0x46	; 70
    1236:	f9 cf       	rjmp	.-14     	; 0x122a <OS_TCBInit+0xb6>

00001238 <OSTaskCreate>:
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	f8 94       	cli
    1250:	c2 2f       	mov	r28, r18
    1252:	d0 e0       	ldi	r29, 0x00	; 0
    1254:	cc 0f       	add	r28, r28
    1256:	dd 1f       	adc	r29, r29
    1258:	c3 52       	subi	r28, 0x23	; 35
    125a:	da 4f       	sbci	r29, 0xFA	; 250
    125c:	e8 81       	ld	r30, Y
    125e:	f9 81       	ldd	r31, Y+1	; 0x01
    1260:	ef 2b       	or	r30, r31
    1262:	09 f0       	breq	.+2      	; 0x1266 <OSTaskCreate+0x2e>
    1264:	3b c0       	rjmp	.+118    	; 0x12dc <OSTaskCreate+0xa4>
    1266:	92 2e       	mov	r9, r18
    1268:	21 e0       	ldi	r18, 0x01	; 1
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	39 83       	std	Y+1, r19	; 0x01
    126e:	28 83       	st	Y, r18
    1270:	78 94       	sei
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	0e 94 fe 06 	call	0xdfc	; 0xdfc <OSTaskStkInit>
    127a:	b1 2c       	mov	r11, r1
    127c:	a1 2c       	mov	r10, r1
    127e:	d1 2c       	mov	r13, r1
    1280:	c1 2c       	mov	r12, r1
    1282:	e1 2c       	mov	r14, r1
    1284:	f1 2c       	mov	r15, r1
    1286:	87 01       	movw	r16, r14
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	bc 01       	movw	r22, r24
    1292:	89 2d       	mov	r24, r9
    1294:	0e 94 ba 08 	call	0x1174	; 0x1174 <OS_TCBInit>
    1298:	18 2f       	mov	r17, r24
    129a:	81 11       	cpse	r24, r1
    129c:	1a c0       	rjmp	.+52     	; 0x12d2 <OSTaskCreate+0x9a>
    129e:	f8 94       	cli
    12a0:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <OSTaskCtr>
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <OSTaskCtr>
    12aa:	78 94       	sei
    12ac:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <OSRunning>
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <OSTaskCreate+0x80>
    12b4:	0e 94 39 08 	call	0x1072	; 0x1072 <OS_Sched>
    12b8:	81 2f       	mov	r24, r17
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	9f 90       	pop	r9
    12d0:	08 95       	ret
    12d2:	f8 94       	cli
    12d4:	19 82       	std	Y+1, r1	; 0x01
    12d6:	18 82       	st	Y, r1
    12d8:	78 94       	sei
    12da:	ee cf       	rjmp	.-36     	; 0x12b8 <OSTaskCreate+0x80>
    12dc:	78 94       	sei
    12de:	18 e2       	ldi	r17, 0x28	; 40
    12e0:	eb cf       	rjmp	.-42     	; 0x12b8 <OSTaskCreate+0x80>

000012e2 <OSInit>:
    12e2:	0e 94 4d 07 	call	0xe9a	; 0xe9a <OSInitHookBegin>
    12e6:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <OSIntNesting>
    12ea:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <OSLockNesting>
    12ee:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <OSTaskCtr>
    12f2:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <OSRunning>
    12f6:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <OSCtxSwCtr>
    12fa:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <OSCtxSwCtr+0x1>
    12fe:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <OSCtxSwCtr+0x2>
    1302:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <OSCtxSwCtr+0x3>
    1306:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <OSIdleCtr>
    130a:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <OSIdleCtr+0x1>
    130e:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <OSIdleCtr+0x2>
    1312:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <OSIdleCtr+0x3>
    1316:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <OSRdyGrp>
    131a:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <OSRdyTbl>
    131e:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <OSRdyTbl+0x1>
    1322:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <OSRdyTbl+0x2>
    1326:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <OSPrioCur>
    132a:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <OSPrioHighRdy>
    132e:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <OSTCBHighRdy+0x1>
    1332:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <OSTCBHighRdy>
    1336:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <OSTCBCur+0x1>
    133a:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <OSTCBCur>
    133e:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <OSTCBList+0x1>
    1342:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <OSTCBList>
    1346:	ed ed       	ldi	r30, 0xDD	; 221
    1348:	f5 e0       	ldi	r31, 0x05	; 5
    134a:	11 92       	st	Z+, r1
    134c:	11 92       	st	Z+, r1
    134e:	85 e0       	ldi	r24, 0x05	; 5
    1350:	ef 3f       	cpi	r30, 0xFF	; 255
    1352:	f8 07       	cpc	r31, r24
    1354:	d1 f7       	brne	.-12     	; 0x134a <OSInit+0x68>
    1356:	ee ed       	ldi	r30, 0xDE	; 222
    1358:	f4 e0       	ldi	r31, 0x04	; 4
    135a:	cf 01       	movw	r24, r30
    135c:	0f 96       	adiw	r24, 0x0f	; 15
    135e:	93 83       	std	Z+3, r25	; 0x03
    1360:	82 83       	std	Z+2, r24	; 0x02
    1362:	fc 01       	movw	r30, r24
    1364:	85 e0       	ldi	r24, 0x05	; 5
    1366:	ee 3c       	cpi	r30, 0xCE	; 206
    1368:	f8 07       	cpc	r31, r24
    136a:	b9 f7       	brne	.-18     	; 0x135a <OSInit+0x78>
    136c:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <OSTCBTbl+0xf3>
    1370:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <OSTCBTbl+0xf2>
    1374:	8e ed       	ldi	r24, 0xDE	; 222
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <OSTCBFreeList+0x1>
    137c:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <OSTCBFreeList>
    1380:	20 e1       	ldi	r18, 0x10	; 16
    1382:	4d ed       	ldi	r20, 0xDD	; 221
    1384:	54 e0       	ldi	r21, 0x04	; 4
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	81 e5       	ldi	r24, 0x51	; 81
    138c:	97 e0       	ldi	r25, 0x07	; 7
    138e:	0e 94 1c 09 	call	0x1238	; 0x1238 <OSTaskCreate>
    1392:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <OSInitHookEnd>

00001396 <OSTaskDel>:
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	f0 90 9b 04 	lds	r15, 0x049B	; 0x80049b <OSIntNesting>
    13a4:	f1 10       	cpse	r15, r1
    13a6:	76 c0       	rjmp	.+236    	; 0x1494 <OSTaskDel+0xfe>
    13a8:	f8 94       	cli
    13aa:	8f 3f       	cpi	r24, 0xFF	; 255
    13ac:	29 f4       	brne	.+10     	; 0x13b8 <OSTaskDel+0x22>
    13ae:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <OSTCBCur>
    13b2:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <OSTCBCur+0x1>
    13b6:	81 85       	ldd	r24, Z+9	; 0x09
    13b8:	08 2f       	mov	r16, r24
    13ba:	10 e0       	ldi	r17, 0x00	; 0
    13bc:	00 0f       	add	r16, r16
    13be:	11 1f       	adc	r17, r17
    13c0:	f8 01       	movw	r30, r16
    13c2:	e3 52       	subi	r30, 0x23	; 35
    13c4:	fa 4f       	sbci	r31, 0xFA	; 250
    13c6:	c0 81       	ld	r28, Z
    13c8:	d1 81       	ldd	r29, Z+1	; 0x01
    13ca:	20 97       	sbiw	r28, 0x00	; 0
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <OSTaskDel+0x3a>
    13ce:	5e c0       	rjmp	.+188    	; 0x148c <OSTaskDel+0xf6>
    13d0:	eb 85       	ldd	r30, Y+11	; 0x0b
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d6:	80 95       	com	r24
    13d8:	e9 56       	subi	r30, 0x69	; 105
    13da:	fb 4f       	sbci	r31, 0xFB	; 251
    13dc:	90 81       	ld	r25, Z
    13de:	89 23       	and	r24, r25
    13e0:	80 83       	st	Z, r24
    13e2:	81 11       	cpse	r24, r1
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <OSTaskDel+0x60>
    13e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e8:	98 2f       	mov	r25, r24
    13ea:	90 95       	com	r25
    13ec:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <OSRdyGrp>
    13f0:	89 23       	and	r24, r25
    13f2:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <OSRdyGrp>
    13f6:	1f 82       	std	Y+7, r1	; 0x07
    13f8:	1e 82       	std	Y+6, r1	; 0x06
    13fa:	18 86       	std	Y+8, r1	; 0x08
    13fc:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
    1400:	8f 3f       	cpi	r24, 0xFF	; 255
    1402:	19 f0       	breq	.+6      	; 0x140a <OSTaskDel+0x74>
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <OSLockNesting>
    140a:	78 94       	sei
    140c:	f8 94       	cli
    140e:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <OSLockNesting>
    1412:	88 23       	and	r24, r24
    1414:	19 f0       	breq	.+6      	; 0x141c <OSTaskDel+0x86>
    1416:	81 50       	subi	r24, 0x01	; 1
    1418:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <OSLockNesting>
    141c:	ce 01       	movw	r24, r28
    141e:	0e 94 49 07 	call	0xe92	; 0xe92 <OSTaskDelHook>
    1422:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <OSTaskCtr>
    1426:	81 50       	subi	r24, 0x01	; 1
    1428:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <OSTaskCtr>
    142c:	f8 01       	movw	r30, r16
    142e:	e3 52       	subi	r30, 0x23	; 35
    1430:	fa 4f       	sbci	r31, 0xFA	; 250
    1432:	11 82       	std	Z+1, r1	; 0x01
    1434:	10 82       	st	Z, r1
    1436:	ec 81       	ldd	r30, Y+4	; 0x04
    1438:	fd 81       	ldd	r31, Y+5	; 0x05
    143a:	aa 81       	ldd	r26, Y+2	; 0x02
    143c:	bb 81       	ldd	r27, Y+3	; 0x03
    143e:	30 97       	sbiw	r30, 0x00	; 0
    1440:	e1 f4       	brne	.+56     	; 0x147a <OSTaskDel+0xe4>
    1442:	15 96       	adiw	r26, 0x05	; 5
    1444:	1c 92       	st	X, r1
    1446:	1e 92       	st	-X, r1
    1448:	14 97       	sbiw	r26, 0x04	; 4
    144a:	b0 93 8c 04 	sts	0x048C, r27	; 0x80048c <OSTCBList+0x1>
    144e:	a0 93 8b 04 	sts	0x048B, r26	; 0x80048b <OSTCBList>
    1452:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <OSTCBFreeList>
    1456:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <OSTCBFreeList+0x1>
    145a:	9b 83       	std	Y+3, r25	; 0x03
    145c:	8a 83       	std	Y+2, r24	; 0x02
    145e:	d0 93 92 04 	sts	0x0492, r29	; 0x800492 <OSTCBFreeList+0x1>
    1462:	c0 93 91 04 	sts	0x0491, r28	; 0x800491 <OSTCBFreeList>
    1466:	78 94       	sei
    1468:	0e 94 39 08 	call	0x1072	; 0x1072 <OS_Sched>
    146c:	8f 2d       	mov	r24, r15
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	08 95       	ret
    147a:	b3 83       	std	Z+3, r27	; 0x03
    147c:	a2 83       	std	Z+2, r26	; 0x02
    147e:	aa 81       	ldd	r26, Y+2	; 0x02
    1480:	bb 81       	ldd	r27, Y+3	; 0x03
    1482:	15 96       	adiw	r26, 0x05	; 5
    1484:	fc 93       	st	X, r31
    1486:	ee 93       	st	-X, r30
    1488:	14 97       	sbiw	r26, 0x04	; 4
    148a:	e3 cf       	rjmp	.-58     	; 0x1452 <OSTaskDel+0xbc>
    148c:	78 94       	sei
    148e:	9c e3       	ldi	r25, 0x3C	; 60
    1490:	f9 2e       	mov	r15, r25
    1492:	ec cf       	rjmp	.-40     	; 0x146c <OSTaskDel+0xd6>
    1494:	8f e3       	ldi	r24, 0x3F	; 63
    1496:	f8 2e       	mov	r15, r24
    1498:	e9 cf       	rjmp	.-46     	; 0x146c <OSTaskDel+0xd6>

0000149a <OSTaskDelReq>:
    149a:	8f 3f       	cpi	r24, 0xFF	; 255
    149c:	41 f4       	brne	.+16     	; 0x14ae <OSTaskDelReq+0x14>
    149e:	f8 94       	cli
    14a0:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <OSTCBCur>
    14a4:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <OSTCBCur+0x1>
    14a8:	86 85       	ldd	r24, Z+14	; 0x0e
    14aa:	78 94       	sei
    14ac:	08 95       	ret
    14ae:	f8 94       	cli
    14b0:	e8 2f       	mov	r30, r24
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	e3 52       	subi	r30, 0x23	; 35
    14ba:	fa 4f       	sbci	r31, 0xFA	; 250
    14bc:	01 90       	ld	r0, Z+
    14be:	f0 81       	ld	r31, Z
    14c0:	e0 2d       	mov	r30, r0
    14c2:	8b e0       	ldi	r24, 0x0B	; 11
    14c4:	30 97       	sbiw	r30, 0x00	; 0
    14c6:	89 f3       	breq	.-30     	; 0x14aa <OSTaskDelReq+0x10>
    14c8:	8e e3       	ldi	r24, 0x3E	; 62
    14ca:	86 87       	std	Z+14, r24	; 0x0e
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	ed cf       	rjmp	.-38     	; 0x14aa <OSTaskDelReq+0x10>

000014d0 <OSTimeDly>:
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <OSTimeDly+0x8>
    14d4:	0c 94 94 08 	jmp	0x1128	; 0x1128 <OSTimeDly.part.0>
    14d8:	08 95       	ret

000014da <OSTimeDlyHMSM>:
    14da:	cf 92       	push	r12
    14dc:	df 92       	push	r13
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	81 11       	cpse	r24, r1
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <OSTimeDlyHMSM+0x26>
    14e6:	61 11       	cpse	r22, r1
    14e8:	0b c0       	rjmp	.+22     	; 0x1500 <OSTimeDlyHMSM+0x26>
    14ea:	41 11       	cpse	r20, r1
    14ec:	0c c0       	rjmp	.+24     	; 0x1506 <OSTimeDlyHMSM+0x2c>
    14ee:	21 15       	cp	r18, r1
    14f0:	31 05       	cpc	r19, r1
    14f2:	61 f4       	brne	.+24     	; 0x150c <OSTimeDlyHMSM+0x32>
    14f4:	84 e5       	ldi	r24, 0x54	; 84
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	08 95       	ret
    1500:	6c 33       	cpi	r22, 0x3C	; 60
    1502:	08 f0       	brcs	.+2      	; 0x1506 <OSTimeDlyHMSM+0x2c>
    1504:	4f c0       	rjmp	.+158    	; 0x15a4 <OSTimeDlyHMSM+0xca>
    1506:	4c 33       	cpi	r20, 0x3C	; 60
    1508:	08 f0       	brcs	.+2      	; 0x150c <OSTimeDlyHMSM+0x32>
    150a:	4e c0       	rjmp	.+156    	; 0x15a8 <OSTimeDlyHMSM+0xce>
    150c:	28 3e       	cpi	r18, 0xE8	; 232
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	39 07       	cpc	r19, r25
    1512:	08 f0       	brcs	.+2      	; 0x1516 <OSTimeDlyHMSM+0x3c>
    1514:	4b c0       	rjmp	.+150    	; 0x15ac <OSTimeDlyHMSM+0xd2>
    1516:	f9 01       	movw	r30, r18
    1518:	58 2f       	mov	r21, r24
    151a:	26 2f       	mov	r18, r22
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	ac e3       	ldi	r26, 0x3C	; 60
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__umulhisi3>
    1526:	6b 01       	movw	r12, r22
    1528:	7c 01       	movw	r14, r24
    152a:	c4 0e       	add	r12, r20
    152c:	d1 1c       	adc	r13, r1
    152e:	e1 1c       	adc	r14, r1
    1530:	f1 1c       	adc	r15, r1
    1532:	25 2f       	mov	r18, r21
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	a0 e1       	ldi	r26, 0x10	; 16
    1538:	be e0       	ldi	r27, 0x0E	; 14
    153a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__umulhisi3>
    153e:	a7 01       	movw	r20, r14
    1540:	96 01       	movw	r18, r12
    1542:	26 0f       	add	r18, r22
    1544:	37 1f       	adc	r19, r23
    1546:	48 1f       	adc	r20, r24
    1548:	59 1f       	adc	r21, r25
    154a:	a4 e6       	ldi	r26, 0x64	; 100
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__muluhisi3>
    1552:	6b 01       	movw	r12, r22
    1554:	7c 01       	movw	r14, r24
    1556:	9f 01       	movw	r18, r30
    1558:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__umulhisi3>
    155c:	6c 50       	subi	r22, 0x0C	; 12
    155e:	7e 4f       	sbci	r23, 0xFE	; 254
    1560:	8f 4f       	sbci	r24, 0xFF	; 255
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	28 ee       	ldi	r18, 0xE8	; 232
    1566:	33 e0       	ldi	r19, 0x03	; 3
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__udivmodsi4>
    1570:	d7 01       	movw	r26, r14
    1572:	c6 01       	movw	r24, r12
    1574:	82 0f       	add	r24, r18
    1576:	93 1f       	adc	r25, r19
    1578:	a4 1f       	adc	r26, r20
    157a:	b5 1f       	adc	r27, r21
    157c:	7d 01       	movw	r14, r26
    157e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <OSTimeDly>
    1582:	e1 14       	cp	r14, r1
    1584:	f1 04       	cpc	r15, r1
    1586:	11 f4       	brne	.+4      	; 0x158c <OSTimeDlyHMSM+0xb2>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	b5 cf       	rjmp	.-150    	; 0x14f6 <OSTimeDlyHMSM+0x1c>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e8       	ldi	r25, 0x80	; 128
    1590:	0e 94 94 08 	call	0x1128	; 0x1128 <OSTimeDly.part.0>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e8       	ldi	r25, 0x80	; 128
    1598:	0e 94 94 08 	call	0x1128	; 0x1128 <OSTimeDly.part.0>
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	e8 1a       	sub	r14, r24
    15a0:	f1 08       	sbc	r15, r1
    15a2:	ef cf       	rjmp	.-34     	; 0x1582 <OSTimeDlyHMSM+0xa8>
    15a4:	81 e5       	ldi	r24, 0x51	; 81
    15a6:	a7 cf       	rjmp	.-178    	; 0x14f6 <OSTimeDlyHMSM+0x1c>
    15a8:	82 e5       	ldi	r24, 0x52	; 82
    15aa:	a5 cf       	rjmp	.-182    	; 0x14f6 <OSTimeDlyHMSM+0x1c>
    15ac:	83 e5       	ldi	r24, 0x53	; 83
    15ae:	a3 cf       	rjmp	.-186    	; 0x14f6 <OSTimeDlyHMSM+0x1c>

000015b0 <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    15b0:	0e 94 23 05 	call	0xa46	; 0xa46 <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    15b4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	0e 94 46 04 	call	0x88c	; 0x88c <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    15c4:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <myrobot+0x1>
    15c8:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    15cc:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <myrobot+0x3>
    15d0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    15d4:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <myrobot+0x4>
    myrobot.KP = DEFAULT_KP; //0.03
    15d8:	84 ef       	ldi	r24, 0xF4	; 244
    15da:	9d ef       	ldi	r25, 0xFD	; 253
    15dc:	a4 e5       	ldi	r26, 0x54	; 84
    15de:	bd e3       	ldi	r27, 0x3D	; 61
    15e0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <myrobot+0x5>
    15e4:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <myrobot+0x6>
    15e8:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <myrobot+0x7>
    15ec:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <myrobot+0x8>
    myrobot.KD = DEFAULT_KD; //0.07
    15f0:	81 e3       	ldi	r24, 0x31	; 49
    15f2:	98 e0       	ldi	r25, 0x08	; 8
    15f4:	ac e2       	ldi	r26, 0x2C	; 44
    15f6:	bd e3       	ldi	r27, 0x3D	; 61
    15f8:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <myrobot+0x9>
    15fc:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <myrobot+0xa>
    1600:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <myrobot+0xb>
    1604:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <myrobot+0xc>
    myrobot.KI = DEFAULT_KI; //0.0004
    1608:	8c ea       	ldi	r24, 0xAC	; 172
    160a:	95 ec       	ldi	r25, 0xC5	; 197
    160c:	a7 ea       	ldi	r26, 0xA7	; 167
    160e:	b7 e3       	ldi	r27, 0x37	; 55
    1610:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <myrobot+0xd>
    1614:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <myrobot+0xe>
    1618:	a0 93 e1 02 	sts	0x02E1, r26	; 0x8002e1 <myrobot+0xf>
    161c:	b0 93 e2 02 	sts	0x02E2, r27	; 0x8002e2 <myrobot+0x10>
    myrobot.lastError = 0.0;
    1620:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <myrobot+0x11>
    1624:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <myrobot+0x12>
    1628:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <myrobot+0x13>
    162c:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <myrobot+0x14>
    myrobot.integral = 0.0;
    1630:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <myrobot+0x15>
    1634:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <myrobot+0x16>
    1638:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <myrobot+0x17>
    163c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <myrobot+0x18>
    myrobot.prevLeftSpeed = 0;
    1640:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <myrobot+0x1c>
    1644:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <myrobot+0x1b>
    myrobot.prevRightSpeed = 0;
    1648:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <myrobot+0x1e>
    164c:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <myrobot+0x1d>
    myrobot.inRoundabout = 0;
    1650:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <myrobot+0x20>
    1654:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <myrobot+0x1f>
    myrobot.clickCount = 0;
    1658:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <myrobot+0x22>
    165c:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <myrobot+0x21>
    myrobot.inLightField = 0;
    1660:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <myrobot+0x24>
    1664:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <myrobot+0x23>
    myrobot.inBlackBox = 0;
    1668:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <myrobot+0x26>
    166c:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <myrobot+0x25>
    myrobot.turn = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <myrobot+0x28>
    1678:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <myrobot+0x27>
    myrobot.goal = 1000;                                      /* goal is to follow on the middle sensor */
    167c:	88 ee       	ldi	r24, 0xE8	; 232
    167e:	93 e0       	ldi	r25, 0x03	; 3
    1680:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <myrobot+0x1a>
    1684:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <myrobot+0x19>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	4a ef       	ldi	r20, 0xFA	; 250
    168c:	53 e0       	ldi	r21, 0x03	; 3
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	8f e7       	ldi	r24, 0x7F	; 127
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 1c 09 	call	0x1238	; 0x1238 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    169a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <robo_Honk>
    169e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    16a2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <OSStart>
    16a6:	ff cf       	rjmp	.-2      	; 0x16a6 <main+0xf6>

000016a8 <__udivmodhi4>:
    16a8:	aa 1b       	sub	r26, r26
    16aa:	bb 1b       	sub	r27, r27
    16ac:	51 e1       	ldi	r21, 0x11	; 17
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <__udivmodhi4_ep>

000016b0 <__udivmodhi4_loop>:
    16b0:	aa 1f       	adc	r26, r26
    16b2:	bb 1f       	adc	r27, r27
    16b4:	a6 17       	cp	r26, r22
    16b6:	b7 07       	cpc	r27, r23
    16b8:	10 f0       	brcs	.+4      	; 0x16be <__udivmodhi4_ep>
    16ba:	a6 1b       	sub	r26, r22
    16bc:	b7 0b       	sbc	r27, r23

000016be <__udivmodhi4_ep>:
    16be:	88 1f       	adc	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	5a 95       	dec	r21
    16c4:	a9 f7       	brne	.-22     	; 0x16b0 <__udivmodhi4_loop>
    16c6:	80 95       	com	r24
    16c8:	90 95       	com	r25
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	08 95       	ret

000016d0 <__divmodhi4>:
    16d0:	97 fb       	bst	r25, 7
    16d2:	07 2e       	mov	r0, r23
    16d4:	16 f4       	brtc	.+4      	; 0x16da <__divmodhi4+0xa>
    16d6:	00 94       	com	r0
    16d8:	07 d0       	rcall	.+14     	; 0x16e8 <__divmodhi4_neg1>
    16da:	77 fd       	sbrc	r23, 7
    16dc:	09 d0       	rcall	.+18     	; 0x16f0 <__divmodhi4_neg2>
    16de:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodhi4>
    16e2:	07 fc       	sbrc	r0, 7
    16e4:	05 d0       	rcall	.+10     	; 0x16f0 <__divmodhi4_neg2>
    16e6:	3e f4       	brtc	.+14     	; 0x16f6 <__divmodhi4_exit>

000016e8 <__divmodhi4_neg1>:
    16e8:	90 95       	com	r25
    16ea:	81 95       	neg	r24
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
    16ee:	08 95       	ret

000016f0 <__divmodhi4_neg2>:
    16f0:	70 95       	com	r23
    16f2:	61 95       	neg	r22
    16f4:	7f 4f       	sbci	r23, 0xFF	; 255

000016f6 <__divmodhi4_exit>:
    16f6:	08 95       	ret

000016f8 <__udivmodsi4>:
    16f8:	a1 e2       	ldi	r26, 0x21	; 33
    16fa:	1a 2e       	mov	r1, r26
    16fc:	aa 1b       	sub	r26, r26
    16fe:	bb 1b       	sub	r27, r27
    1700:	fd 01       	movw	r30, r26
    1702:	0d c0       	rjmp	.+26     	; 0x171e <__udivmodsi4_ep>

00001704 <__udivmodsi4_loop>:
    1704:	aa 1f       	adc	r26, r26
    1706:	bb 1f       	adc	r27, r27
    1708:	ee 1f       	adc	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	a2 17       	cp	r26, r18
    170e:	b3 07       	cpc	r27, r19
    1710:	e4 07       	cpc	r30, r20
    1712:	f5 07       	cpc	r31, r21
    1714:	20 f0       	brcs	.+8      	; 0x171e <__udivmodsi4_ep>
    1716:	a2 1b       	sub	r26, r18
    1718:	b3 0b       	sbc	r27, r19
    171a:	e4 0b       	sbc	r30, r20
    171c:	f5 0b       	sbc	r31, r21

0000171e <__udivmodsi4_ep>:
    171e:	66 1f       	adc	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	1a 94       	dec	r1
    1728:	69 f7       	brne	.-38     	; 0x1704 <__udivmodsi4_loop>
    172a:	60 95       	com	r22
    172c:	70 95       	com	r23
    172e:	80 95       	com	r24
    1730:	90 95       	com	r25
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	bd 01       	movw	r22, r26
    1738:	cf 01       	movw	r24, r30
    173a:	08 95       	ret

0000173c <__tablejump2__>:
    173c:	ee 0f       	add	r30, r30
    173e:	ff 1f       	adc	r31, r31
    1740:	05 90       	lpm	r0, Z+
    1742:	f4 91       	lpm	r31, Z
    1744:	e0 2d       	mov	r30, r0
    1746:	09 94       	ijmp

00001748 <__umulhisi3>:
    1748:	a2 9f       	mul	r26, r18
    174a:	b0 01       	movw	r22, r0
    174c:	b3 9f       	mul	r27, r19
    174e:	c0 01       	movw	r24, r0
    1750:	a3 9f       	mul	r26, r19
    1752:	70 0d       	add	r23, r0
    1754:	81 1d       	adc	r24, r1
    1756:	11 24       	eor	r1, r1
    1758:	91 1d       	adc	r25, r1
    175a:	b2 9f       	mul	r27, r18
    175c:	70 0d       	add	r23, r0
    175e:	81 1d       	adc	r24, r1
    1760:	11 24       	eor	r1, r1
    1762:	91 1d       	adc	r25, r1
    1764:	08 95       	ret

00001766 <__muluhisi3>:
    1766:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__umulhisi3>
    176a:	a5 9f       	mul	r26, r21
    176c:	90 0d       	add	r25, r0
    176e:	b4 9f       	mul	r27, r20
    1770:	90 0d       	add	r25, r0
    1772:	a4 9f       	mul	r26, r20
    1774:	80 0d       	add	r24, r0
    1776:	91 1d       	adc	r25, r1
    1778:	11 24       	eor	r1, r1
    177a:	08 95       	ret

0000177c <__subsf3>:
    177c:	50 58       	subi	r21, 0x80	; 128

0000177e <__addsf3>:
    177e:	bb 27       	eor	r27, r27
    1780:	aa 27       	eor	r26, r26
    1782:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__addsf3x>
    1786:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_round>
    178a:	0e 94 a7 0c 	call	0x194e	; 0x194e <__fp_pscA>
    178e:	38 f0       	brcs	.+14     	; 0x179e <__addsf3+0x20>
    1790:	0e 94 ae 0c 	call	0x195c	; 0x195c <__fp_pscB>
    1794:	20 f0       	brcs	.+8      	; 0x179e <__addsf3+0x20>
    1796:	39 f4       	brne	.+14     	; 0x17a6 <__addsf3+0x28>
    1798:	9f 3f       	cpi	r25, 0xFF	; 255
    179a:	19 f4       	brne	.+6      	; 0x17a2 <__addsf3+0x24>
    179c:	26 f4       	brtc	.+8      	; 0x17a6 <__addsf3+0x28>
    179e:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_nan>
    17a2:	0e f4       	brtc	.+2      	; 0x17a6 <__addsf3+0x28>
    17a4:	e0 95       	com	r30
    17a6:	e7 fb       	bst	r30, 7
    17a8:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__fp_inf>

000017ac <__addsf3x>:
    17ac:	e9 2f       	mov	r30, r25
    17ae:	0e 94 c6 0c 	call	0x198c	; 0x198c <__fp_split3>
    17b2:	58 f3       	brcs	.-42     	; 0x178a <__addsf3+0xc>
    17b4:	ba 17       	cp	r27, r26
    17b6:	62 07       	cpc	r22, r18
    17b8:	73 07       	cpc	r23, r19
    17ba:	84 07       	cpc	r24, r20
    17bc:	95 07       	cpc	r25, r21
    17be:	20 f0       	brcs	.+8      	; 0x17c8 <__addsf3x+0x1c>
    17c0:	79 f4       	brne	.+30     	; 0x17e0 <__addsf3x+0x34>
    17c2:	a6 f5       	brtc	.+104    	; 0x182c <__addsf3x+0x80>
    17c4:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_zero>
    17c8:	0e f4       	brtc	.+2      	; 0x17cc <__addsf3x+0x20>
    17ca:	e0 95       	com	r30
    17cc:	0b 2e       	mov	r0, r27
    17ce:	ba 2f       	mov	r27, r26
    17d0:	a0 2d       	mov	r26, r0
    17d2:	0b 01       	movw	r0, r22
    17d4:	b9 01       	movw	r22, r18
    17d6:	90 01       	movw	r18, r0
    17d8:	0c 01       	movw	r0, r24
    17da:	ca 01       	movw	r24, r20
    17dc:	a0 01       	movw	r20, r0
    17de:	11 24       	eor	r1, r1
    17e0:	ff 27       	eor	r31, r31
    17e2:	59 1b       	sub	r21, r25
    17e4:	99 f0       	breq	.+38     	; 0x180c <__addsf3x+0x60>
    17e6:	59 3f       	cpi	r21, 0xF9	; 249
    17e8:	50 f4       	brcc	.+20     	; 0x17fe <__addsf3x+0x52>
    17ea:	50 3e       	cpi	r21, 0xE0	; 224
    17ec:	68 f1       	brcs	.+90     	; 0x1848 <__addsf3x+0x9c>
    17ee:	1a 16       	cp	r1, r26
    17f0:	f0 40       	sbci	r31, 0x00	; 0
    17f2:	a2 2f       	mov	r26, r18
    17f4:	23 2f       	mov	r18, r19
    17f6:	34 2f       	mov	r19, r20
    17f8:	44 27       	eor	r20, r20
    17fa:	58 5f       	subi	r21, 0xF8	; 248
    17fc:	f3 cf       	rjmp	.-26     	; 0x17e4 <__addsf3x+0x38>
    17fe:	46 95       	lsr	r20
    1800:	37 95       	ror	r19
    1802:	27 95       	ror	r18
    1804:	a7 95       	ror	r26
    1806:	f0 40       	sbci	r31, 0x00	; 0
    1808:	53 95       	inc	r21
    180a:	c9 f7       	brne	.-14     	; 0x17fe <__addsf3x+0x52>
    180c:	7e f4       	brtc	.+30     	; 0x182c <__addsf3x+0x80>
    180e:	1f 16       	cp	r1, r31
    1810:	ba 0b       	sbc	r27, r26
    1812:	62 0b       	sbc	r22, r18
    1814:	73 0b       	sbc	r23, r19
    1816:	84 0b       	sbc	r24, r20
    1818:	ba f0       	brmi	.+46     	; 0x1848 <__addsf3x+0x9c>
    181a:	91 50       	subi	r25, 0x01	; 1
    181c:	a1 f0       	breq	.+40     	; 0x1846 <__addsf3x+0x9a>
    181e:	ff 0f       	add	r31, r31
    1820:	bb 1f       	adc	r27, r27
    1822:	66 1f       	adc	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	88 1f       	adc	r24, r24
    1828:	c2 f7       	brpl	.-16     	; 0x181a <__addsf3x+0x6e>
    182a:	0e c0       	rjmp	.+28     	; 0x1848 <__addsf3x+0x9c>
    182c:	ba 0f       	add	r27, r26
    182e:	62 1f       	adc	r22, r18
    1830:	73 1f       	adc	r23, r19
    1832:	84 1f       	adc	r24, r20
    1834:	48 f4       	brcc	.+18     	; 0x1848 <__addsf3x+0x9c>
    1836:	87 95       	ror	r24
    1838:	77 95       	ror	r23
    183a:	67 95       	ror	r22
    183c:	b7 95       	ror	r27
    183e:	f7 95       	ror	r31
    1840:	9e 3f       	cpi	r25, 0xFE	; 254
    1842:	08 f0       	brcs	.+2      	; 0x1846 <__addsf3x+0x9a>
    1844:	b0 cf       	rjmp	.-160    	; 0x17a6 <__addsf3+0x28>
    1846:	93 95       	inc	r25
    1848:	88 0f       	add	r24, r24
    184a:	08 f0       	brcs	.+2      	; 0x184e <__addsf3x+0xa2>
    184c:	99 27       	eor	r25, r25
    184e:	ee 0f       	add	r30, r30
    1850:	97 95       	ror	r25
    1852:	87 95       	ror	r24
    1854:	08 95       	ret

00001856 <__fixsfsi>:
    1856:	0e 94 32 0c 	call	0x1864	; 0x1864 <__fixunssfsi>
    185a:	68 94       	set
    185c:	b1 11       	cpse	r27, r1
    185e:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__fp_szero>
    1862:	08 95       	ret

00001864 <__fixunssfsi>:
    1864:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_splitA>
    1868:	88 f0       	brcs	.+34     	; 0x188c <__fixunssfsi+0x28>
    186a:	9f 57       	subi	r25, 0x7F	; 127
    186c:	98 f0       	brcs	.+38     	; 0x1894 <__fixunssfsi+0x30>
    186e:	b9 2f       	mov	r27, r25
    1870:	99 27       	eor	r25, r25
    1872:	b7 51       	subi	r27, 0x17	; 23
    1874:	b0 f0       	brcs	.+44     	; 0x18a2 <__fixunssfsi+0x3e>
    1876:	e1 f0       	breq	.+56     	; 0x18b0 <__fixunssfsi+0x4c>
    1878:	66 0f       	add	r22, r22
    187a:	77 1f       	adc	r23, r23
    187c:	88 1f       	adc	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	1a f0       	brmi	.+6      	; 0x1888 <__fixunssfsi+0x24>
    1882:	ba 95       	dec	r27
    1884:	c9 f7       	brne	.-14     	; 0x1878 <__fixunssfsi+0x14>
    1886:	14 c0       	rjmp	.+40     	; 0x18b0 <__fixunssfsi+0x4c>
    1888:	b1 30       	cpi	r27, 0x01	; 1
    188a:	91 f0       	breq	.+36     	; 0x18b0 <__fixunssfsi+0x4c>
    188c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <__fp_zero>
    1890:	b1 e0       	ldi	r27, 0x01	; 1
    1892:	08 95       	ret
    1894:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__fp_zero>
    1898:	67 2f       	mov	r22, r23
    189a:	78 2f       	mov	r23, r24
    189c:	88 27       	eor	r24, r24
    189e:	b8 5f       	subi	r27, 0xF8	; 248
    18a0:	39 f0       	breq	.+14     	; 0x18b0 <__fixunssfsi+0x4c>
    18a2:	b9 3f       	cpi	r27, 0xF9	; 249
    18a4:	cc f3       	brlt	.-14     	; 0x1898 <__fixunssfsi+0x34>
    18a6:	86 95       	lsr	r24
    18a8:	77 95       	ror	r23
    18aa:	67 95       	ror	r22
    18ac:	b3 95       	inc	r27
    18ae:	d9 f7       	brne	.-10     	; 0x18a6 <__fixunssfsi+0x42>
    18b0:	3e f4       	brtc	.+14     	; 0x18c0 <__fixunssfsi+0x5c>
    18b2:	90 95       	com	r25
    18b4:	80 95       	com	r24
    18b6:	70 95       	com	r23
    18b8:	61 95       	neg	r22
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	8f 4f       	sbci	r24, 0xFF	; 255
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	08 95       	ret

000018c2 <__floatunsisf>:
    18c2:	e8 94       	clt
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <__floatsisf+0x12>

000018c6 <__floatsisf>:
    18c6:	97 fb       	bst	r25, 7
    18c8:	3e f4       	brtc	.+14     	; 0x18d8 <__floatsisf+0x12>
    18ca:	90 95       	com	r25
    18cc:	80 95       	com	r24
    18ce:	70 95       	com	r23
    18d0:	61 95       	neg	r22
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	8f 4f       	sbci	r24, 0xFF	; 255
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	99 23       	and	r25, r25
    18da:	a9 f0       	breq	.+42     	; 0x1906 <__floatsisf+0x40>
    18dc:	f9 2f       	mov	r31, r25
    18de:	96 e9       	ldi	r25, 0x96	; 150
    18e0:	bb 27       	eor	r27, r27
    18e2:	93 95       	inc	r25
    18e4:	f6 95       	lsr	r31
    18e6:	87 95       	ror	r24
    18e8:	77 95       	ror	r23
    18ea:	67 95       	ror	r22
    18ec:	b7 95       	ror	r27
    18ee:	f1 11       	cpse	r31, r1
    18f0:	f8 cf       	rjmp	.-16     	; 0x18e2 <__floatsisf+0x1c>
    18f2:	fa f4       	brpl	.+62     	; 0x1932 <__floatsisf+0x6c>
    18f4:	bb 0f       	add	r27, r27
    18f6:	11 f4       	brne	.+4      	; 0x18fc <__floatsisf+0x36>
    18f8:	60 ff       	sbrs	r22, 0
    18fa:	1b c0       	rjmp	.+54     	; 0x1932 <__floatsisf+0x6c>
    18fc:	6f 5f       	subi	r22, 0xFF	; 255
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	8f 4f       	sbci	r24, 0xFF	; 255
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	16 c0       	rjmp	.+44     	; 0x1932 <__floatsisf+0x6c>
    1906:	88 23       	and	r24, r24
    1908:	11 f0       	breq	.+4      	; 0x190e <__floatsisf+0x48>
    190a:	96 e9       	ldi	r25, 0x96	; 150
    190c:	11 c0       	rjmp	.+34     	; 0x1930 <__floatsisf+0x6a>
    190e:	77 23       	and	r23, r23
    1910:	21 f0       	breq	.+8      	; 0x191a <__floatsisf+0x54>
    1912:	9e e8       	ldi	r25, 0x8E	; 142
    1914:	87 2f       	mov	r24, r23
    1916:	76 2f       	mov	r23, r22
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <__floatsisf+0x5e>
    191a:	66 23       	and	r22, r22
    191c:	71 f0       	breq	.+28     	; 0x193a <__floatsisf+0x74>
    191e:	96 e8       	ldi	r25, 0x86	; 134
    1920:	86 2f       	mov	r24, r22
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	2a f0       	brmi	.+10     	; 0x1932 <__floatsisf+0x6c>
    1928:	9a 95       	dec	r25
    192a:	66 0f       	add	r22, r22
    192c:	77 1f       	adc	r23, r23
    192e:	88 1f       	adc	r24, r24
    1930:	da f7       	brpl	.-10     	; 0x1928 <__floatsisf+0x62>
    1932:	88 0f       	add	r24, r24
    1934:	96 95       	lsr	r25
    1936:	87 95       	ror	r24
    1938:	97 f9       	bld	r25, 7
    193a:	08 95       	ret

0000193c <__fp_inf>:
    193c:	97 f9       	bld	r25, 7
    193e:	9f 67       	ori	r25, 0x7F	; 127
    1940:	80 e8       	ldi	r24, 0x80	; 128
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	08 95       	ret

00001948 <__fp_nan>:
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	80 ec       	ldi	r24, 0xC0	; 192
    194c:	08 95       	ret

0000194e <__fp_pscA>:
    194e:	00 24       	eor	r0, r0
    1950:	0a 94       	dec	r0
    1952:	16 16       	cp	r1, r22
    1954:	17 06       	cpc	r1, r23
    1956:	18 06       	cpc	r1, r24
    1958:	09 06       	cpc	r0, r25
    195a:	08 95       	ret

0000195c <__fp_pscB>:
    195c:	00 24       	eor	r0, r0
    195e:	0a 94       	dec	r0
    1960:	12 16       	cp	r1, r18
    1962:	13 06       	cpc	r1, r19
    1964:	14 06       	cpc	r1, r20
    1966:	05 06       	cpc	r0, r21
    1968:	08 95       	ret

0000196a <__fp_round>:
    196a:	09 2e       	mov	r0, r25
    196c:	03 94       	inc	r0
    196e:	00 0c       	add	r0, r0
    1970:	11 f4       	brne	.+4      	; 0x1976 <__fp_round+0xc>
    1972:	88 23       	and	r24, r24
    1974:	52 f0       	brmi	.+20     	; 0x198a <__fp_round+0x20>
    1976:	bb 0f       	add	r27, r27
    1978:	40 f4       	brcc	.+16     	; 0x198a <__fp_round+0x20>
    197a:	bf 2b       	or	r27, r31
    197c:	11 f4       	brne	.+4      	; 0x1982 <__fp_round+0x18>
    197e:	60 ff       	sbrs	r22, 0
    1980:	04 c0       	rjmp	.+8      	; 0x198a <__fp_round+0x20>
    1982:	6f 5f       	subi	r22, 0xFF	; 255
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	8f 4f       	sbci	r24, 0xFF	; 255
    1988:	9f 4f       	sbci	r25, 0xFF	; 255
    198a:	08 95       	ret

0000198c <__fp_split3>:
    198c:	57 fd       	sbrc	r21, 7
    198e:	90 58       	subi	r25, 0x80	; 128
    1990:	44 0f       	add	r20, r20
    1992:	55 1f       	adc	r21, r21
    1994:	59 f0       	breq	.+22     	; 0x19ac <__fp_splitA+0x10>
    1996:	5f 3f       	cpi	r21, 0xFF	; 255
    1998:	71 f0       	breq	.+28     	; 0x19b6 <__fp_splitA+0x1a>
    199a:	47 95       	ror	r20

0000199c <__fp_splitA>:
    199c:	88 0f       	add	r24, r24
    199e:	97 fb       	bst	r25, 7
    19a0:	99 1f       	adc	r25, r25
    19a2:	61 f0       	breq	.+24     	; 0x19bc <__fp_splitA+0x20>
    19a4:	9f 3f       	cpi	r25, 0xFF	; 255
    19a6:	79 f0       	breq	.+30     	; 0x19c6 <__fp_splitA+0x2a>
    19a8:	87 95       	ror	r24
    19aa:	08 95       	ret
    19ac:	12 16       	cp	r1, r18
    19ae:	13 06       	cpc	r1, r19
    19b0:	14 06       	cpc	r1, r20
    19b2:	55 1f       	adc	r21, r21
    19b4:	f2 cf       	rjmp	.-28     	; 0x199a <__fp_split3+0xe>
    19b6:	46 95       	lsr	r20
    19b8:	f1 df       	rcall	.-30     	; 0x199c <__fp_splitA>
    19ba:	08 c0       	rjmp	.+16     	; 0x19cc <__fp_splitA+0x30>
    19bc:	16 16       	cp	r1, r22
    19be:	17 06       	cpc	r1, r23
    19c0:	18 06       	cpc	r1, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	f1 cf       	rjmp	.-30     	; 0x19a8 <__fp_splitA+0xc>
    19c6:	86 95       	lsr	r24
    19c8:	71 05       	cpc	r23, r1
    19ca:	61 05       	cpc	r22, r1
    19cc:	08 94       	sec
    19ce:	08 95       	ret

000019d0 <__fp_zero>:
    19d0:	e8 94       	clt

000019d2 <__fp_szero>:
    19d2:	bb 27       	eor	r27, r27
    19d4:	66 27       	eor	r22, r22
    19d6:	77 27       	eor	r23, r23
    19d8:	cb 01       	movw	r24, r22
    19da:	97 f9       	bld	r25, 7
    19dc:	08 95       	ret

000019de <__mulsf3>:
    19de:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsf3x>
    19e2:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_round>
    19e6:	0e 94 a7 0c 	call	0x194e	; 0x194e <__fp_pscA>
    19ea:	38 f0       	brcs	.+14     	; 0x19fa <__mulsf3+0x1c>
    19ec:	0e 94 ae 0c 	call	0x195c	; 0x195c <__fp_pscB>
    19f0:	20 f0       	brcs	.+8      	; 0x19fa <__mulsf3+0x1c>
    19f2:	95 23       	and	r25, r21
    19f4:	11 f0       	breq	.+4      	; 0x19fa <__mulsf3+0x1c>
    19f6:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__fp_inf>
    19fa:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_nan>
    19fe:	11 24       	eor	r1, r1
    1a00:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__fp_szero>

00001a04 <__mulsf3x>:
    1a04:	0e 94 c6 0c 	call	0x198c	; 0x198c <__fp_split3>
    1a08:	70 f3       	brcs	.-36     	; 0x19e6 <__mulsf3+0x8>

00001a0a <__mulsf3_pse>:
    1a0a:	95 9f       	mul	r25, r21
    1a0c:	c1 f3       	breq	.-16     	; 0x19fe <__mulsf3+0x20>
    1a0e:	95 0f       	add	r25, r21
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	55 1f       	adc	r21, r21
    1a14:	62 9f       	mul	r22, r18
    1a16:	f0 01       	movw	r30, r0
    1a18:	72 9f       	mul	r23, r18
    1a1a:	bb 27       	eor	r27, r27
    1a1c:	f0 0d       	add	r31, r0
    1a1e:	b1 1d       	adc	r27, r1
    1a20:	63 9f       	mul	r22, r19
    1a22:	aa 27       	eor	r26, r26
    1a24:	f0 0d       	add	r31, r0
    1a26:	b1 1d       	adc	r27, r1
    1a28:	aa 1f       	adc	r26, r26
    1a2a:	64 9f       	mul	r22, r20
    1a2c:	66 27       	eor	r22, r22
    1a2e:	b0 0d       	add	r27, r0
    1a30:	a1 1d       	adc	r26, r1
    1a32:	66 1f       	adc	r22, r22
    1a34:	82 9f       	mul	r24, r18
    1a36:	22 27       	eor	r18, r18
    1a38:	b0 0d       	add	r27, r0
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	62 1f       	adc	r22, r18
    1a3e:	73 9f       	mul	r23, r19
    1a40:	b0 0d       	add	r27, r0
    1a42:	a1 1d       	adc	r26, r1
    1a44:	62 1f       	adc	r22, r18
    1a46:	83 9f       	mul	r24, r19
    1a48:	a0 0d       	add	r26, r0
    1a4a:	61 1d       	adc	r22, r1
    1a4c:	22 1f       	adc	r18, r18
    1a4e:	74 9f       	mul	r23, r20
    1a50:	33 27       	eor	r19, r19
    1a52:	a0 0d       	add	r26, r0
    1a54:	61 1d       	adc	r22, r1
    1a56:	23 1f       	adc	r18, r19
    1a58:	84 9f       	mul	r24, r20
    1a5a:	60 0d       	add	r22, r0
    1a5c:	21 1d       	adc	r18, r1
    1a5e:	82 2f       	mov	r24, r18
    1a60:	76 2f       	mov	r23, r22
    1a62:	6a 2f       	mov	r22, r26
    1a64:	11 24       	eor	r1, r1
    1a66:	9f 57       	subi	r25, 0x7F	; 127
    1a68:	50 40       	sbci	r21, 0x00	; 0
    1a6a:	9a f0       	brmi	.+38     	; 0x1a92 <__mulsf3_pse+0x88>
    1a6c:	f1 f0       	breq	.+60     	; 0x1aaa <__mulsf3_pse+0xa0>
    1a6e:	88 23       	and	r24, r24
    1a70:	4a f0       	brmi	.+18     	; 0x1a84 <__mulsf3_pse+0x7a>
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	bb 1f       	adc	r27, r27
    1a78:	66 1f       	adc	r22, r22
    1a7a:	77 1f       	adc	r23, r23
    1a7c:	88 1f       	adc	r24, r24
    1a7e:	91 50       	subi	r25, 0x01	; 1
    1a80:	50 40       	sbci	r21, 0x00	; 0
    1a82:	a9 f7       	brne	.-22     	; 0x1a6e <__mulsf3_pse+0x64>
    1a84:	9e 3f       	cpi	r25, 0xFE	; 254
    1a86:	51 05       	cpc	r21, r1
    1a88:	80 f0       	brcs	.+32     	; 0x1aaa <__mulsf3_pse+0xa0>
    1a8a:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__fp_inf>
    1a8e:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__fp_szero>
    1a92:	5f 3f       	cpi	r21, 0xFF	; 255
    1a94:	e4 f3       	brlt	.-8      	; 0x1a8e <__mulsf3_pse+0x84>
    1a96:	98 3e       	cpi	r25, 0xE8	; 232
    1a98:	d4 f3       	brlt	.-12     	; 0x1a8e <__mulsf3_pse+0x84>
    1a9a:	86 95       	lsr	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	b7 95       	ror	r27
    1aa2:	f7 95       	ror	r31
    1aa4:	e7 95       	ror	r30
    1aa6:	9f 5f       	subi	r25, 0xFF	; 255
    1aa8:	c1 f7       	brne	.-16     	; 0x1a9a <__mulsf3_pse+0x90>
    1aaa:	fe 2b       	or	r31, r30
    1aac:	88 0f       	add	r24, r24
    1aae:	91 1d       	adc	r25, r1
    1ab0:	96 95       	lsr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	97 f9       	bld	r25, 7
    1ab6:	08 95       	ret

00001ab8 <_exit>:
    1ab8:	f8 94       	cli

00001aba <__stop_program>:
    1aba:	ff cf       	rjmp	.-2      	; 0x1aba <__stop_program>
