
robocarChatGPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00001742  000017d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a7  0080021a  0080021a  000018f0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000016  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001960  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001692  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008d5  00000000  00000000  0000315a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b02  00000000  00000000  00003a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000bc  00000000  00000000  00004534  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006c2  00000000  00000000  000045f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000272  00000000  00000000  00004cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00004f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e4       	ldi	r30, 0x42	; 66
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3c       	cpi	r26, 0xC1	; 193
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2b 09 	call	0x1256	; 0x1256 <main>
      9e:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      a8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 c0 08 	call	0x1180	; 0x1180 <OSTimeDlyHMSM>
void CheckCollision (void *data)
{
    for(;;)
    {
        // myrobot.timer++;
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <myrobot>
      ce:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <myrobot+0x1>
      d2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
      d6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
      da:	0e 94 99 02 	call	0x532	; 0x532 <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 250 ms              */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 c0 08 	call	0x1180	; 0x1180 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    OS_ticks_init();                                        /* enable RTOS timer tick        */
      ee:	0e 94 67 03 	call	0x6ce	; 0x6ce <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /* Task function                 */
      f2:	22 e0       	ldi	r18, 0x02	; 2
      f4:	49 e9       	ldi	r20, 0x99	; 153
      f6:	52 e0       	ldi	r21, 0x02	; 2
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	83 e5       	ldi	r24, 0x53	; 83
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 6f 07 	call	0xede	; 0xede <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     104:	23 e0       	ldi	r18, 0x03	; 3
     106:	4c e3       	ldi	r20, 0x3C	; 60
     108:	53 e0       	ldi	r21, 0x03	; 3
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	85 e6       	ldi	r24, 0x65	; 101
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 6f 07 	call	0xede	; 0xede <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /* stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /* priority of task              */

    OSTaskCreate(Navig,                                     /* Task function                 */
     116:	24 e0       	ldi	r18, 0x04	; 4
     118:	4c e3       	ldi	r20, 0x3C	; 60
     11a:	54 e0       	ldi	r21, 0x04	; 4
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	87 e8       	ldi	r24, 0x87	; 135
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 6f 07 	call	0xede	; 0xede <OSTaskCreate>
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	45 e0       	ldi	r20, 0x05	; 5
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 c0 08 	call	0x1180	; 0x1180 <OSTimeDlyHMSM>
     136:	f8 cf       	rjmp	.-16     	; 0x128 <TaskStart+0x3a>

00000138 <constrain>:
    int inRoundabout;
    int turn;
} myrobot;

int constrain(int value, int lowerBound, int upperBound) {
    if (value < lowerBound) {
     138:	86 17       	cp	r24, r22
     13a:	97 07       	cpc	r25, r23
     13c:	2c f0       	brlt	.+10     	; 0x148 <constrain+0x10>
     13e:	bc 01       	movw	r22, r24
     140:	48 17       	cp	r20, r24
     142:	59 07       	cpc	r21, r25
     144:	0c f4       	brge	.+2      	; 0x148 <constrain+0x10>
     146:	ba 01       	movw	r22, r20
        return upperBound;
    }
    else {
        return value;
    }
}
     148:	cb 01       	movw	r24, r22
     14a:	08 95       	ret

0000014c <absoluteValue>:

int absoluteValue(int num) {
     14c:	97 ff       	sbrs	r25, 7
     14e:	03 c0       	rjmp	.+6      	; 0x156 <absoluteValue+0xa>
     150:	91 95       	neg	r25
     152:	81 95       	neg	r24
     154:	91 09       	sbc	r25, r1
    if (num < 0)
        return -num;
    else
        return num;
}
     156:	08 95       	ret

00000158 <pidControl>:

void pidControl(int sense) {
     158:	8f 92       	push	r8
     15a:	9f 92       	push	r9
     15c:	af 92       	push	r10
     15e:	bf 92       	push	r11
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inRoundabout == 1) {
     168:	20 91 b9 02 	lds	r18, 0x02B9	; 0x8002b9 <myrobot+0x1f>
     16c:	30 91 ba 02 	lds	r19, 0x02BA	; 0x8002ba <myrobot+0x20>
        motorSpeed = 40;
        myrobot.KP = DEFAULT_KP * 1.3;
     170:	45 e1       	ldi	r20, 0x15	; 21
     172:	5e ea       	ldi	r21, 0xAE	; 174
     174:	67 ec       	ldi	r22, 0xC7	; 199
     176:	7d e3       	ldi	r23, 0x3D	; 61

void pidControl(int sense) {

    int motorSpeed = DEFAULT_MOTOR_SPEED;

    if (myrobot.inRoundabout == 1) {
     178:	21 30       	cpi	r18, 0x01	; 1
     17a:	31 05       	cpc	r19, r1
     17c:	21 f0       	breq	.+8      	; 0x186 <pidControl+0x2e>
        motorSpeed = 40;
        myrobot.KP = DEFAULT_KP * 1.3;
    } else {
        motorSpeed = DEFAULT_MOTOR_SPEED;
        myrobot.KP = DEFAULT_KP; 
     17e:	4a e9       	ldi	r20, 0x9A	; 154
     180:	59 e9       	ldi	r21, 0x99	; 153
     182:	69 e9       	ldi	r22, 0x99	; 153
     184:	7d e3       	ldi	r23, 0x3D	; 61
     186:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <myrobot+0x5>
     18a:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <myrobot+0x6>
     18e:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <myrobot+0x7>
     192:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <myrobot+0x8>
    }

    int error = myrobot.goal - sense;
     196:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <myrobot+0x19>
     19a:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <myrobot+0x1a>
     19e:	68 1b       	sub	r22, r24
     1a0:	79 0b       	sbc	r23, r25

    myrobot.integral = myrobot.integral + error;
     1a2:	07 2e       	mov	r0, r23
     1a4:	00 0c       	add	r0, r0
     1a6:	88 0b       	sbc	r24, r24
     1a8:	99 0b       	sbc	r25, r25
     1aa:	0e 94 a6 0a 	call	0x154c	; 0x154c <__floatsisf>
     1ae:	6b 01       	movw	r12, r22
     1b0:	7c 01       	movw	r14, r24
     1b2:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <myrobot+0x15>
     1b6:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <myrobot+0x16>
     1ba:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <myrobot+0x17>
     1be:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <myrobot+0x18>
     1c2:	0e 94 02 0a 	call	0x1404	; 0x1404 <__addsf3>
     1c6:	60 93 af 02 	sts	0x02AF, r22	; 0x8002af <myrobot+0x15>
     1ca:	70 93 b0 02 	sts	0x02B0, r23	; 0x8002b0 <myrobot+0x16>
     1ce:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <myrobot+0x17>
     1d2:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <myrobot+0x18>

    if(absoluteValue(myrobot.integral) > 28000){
     1d6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>
     1da:	9b 01       	movw	r18, r22
     1dc:	77 ff       	sbrs	r23, 7
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <pidControl+0x90>
     1e0:	22 27       	eor	r18, r18
     1e2:	33 27       	eor	r19, r19
     1e4:	26 1b       	sub	r18, r22
     1e6:	37 0b       	sbc	r19, r23
     1e8:	21 36       	cpi	r18, 0x61	; 97
     1ea:	3d 46       	sbci	r19, 0x6D	; 109
     1ec:	6c f0       	brlt	.+26     	; 0x208 <pidControl+0xb0>
        robo_LED_toggle();
     1ee:	85 b1       	in	r24, 0x05	; 5
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	89 27       	eor	r24, r25
     1f4:	85 b9       	out	0x05, r24	; 5
        myrobot.turn += 1;
     1f6:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <myrobot+0x21>
     1fa:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <myrobot+0x22>
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <myrobot+0x22>
     204:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <myrobot+0x21>
    }


    // Calculate motor adjustments
    int adjustment = (myrobot.KP * error) + (myrobot.KI * (myrobot.integral)) + (myrobot.KD * (error - myrobot.lastError));
     208:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <myrobot+0x15>
     20c:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <myrobot+0x16>
     210:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <myrobot+0x17>
     214:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <myrobot+0x18>
     218:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <myrobot+0xd>
     21c:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <myrobot+0xe>
     220:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <myrobot+0xf>
     224:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <myrobot+0x10>
     228:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     22c:	4b 01       	movw	r8, r22
     22e:	5c 01       	movw	r10, r24
     230:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <myrobot+0x5>
     234:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <myrobot+0x6>
     238:	40 91 a1 02 	lds	r20, 0x02A1	; 0x8002a1 <myrobot+0x7>
     23c:	50 91 a2 02 	lds	r21, 0x02A2	; 0x8002a2 <myrobot+0x8>
     240:	c7 01       	movw	r24, r14
     242:	b6 01       	movw	r22, r12
     244:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     248:	9b 01       	movw	r18, r22
     24a:	ac 01       	movw	r20, r24
     24c:	c5 01       	movw	r24, r10
     24e:	b4 01       	movw	r22, r8
     250:	0e 94 02 0a 	call	0x1404	; 0x1404 <__addsf3>
     254:	4b 01       	movw	r8, r22
     256:	5c 01       	movw	r10, r24
     258:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <myrobot+0x11>
     25c:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <myrobot+0x12>
     260:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <myrobot+0x13>
     264:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <myrobot+0x14>
     268:	c7 01       	movw	r24, r14
     26a:	b6 01       	movw	r22, r12
     26c:	0e 94 01 0a 	call	0x1402	; 0x1402 <__subsf3>
     270:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <myrobot+0x9>
     274:	30 91 a4 02 	lds	r19, 0x02A4	; 0x8002a4 <myrobot+0xa>
     278:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <myrobot+0xb>
     27c:	50 91 a6 02 	lds	r21, 0x02A6	; 0x8002a6 <myrobot+0xc>
     280:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     284:	9b 01       	movw	r18, r22
     286:	ac 01       	movw	r20, r24
     288:	c5 01       	movw	r24, r10
     28a:	b4 01       	movw	r22, r8
     28c:	0e 94 02 0a 	call	0x1404	; 0x1404 <__addsf3>
     290:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fixsfsi>

    // Store error for the next iteration
    myrobot.lastError = error;
     294:	c0 92 ab 02 	sts	0x02AB, r12	; 0x8002ab <myrobot+0x11>
     298:	d0 92 ac 02 	sts	0x02AC, r13	; 0x8002ac <myrobot+0x12>
     29c:	e0 92 ad 02 	sts	0x02AD, r14	; 0x8002ad <myrobot+0x13>
     2a0:	f0 92 ae 02 	sts	0x02AE, r15	; 0x8002ae <myrobot+0x14>

    // Adjust motors
    myrobot.lspeed = constrain((motorSpeed - adjustment), -100 , 100);
     2a4:	28 e2       	ldi	r18, 0x28	; 40
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	26 1b       	sub	r18, r22
     2aa:	37 0b       	sbc	r19, r23
     2ac:	25 36       	cpi	r18, 0x65	; 101
     2ae:	31 05       	cpc	r19, r1
     2b0:	14 f0       	brlt	.+4      	; 0x2b6 <pidControl+0x15e>
     2b2:	24 e6       	ldi	r18, 0x64	; 100
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	2c 39       	cpi	r18, 0x9C	; 156
     2b8:	4f ef       	ldi	r20, 0xFF	; 255
     2ba:	34 07       	cpc	r19, r20
     2bc:	14 f4       	brge	.+4      	; 0x2c2 <pidControl+0x16a>
     2be:	2c e9       	ldi	r18, 0x9C	; 156
     2c0:	3f ef       	ldi	r19, 0xFF	; 255
     2c2:	30 93 9d 02 	sts	0x029D, r19	; 0x80029d <myrobot+0x3>
     2c6:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <myrobot+0x2>
    myrobot.rspeed = constrain((motorSpeed + adjustment), -100 , 100);
     2ca:	68 5d       	subi	r22, 0xD8	; 216
     2cc:	7f 4f       	sbci	r23, 0xFF	; 255
     2ce:	65 36       	cpi	r22, 0x65	; 101
     2d0:	71 05       	cpc	r23, r1
     2d2:	14 f0       	brlt	.+4      	; 0x2d8 <pidControl+0x180>
     2d4:	64 e6       	ldi	r22, 0x64	; 100
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	6c 39       	cpi	r22, 0x9C	; 156
     2da:	8f ef       	ldi	r24, 0xFF	; 255
     2dc:	78 07       	cpc	r23, r24
     2de:	14 f4       	brge	.+4      	; 0x2e4 <pidControl+0x18c>
     2e0:	6c e9       	ldi	r22, 0x9C	; 156
     2e2:	7f ef       	ldi	r23, 0xFF	; 255
     2e4:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <myrobot+0x1>
     2e8:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <myrobot>
    

    myrobot.prevLeftSpeed = myrobot.lspeed;
     2ec:	30 93 b6 02 	sts	0x02B6, r19	; 0x8002b6 <myrobot+0x1c>
     2f0:	20 93 b5 02 	sts	0x02B5, r18	; 0x8002b5 <myrobot+0x1b>
    myrobot.prevRightSpeed = myrobot.rspeed;
     2f4:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <myrobot+0x1e>
     2f8:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <myrobot+0x1d>
}
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	bf 90       	pop	r11
     306:	af 90       	pop	r10
     308:	9f 90       	pop	r9
     30a:	8f 90       	pop	r8
     30c:	08 95       	ret

0000030e <Navig>:
                            // break;

                    // default: sense = 1000;
                    //         break;                    
                    
                    default: myrobot.lspeed = -30;
     30e:	02 ee       	ldi	r16, 0xE2	; 226
     310:	1f ef       	ldi	r17, 0xFF	; 255
		// 	myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
        //     myrobot.lspeed   =  LOW_SPEED;
		// }


        if (myrobot.obstacle == 1) {
     312:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	49 f4       	brne	.+18     	; 0x32c <Navig+0x1e>
            myrobot.lspeed = STOP_SPEED;
     31a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
     31e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
            myrobot.rspeed = STOP_SPEED;
     322:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
     326:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
     32a:	f3 cf       	rjmp	.-26     	; 0x312 <Navig+0x4>
        } else {

            int sense = myrobot.goal;
     32c:	c0 91 b3 02 	lds	r28, 0x02B3	; 0x8002b3 <myrobot+0x19>
     330:	d0 91 b4 02 	lds	r29, 0x02B4	; 0x8002b4 <myrobot+0x1a>

            int sensorValue = robo_lineSensor();
     334:	0e 94 17 03 	call	0x62e	; 0x62e <robo_lineSensor>

            if(sensorValue == 100) {
     338:	84 36       	cpi	r24, 0x64	; 100
     33a:	91 05       	cpc	r25, r1
     33c:	a9 f0       	breq	.+42     	; 0x368 <Navig+0x5a>
                //myrobot.lspeed = - 40;
               // myrobot.rspeed = - 30;

            } else {

                switch (sensorValue) {
     33e:	88 30       	cpi	r24, 0x08	; 8
     340:	91 05       	cpc	r25, r1
     342:	18 f5       	brcc	.+70     	; 0x38a <Navig+0x7c>
     344:	89 55       	subi	r24, 0x59	; 89
     346:	9e 4f       	sbci	r25, 0xFE	; 254
     348:	fc 01       	movw	r30, r24
     34a:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__tablejump2__>
     34e:	bf 01       	movw	r22, r30
     350:	af 01       	movw	r20, r30
     352:	ce 01       	movw	r24, r28
     354:	bc 01       	movw	r22, r24
     356:	bf 01       	movw	r22, r30
     358:	ce 01       	movw	r24, r28
     35a:	c2 01       	movw	r24, r4
     35c:	ce 01       	movw	r24, r28
                    case 2: sense = 1000;
                            break;
                    
                    case 1: sense = 2000;
     35e:	c0 ed       	ldi	r28, 0xD0	; 208
     360:	d7 e0       	ldi	r29, 0x07	; 7
                    default: myrobot.lspeed = -30;
                             myrobot.rspeed = -30;
                             break;
                }

                pidControl(sense);
     362:	ce 01       	movw	r24, r28
     364:	0e 94 ac 00 	call	0x158	; 0x158 <pidControl>

            }

            OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
     368:	2a e0       	ldi	r18, 0x0A	; 10
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 c0 08 	call	0x1180	; 0x1180 <OSTimeDlyHMSM>
     376:	cd cf       	rjmp	.-102    	; 0x312 <Navig+0x4>
                            break;
                    
                    case 1: sense = 2000;
                            break;

                    case 3: sense = 1500;
     378:	cc ed       	ldi	r28, 0xDC	; 220
     37a:	d5 e0       	ldi	r29, 0x05	; 5
                            break;
     37c:	f2 cf       	rjmp	.-28     	; 0x362 <Navig+0x54>

                    case 4: sense = 0;
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	c0 e0       	ldi	r28, 0x00	; 0
                            break;
     382:	ef cf       	rjmp	.-34     	; 0x362 <Navig+0x54>

                    case 5: sense = 1000;
                            break;

                    case 6: sense = 500;
     384:	c4 ef       	ldi	r28, 0xF4	; 244
     386:	d1 e0       	ldi	r29, 0x01	; 1
                            break;
     388:	ec cf       	rjmp	.-40     	; 0x362 <Navig+0x54>
                            // break;

                    // default: sense = 1000;
                    //         break;                    
                    
                    default: myrobot.lspeed = -30;
     38a:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     38e:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
                             myrobot.rspeed = -30;
     392:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     396:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
                             break;
     39a:	e3 cf       	rjmp	.-58     	; 0x362 <Navig+0x54>
               // myrobot.rspeed = - 30;

            } else {

                switch (sensorValue) {
                    case 2: sense = 1000;
     39c:	c8 ee       	ldi	r28, 0xE8	; 232
     39e:	d3 e0       	ldi	r29, 0x03	; 3
     3a0:	e0 cf       	rjmp	.-64     	; 0x362 <Navig+0x54>

000003a2 <ADC_init>:
     3a2:	80 e4       	ldi	r24, 0x40	; 64
     3a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     3a8:	86 e8       	ldi	r24, 0x86	; 134
     3aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3ae:	08 95       	ret

000003b0 <ADC_read>:
     3b0:	f8 94       	cli
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     3b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3bc:	80 64       	ori	r24, 0x40	; 64
     3be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3c6:	84 ff       	sbrs	r24, 4
     3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <ADC_read+0x12>
     3ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3ce:	80 61       	ori	r24, 0x10	; 16
     3d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3d4:	78 94       	sei
     3d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     3da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     3de:	93 70       	andi	r25, 0x03	; 3
     3e0:	08 95       	ret

000003e2 <PWM8_write>:
     3e2:	81 11       	cpse	r24, r1
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <PWM8_write+0xe>
     3e6:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3ea:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     3ee:	08 95       	ret
     3f0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     3f4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     3f8:	08 95       	ret

000003fa <motor_init>:
     3fa:	8a b1       	in	r24, 0x0a	; 10
     3fc:	80 6f       	ori	r24, 0xF0	; 240
     3fe:	8a b9       	out	0x0a, r24	; 10
     400:	8b b1       	in	r24, 0x0b	; 11
     402:	8f 70       	andi	r24, 0x0F	; 15
     404:	8b b9       	out	0x0b, r24	; 11
     406:	81 ea       	ldi	r24, 0xA1	; 161
     408:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     412:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     416:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     41a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     41e:	a8 e8       	ldi	r26, 0x88	; 136
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	1c 92       	st	X, r1
     424:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     428:	ea e8       	ldi	r30, 0x8A	; 138
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	10 82       	st	Z, r1
     42e:	84 b1       	in	r24, 0x04	; 4
     430:	86 60       	ori	r24, 0x06	; 6
     432:	84 b9       	out	0x04, r24	; 4
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	1c 92       	st	X, r1
     438:	1e 92       	st	-X, r1
     43a:	11 82       	std	Z+1, r1	; 0x01
     43c:	10 82       	st	Z, r1
     43e:	08 95       	ret

00000440 <motor_set_speed>:
     440:	77 ff       	sbrs	r23, 7
     442:	02 c0       	rjmp	.+4      	; 0x448 <motor_set_speed+0x8>
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	65 36       	cpi	r22, 0x65	; 101
     44a:	71 05       	cpc	r23, r1
     44c:	14 f0       	brlt	.+4      	; 0x452 <motor_set_speed+0x12>
     44e:	64 e6       	ldi	r22, 0x64	; 100
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	9b 01       	movw	r18, r22
     454:	22 0f       	add	r18, r18
     456:	33 1f       	adc	r19, r19
     458:	75 95       	asr	r23
     45a:	67 95       	ror	r22
     45c:	62 0f       	add	r22, r18
     45e:	73 1f       	adc	r23, r19
     460:	81 11       	cpse	r24, r1
     462:	09 c0       	rjmp	.+18     	; 0x476 <motor_set_speed+0x36>
     464:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     468:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     46c:	70 93 3e 04 	sts	0x043E, r23	; 0x80043e <rightWst+0x1>
     470:	60 93 3d 04 	sts	0x043D, r22	; 0x80043d <rightWst>
     474:	08 95       	ret
     476:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     47a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     47e:	70 93 42 04 	sts	0x0442, r23	; 0x800442 <leftWst+0x1>
     482:	60 93 41 04 	sts	0x0441, r22	; 0x800441 <leftWst>
     486:	08 95       	ret

00000488 <motor_set_dir>:
     488:	cf 93       	push	r28
     48a:	c6 2f       	mov	r28, r22
     48c:	26 2f       	mov	r18, r22
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	81 11       	cpse	r24, r1
     492:	2b c0       	rjmp	.+86     	; 0x4ea <motor_set_dir+0x62>
     494:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <rightWst+0x2>
     498:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <rightWst+0x3>
     49c:	82 17       	cp	r24, r18
     49e:	93 07       	cpc	r25, r19
     4a0:	59 f0       	breq	.+22     	; 0x4b8 <motor_set_dir+0x30>
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 20 02 	call	0x440	; 0x440 <motor_set_speed>
     4ac:	8f e9       	ldi	r24, 0x9F	; 159
     4ae:	9f e0       	ldi	r25, 0x0F	; 15
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <motor_set_dir+0x28>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <motor_set_dir+0x2e>
     4b6:	00 00       	nop
     4b8:	c1 11       	cpse	r28, r1
     4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <motor_set_dir+0x50>
     4bc:	5e 98       	cbi	0x0b, 6	; 11
     4be:	5f 9a       	sbi	0x0b, 7	; 11
     4c0:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <rightWst+0x3>
     4c4:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <rightWst+0x2>
     4c8:	8f e3       	ldi	r24, 0x3F	; 63
     4ca:	9c e9       	ldi	r25, 0x9C	; 156
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <motor_set_dir+0x44>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <motor_set_dir+0x4a>
     4d2:	00 00       	nop
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret
     4d8:	5e 9a       	sbi	0x0b, 6	; 11
     4da:	5f 98       	cbi	0x0b, 7	; 11
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <rightWst+0x3>
     4e4:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <rightWst+0x2>
     4e8:	ef cf       	rjmp	.-34     	; 0x4c8 <motor_set_dir+0x40>
     4ea:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <leftWst+0x2>
     4ee:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <leftWst+0x3>
     4f2:	82 17       	cp	r24, r18
     4f4:	93 07       	cpc	r25, r19
     4f6:	59 f0       	breq	.+22     	; 0x50e <motor_set_dir+0x86>
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	0e 94 20 02 	call	0x440	; 0x440 <motor_set_speed>
     502:	8f e9       	ldi	r24, 0x9F	; 159
     504:	9f e0       	ldi	r25, 0x0F	; 15
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <motor_set_dir+0x7e>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <motor_set_dir+0x84>
     50c:	00 00       	nop
     50e:	c1 11       	cpse	r28, r1
     510:	07 c0       	rjmp	.+14     	; 0x520 <motor_set_dir+0x98>
     512:	5c 9a       	sbi	0x0b, 4	; 11
     514:	5d 98       	cbi	0x0b, 5	; 11
     516:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <leftWst+0x3>
     51a:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <leftWst+0x2>
     51e:	d4 cf       	rjmp	.-88     	; 0x4c8 <motor_set_dir+0x40>
     520:	5c 98       	cbi	0x0b, 4	; 11
     522:	5d 9a       	sbi	0x0b, 5	; 11
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <leftWst+0x3>
     52c:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <leftWst+0x2>
     530:	cb cf       	rjmp	.-106    	; 0x4c8 <motor_set_dir+0x40>

00000532 <robo_motorSpeed>:
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	ec 01       	movw	r28, r24
     53c:	8b 01       	movw	r16, r22
     53e:	97 ff       	sbrs	r25, 7
     540:	1c c0       	rjmp	.+56     	; 0x57a <robo_motorSpeed+0x48>
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 44 02 	call	0x488	; 0x488 <motor_set_dir>
     54a:	d1 95       	neg	r29
     54c:	c1 95       	neg	r28
     54e:	d1 09       	sbc	r29, r1
     550:	17 ff       	sbrs	r17, 7
     552:	18 c0       	rjmp	.+48     	; 0x584 <robo_motorSpeed+0x52>
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	0e 94 44 02 	call	0x488	; 0x488 <motor_set_dir>
     55c:	11 95       	neg	r17
     55e:	01 95       	neg	r16
     560:	11 09       	sbc	r17, r1
     562:	b8 01       	movw	r22, r16
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 20 02 	call	0x440	; 0x440 <motor_set_speed>
     56a:	be 01       	movw	r22, r28
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	0c 94 20 02 	jmp	0x440	; 0x440 <motor_set_speed>
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	0e 94 44 02 	call	0x488	; 0x488 <motor_set_dir>
     582:	e6 cf       	rjmp	.-52     	; 0x550 <robo_motorSpeed+0x1e>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 44 02 	call	0x488	; 0x488 <motor_set_dir>
     58c:	ea cf       	rjmp	.-44     	; 0x562 <robo_motorSpeed+0x30>

0000058e <USART0_init>:
     58e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     592:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     596:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     59a:	88 e1       	ldi	r24, 0x18	; 24
     59c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     5a6:	08 95       	ret

000005a8 <cputchar>:
     5a8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     5ac:	95 ff       	sbrs	r25, 5
     5ae:	fc cf       	rjmp	.-8      	; 0x5a8 <cputchar>
     5b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     5b4:	08 95       	ret

000005b6 <cgetchar>:
     5b6:	cf 93       	push	r28
     5b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     5bc:	87 ff       	sbrs	r24, 7
     5be:	fc cf       	rjmp	.-8      	; 0x5b8 <cgetchar+0x2>
     5c0:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     5c4:	8c 2f       	mov	r24, r28
     5c6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <cputchar>
     5ca:	8c 2f       	mov	r24, r28
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <cputs>:
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ec 01       	movw	r28, r24
     5d6:	89 91       	ld	r24, Y+
     5d8:	81 11       	cpse	r24, r1
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <cputs+0x12>
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret
     5e2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <cputchar>
     5e6:	f7 cf       	rjmp	.-18     	; 0x5d6 <cputs+0x6>

000005e8 <robo_proxSensor>:
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ADC_read>
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	84 36       	cpi	r24, 0x64	; 100
     5f4:	91 05       	cpc	r25, r1
     5f6:	10 f0       	brcs	.+4      	; 0x5fc <robo_proxSensor+0x14>
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	c9 01       	movw	r24, r18
     5fe:	08 95       	ret

00000600 <robo_lightSensor>:
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ADC_read>
     606:	2b ef       	ldi	r18, 0xFB	; 251
     608:	ac 01       	movw	r20, r24
     60a:	24 03       	mulsu	r18, r20
     60c:	c0 01       	movw	r24, r0
     60e:	25 9f       	mul	r18, r21
     610:	90 0d       	add	r25, r0
     612:	11 24       	eor	r1, r1
     614:	85 50       	subi	r24, 0x05	; 5
     616:	9c 4e       	sbci	r25, 0xEC	; 236
     618:	63 e3       	ldi	r22, 0x33	; 51
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__divmodhi4>
     620:	cb 01       	movw	r24, r22
     622:	65 36       	cpi	r22, 0x65	; 101
     624:	71 05       	cpc	r23, r1
     626:	14 f0       	brlt	.+4      	; 0x62c <robo_lightSensor+0x2c>
     628:	84 e6       	ldi	r24, 0x64	; 100
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	08 95       	ret

0000062e <robo_lineSensor>:
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	c0 e0       	ldi	r28, 0x00	; 0
     634:	d1 e0       	ldi	r29, 0x01	; 1
     636:	cc 0f       	add	r28, r28
     638:	8d 2f       	mov	r24, r29
     63a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ADC_read>
     63e:	8c 32       	cpi	r24, 0x2C	; 44
     640:	91 40       	sbci	r25, 0x01	; 1
     642:	0c f4       	brge	.+2      	; 0x646 <robo_lineSensor+0x18>
     644:	c1 60       	ori	r28, 0x01	; 1
     646:	df 5f       	subi	r29, 0xFF	; 255
     648:	d4 30       	cpi	r29, 0x04	; 4
     64a:	a9 f7       	brne	.-22     	; 0x636 <robo_lineSensor+0x8>
     64c:	8c 2f       	mov	r24, r28
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <robo_bumpSensorR>:
     656:	83 b1       	in	r24, 0x03	; 3
     658:	82 95       	swap	r24
     65a:	8f 70       	andi	r24, 0x0F	; 15
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	89 27       	eor	r24, r25
     660:	81 70       	andi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	08 95       	ret

00000666 <robo_bumpSensorL>:
     666:	83 b1       	in	r24, 0x03	; 3
     668:	86 95       	lsr	r24
     66a:	86 95       	lsr	r24
     66c:	86 95       	lsr	r24
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	89 27       	eor	r24, r25
     672:	81 70       	andi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	08 95       	ret

00000678 <robo_Honk>:
     678:	5b 9a       	sbi	0x0b, 3	; 11
     67a:	2f ef       	ldi	r18, 0xFF	; 255
     67c:	85 ea       	ldi	r24, 0xA5	; 165
     67e:	9e e0       	ldi	r25, 0x0E	; 14
     680:	21 50       	subi	r18, 0x01	; 1
     682:	80 40       	sbci	r24, 0x00	; 0
     684:	90 40       	sbci	r25, 0x00	; 0
     686:	e1 f7       	brne	.-8      	; 0x680 <robo_Honk+0x8>
     688:	00 c0       	rjmp	.+0      	; 0x68a <robo_Honk+0x12>
     68a:	00 00       	nop
     68c:	5b 98       	cbi	0x0b, 3	; 11
     68e:	2f ef       	ldi	r18, 0xFF	; 255
     690:	85 ea       	ldi	r24, 0xA5	; 165
     692:	9e e0       	ldi	r25, 0x0E	; 14
     694:	21 50       	subi	r18, 0x01	; 1
     696:	80 40       	sbci	r24, 0x00	; 0
     698:	90 40       	sbci	r25, 0x00	; 0
     69a:	e1 f7       	brne	.-8      	; 0x694 <robo_Honk+0x1c>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <robo_Honk+0x26>
     69e:	00 00       	nop
     6a0:	08 95       	ret

000006a2 <robo_checkBattery>:
     6a2:	85 e0       	ldi	r24, 0x05	; 5
     6a4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ADC_read>
     6a8:	84 3f       	cpi	r24, 0xF4	; 244
     6aa:	91 40       	sbci	r25, 0x01	; 1
     6ac:	10 f4       	brcc	.+4      	; 0x6b2 <robo_checkBattery+0x10>
     6ae:	28 9a       	sbi	0x05, 0	; 5
     6b0:	08 95       	ret
     6b2:	28 98       	cbi	0x05, 0	; 5
     6b4:	08 95       	ret

000006b6 <robo_goPressed>:
     6b6:	89 b1       	in	r24, 0x09	; 9
     6b8:	82 fb       	bst	r24, 2
     6ba:	88 27       	eor	r24, r24
     6bc:	80 f9       	bld	r24, 0
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	89 27       	eor	r24, r25
     6c2:	08 95       	ret

000006c4 <robo_wait4goPress>:
     6c4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <robo_goPressed>
     6c8:	88 23       	and	r24, r24
     6ca:	e1 f3       	breq	.-8      	; 0x6c4 <robo_wait4goPress>
     6cc:	08 95       	ret

000006ce <OS_ticks_init>:
     6ce:	f8 94       	cli
     6d0:	85 e0       	ldi	r24, 0x05	; 5
     6d2:	85 bd       	out	0x25, r24	; 37
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     6da:	84 e6       	ldi	r24, 0x64	; 100
     6dc:	86 bd       	out	0x26, r24	; 38
     6de:	78 94       	sei
     6e0:	08 95       	ret

000006e2 <HAL_init>:
     6e2:	87 e6       	ldi	r24, 0x67	; 103
     6e4:	0e 94 c7 02 	call	0x58e	; 0x58e <USART0_init>
     6e8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <ADC_init>

000006ec <robo_Setup>:
     6ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <HAL_init>
     6f0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <motor_init>
     6f4:	53 9a       	sbi	0x0a, 3	; 10
     6f6:	5b 98       	cbi	0x0b, 3	; 11
     6f8:	20 9a       	sbi	0x04, 0	; 4
     6fa:	52 98       	cbi	0x0a, 2	; 10
     6fc:	5a 9a       	sbi	0x0b, 2	; 11
     6fe:	24 98       	cbi	0x04, 4	; 4
     700:	23 98       	cbi	0x04, 3	; 4
     702:	85 b1       	in	r24, 0x05	; 5
     704:	88 61       	ori	r24, 0x18	; 24
     706:	85 b9       	out	0x05, r24	; 5
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 44 02 	call	0x488	; 0x488 <motor_set_dir>
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	0e 94 44 02 	call	0x488	; 0x488 <motor_set_dir>
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0c 94 99 02 	jmp	0x532	; 0x532 <robo_motorSpeed>

00000724 <cprintf>:
     724:	4f 92       	push	r4
     726:	5f 92       	push	r5
     728:	6f 92       	push	r6
     72a:	7f 92       	push	r7
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	de 01       	movw	r26, r28
     74a:	53 96       	adiw	r26, 0x13	; 19
     74c:	ed 91       	ld	r30, X+
     74e:	fd 91       	ld	r31, X+
     750:	8d 01       	movw	r16, r26
     752:	5a e0       	ldi	r21, 0x0A	; 10
     754:	65 2e       	mov	r6, r21
     756:	71 2c       	mov	r7, r1
     758:	80 81       	ld	r24, Z
     75a:	85 32       	cpi	r24, 0x25	; 37
     75c:	81 f4       	brne	.+32     	; 0x77e <cprintf+0x5a>
     75e:	5f 01       	movw	r10, r30
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	a8 0e       	add	r10, r24
     764:	b1 1c       	adc	r11, r1
     766:	81 81       	ldd	r24, Z+1	; 0x01
     768:	84 36       	cpi	r24, 0x64	; 100
     76a:	09 f4       	brne	.+2      	; 0x76e <cprintf+0x4a>
     76c:	50 c0       	rjmp	.+160    	; 0x80e <cprintf+0xea>
     76e:	90 f4       	brcc	.+36     	; 0x794 <cprintf+0x70>
     770:	83 36       	cpi	r24, 0x63	; 99
     772:	61 f4       	brne	.+24     	; 0x78c <cprintf+0x68>
     774:	f8 01       	movw	r30, r16
     776:	80 81       	ld	r24, Z
     778:	0e 5f       	subi	r16, 0xFE	; 254
     77a:	1f 4f       	sbci	r17, 0xFF	; 255
     77c:	07 c0       	rjmp	.+14     	; 0x78c <cprintf+0x68>
     77e:	88 23       	and	r24, r24
     780:	09 f4       	brne	.+2      	; 0x784 <cprintf+0x60>
     782:	5d c0       	rjmp	.+186    	; 0x83e <cprintf+0x11a>
     784:	5f 01       	movw	r10, r30
     786:	9f ef       	ldi	r25, 0xFF	; 255
     788:	a9 1a       	sub	r10, r25
     78a:	b9 0a       	sbc	r11, r25
     78c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <cputchar>
     790:	f5 01       	movw	r30, r10
     792:	e2 cf       	rjmp	.-60     	; 0x758 <cprintf+0x34>
     794:	83 37       	cpi	r24, 0x73	; 115
     796:	71 f1       	breq	.+92     	; 0x7f4 <cprintf+0xd0>
     798:	30 e1       	ldi	r19, 0x10	; 16
     79a:	83 2e       	mov	r8, r19
     79c:	91 2c       	mov	r9, r1
     79e:	e1 2c       	mov	r14, r1
     7a0:	40 e1       	ldi	r20, 0x10	; 16
     7a2:	f4 2e       	mov	r15, r20
     7a4:	88 37       	cpi	r24, 0x78	; 120
     7a6:	91 f7       	brne	.-28     	; 0x78c <cprintf+0x68>
     7a8:	f8 01       	movw	r30, r16
     7aa:	c0 80       	ld	r12, Z
     7ac:	d1 80       	ldd	r13, Z+1	; 0x01
     7ae:	0e 5f       	subi	r16, 0xFE	; 254
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	84 36       	cpi	r24, 0x64	; 100
     7b4:	59 f4       	brne	.+22     	; 0x7cc <cprintf+0xa8>
     7b6:	d7 fe       	sbrs	r13, 7
     7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <cprintf+0xa2>
     7ba:	d1 94       	neg	r13
     7bc:	c1 94       	neg	r12
     7be:	d1 08       	sbc	r13, r1
     7c0:	8d e2       	ldi	r24, 0x2D	; 45
     7c2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <cputchar>
     7c6:	ce 14       	cp	r12, r14
     7c8:	df 04       	cpc	r13, r15
     7ca:	48 f1       	brcs	.+82     	; 0x81e <cprintf+0xfa>
     7cc:	c6 01       	movw	r24, r12
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodhi4>
     7d4:	2c 01       	movw	r4, r24
     7d6:	68 5f       	subi	r22, 0xF8	; 248
     7d8:	7d 4f       	sbci	r23, 0xFD	; 253
     7da:	fb 01       	movw	r30, r22
     7dc:	80 81       	ld	r24, Z
     7de:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <cputchar>
     7e2:	62 01       	movw	r12, r4
     7e4:	c7 01       	movw	r24, r14
     7e6:	b4 01       	movw	r22, r8
     7e8:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodhi4>
     7ec:	7b 01       	movw	r14, r22
     7ee:	67 2b       	or	r22, r23
     7f0:	69 f7       	brne	.-38     	; 0x7cc <cprintf+0xa8>
     7f2:	ce cf       	rjmp	.-100    	; 0x790 <cprintf+0x6c>
     7f4:	f8 01       	movw	r30, r16
     7f6:	e0 80       	ld	r14, Z
     7f8:	f1 80       	ldd	r15, Z+1	; 0x01
     7fa:	0e 5f       	subi	r16, 0xFE	; 254
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	f7 01       	movw	r30, r14
     800:	81 91       	ld	r24, Z+
     802:	7f 01       	movw	r14, r30
     804:	88 23       	and	r24, r24
     806:	21 f2       	breq	.-120    	; 0x790 <cprintf+0x6c>
     808:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <cputchar>
     80c:	f8 cf       	rjmp	.-16     	; 0x7fe <cprintf+0xda>
     80e:	9a e0       	ldi	r25, 0x0A	; 10
     810:	89 2e       	mov	r8, r25
     812:	91 2c       	mov	r9, r1
     814:	20 e1       	ldi	r18, 0x10	; 16
     816:	e2 2e       	mov	r14, r18
     818:	27 e2       	ldi	r18, 0x27	; 39
     81a:	f2 2e       	mov	r15, r18
     81c:	c5 cf       	rjmp	.-118    	; 0x7a8 <cprintf+0x84>
     81e:	c7 01       	movw	r24, r14
     820:	b3 01       	movw	r22, r6
     822:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodhi4>
     826:	7b 01       	movw	r14, r22
     828:	62 30       	cpi	r22, 0x02	; 2
     82a:	71 05       	cpc	r23, r1
     82c:	60 f6       	brcc	.-104    	; 0x7c6 <cprintf+0xa2>
     82e:	c6 01       	movw	r24, r12
     830:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodhi4>
     834:	fb 01       	movw	r30, r22
     836:	e8 5f       	subi	r30, 0xF8	; 248
     838:	fd 4f       	sbci	r31, 0xFD	; 253
     83a:	80 81       	ld	r24, Z
     83c:	a7 cf       	rjmp	.-178    	; 0x78c <cprintf+0x68>
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	08 95       	ret

00000864 <OSStartHighRdy>:
     864:	00 91 46 04 	lds	r16, 0x0446	; 0x800446 <OSRunning>
     868:	03 95       	inc	r16
     86a:	00 93 46 04 	sts	0x0446, r16	; 0x800446 <OSRunning>
     86e:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <OSTCBHighRdy>
     872:	f0 91 57 04 	lds	r31, 0x0457	; 0x800457 <OSTCBHighRdy+0x1>
     876:	c1 91       	ld	r28, Z+
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	d1 91       	ld	r29, Z+
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f 91       	pop	r16
     880:	0f bf       	out	0x3f, r16	; 63
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	7f 90       	pop	r7
     8b4:	6f 90       	pop	r6
     8b6:	5f 90       	pop	r5
     8b8:	4f 90       	pop	r4
     8ba:	3f 90       	pop	r3
     8bc:	2f 90       	pop	r2
     8be:	1f 90       	pop	r1
     8c0:	0f 90       	pop	r0
     8c2:	08 95       	ret

000008c4 <OSCtxSw>:
     8c4:	0f 92       	push	r0
     8c6:	1f 92       	push	r1
     8c8:	2f 92       	push	r2
     8ca:	3f 92       	push	r3
     8cc:	4f 92       	push	r4
     8ce:	5f 92       	push	r5
     8d0:	6f 92       	push	r6
     8d2:	7f 92       	push	r7
     8d4:	8f 92       	push	r8
     8d6:	9f 92       	push	r9
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	2f 93       	push	r18
     8ea:	3f 93       	push	r19
     8ec:	4f 93       	push	r20
     8ee:	5f 93       	push	r21
     8f0:	6f 93       	push	r22
     8f2:	7f 93       	push	r23
     8f4:	8f 93       	push	r24
     8f6:	9f 93       	push	r25
     8f8:	af 93       	push	r26
     8fa:	bf 93       	push	r27
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
     904:	0f b7       	in	r16, 0x3f	; 63
     906:	0f 93       	push	r16
     908:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <OSTCBCur>
     90c:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <OSTCBCur+0x1>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	c1 93       	st	Z+, r28
     914:	de b7       	in	r29, 0x3e	; 62
     916:	d1 93       	st	Z+, r29
     918:	00 91 4b 04 	lds	r16, 0x044B	; 0x80044b <OSPrioHighRdy>
     91c:	00 93 4c 04 	sts	0x044C, r16	; 0x80044c <OSPrioCur>
     920:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <OSTCBHighRdy>
     924:	f0 91 57 04 	lds	r31, 0x0457	; 0x800457 <OSTCBHighRdy+0x1>
     928:	e0 93 5e 04 	sts	0x045E, r30	; 0x80045e <OSTCBCur>
     92c:	f0 93 5f 04 	sts	0x045F, r31	; 0x80045f <OSTCBCur+0x1>
     930:	c1 91       	ld	r28, Z+
     932:	cd bf       	out	0x3d, r28	; 61
     934:	d1 91       	ld	r29, Z+
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f 91       	pop	r16
     93a:	0f bf       	out	0x3f, r16	; 63
     93c:	ff 91       	pop	r31
     93e:	ef 91       	pop	r30
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	9f 90       	pop	r9
     96a:	8f 90       	pop	r8
     96c:	7f 90       	pop	r7
     96e:	6f 90       	pop	r6
     970:	5f 90       	pop	r5
     972:	4f 90       	pop	r4
     974:	3f 90       	pop	r3
     976:	2f 90       	pop	r2
     978:	1f 90       	pop	r1
     97a:	0f 90       	pop	r0
     97c:	08 95       	ret

0000097e <OSIntCtxSw>:
     97e:	00 91 4b 04 	lds	r16, 0x044B	; 0x80044b <OSPrioHighRdy>
     982:	00 93 4c 04 	sts	0x044C, r16	; 0x80044c <OSPrioCur>
     986:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <OSTCBHighRdy>
     98a:	f0 91 57 04 	lds	r31, 0x0457	; 0x800457 <OSTCBHighRdy+0x1>
     98e:	e0 93 5e 04 	sts	0x045E, r30	; 0x80045e <OSTCBCur>
     992:	f0 93 5f 04 	sts	0x045F, r31	; 0x80045f <OSTCBCur+0x1>
     996:	c1 91       	ld	r28, Z+
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	d1 91       	ld	r29, Z+
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f 91       	pop	r16
     9a0:	0f bf       	out	0x3f, r16	; 63
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	bf 91       	pop	r27
     9ac:	af 91       	pop	r26
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	7f 91       	pop	r23
     9b4:	6f 91       	pop	r22
     9b6:	5f 91       	pop	r21
     9b8:	4f 91       	pop	r20
     9ba:	3f 91       	pop	r19
     9bc:	2f 91       	pop	r18
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	7f 90       	pop	r7
     9d4:	6f 90       	pop	r6
     9d6:	5f 90       	pop	r5
     9d8:	4f 90       	pop	r4
     9da:	3f 90       	pop	r3
     9dc:	2f 90       	pop	r2
     9de:	1f 90       	pop	r1
     9e0:	0f 90       	pop	r0
     9e2:	08 95       	ret

000009e4 <OSTickISR>:
     9e4:	0f 92       	push	r0
     9e6:	1f 92       	push	r1
     9e8:	2f 92       	push	r2
     9ea:	3f 92       	push	r3
     9ec:	4f 92       	push	r4
     9ee:	5f 92       	push	r5
     9f0:	6f 92       	push	r6
     9f2:	7f 92       	push	r7
     9f4:	8f 92       	push	r8
     9f6:	9f 92       	push	r9
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
     a24:	0f b7       	in	r16, 0x3f	; 63
     a26:	00 68       	ori	r16, 0x80	; 128
     a28:	0f 93       	push	r16
     a2a:	00 91 5d 04 	lds	r16, 0x045D	; 0x80045d <OSIntNesting>
     a2e:	03 95       	inc	r16
     a30:	00 93 5d 04 	sts	0x045D, r16	; 0x80045d <OSIntNesting>
     a34:	01 30       	cpi	r16, 0x01	; 1
     a36:	41 f4       	brne	.+16     	; 0xa48 <_not_first_int>
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <OSTCBCur>
     a40:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <OSTCBCur+0x1>
     a44:	c1 93       	st	Z+, r28
     a46:	d1 93       	st	Z+, r29

00000a48 <_not_first_int>:
     a48:	04 e6       	ldi	r16, 0x64	; 100
     a4a:	06 bd       	out	0x26, r16	; 38
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	1f 2e       	mov	r1, r31
     a50:	78 94       	sei
     a52:	0e 94 55 06 	call	0xcaa	; 0xcaa <OSTimeTick>
     a56:	00 00       	nop
     a58:	0e 94 c8 05 	call	0xb90	; 0xb90 <OSIntExit>
     a5c:	0f 91       	pop	r16
     a5e:	0f bf       	out	0x3f, r16	; 63
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	1f 90       	pop	r1
     a9e:	0f 90       	pop	r0
     aa0:	08 95       	ret

00000aa2 <OSTaskStkInit>:
     aa2:	fa 01       	movw	r30, r20
     aa4:	80 83       	st	Z, r24
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	90 83       	st	Z, r25
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	10 82       	st	Z, r1
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	10 82       	st	Z, r1
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	10 82       	st	Z, r1
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	10 82       	st	Z, r1
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	10 82       	st	Z, r1
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	10 82       	st	Z, r1
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	10 82       	st	Z, r1
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	10 82       	st	Z, r1
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	10 82       	st	Z, r1
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	10 82       	st	Z, r1
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	10 82       	st	Z, r1
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	10 82       	st	Z, r1
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	10 82       	st	Z, r1
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	10 82       	st	Z, r1
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	10 82       	st	Z, r1
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	10 82       	st	Z, r1
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	10 82       	st	Z, r1
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	10 82       	st	Z, r1
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	10 82       	st	Z, r1
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	10 82       	st	Z, r1
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	10 82       	st	Z, r1
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	10 82       	st	Z, r1
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	10 82       	st	Z, r1
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	10 82       	st	Z, r1
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	60 83       	st	Z, r22
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	70 83       	st	Z, r23
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	10 82       	st	Z, r1
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	10 82       	st	Z, r1
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	10 82       	st	Z, r1
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	10 82       	st	Z, r1
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	10 82       	st	Z, r1
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	10 82       	st	Z, r1
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	80 e8       	ldi	r24, 0x80	; 128
     b2e:	80 83       	st	Z, r24
     b30:	ca 01       	movw	r24, r20
     b32:	83 97       	sbiw	r24, 0x23	; 35
     b34:	08 95       	ret

00000b36 <OSTaskCreateHook>:
     b36:	08 95       	ret

00000b38 <OSTaskDelHook>:
     b38:	08 95       	ret

00000b3a <OSTaskSwHook>:
     b3a:	08 95       	ret

00000b3c <OSTaskStatHook>:
     b3c:	08 95       	ret

00000b3e <OSTimeTickHook>:
     b3e:	08 95       	ret

00000b40 <OSInitHookBegin>:
     b40:	08 95       	ret

00000b42 <OSInitHookEnd>:
     b42:	08 95       	ret

00000b44 <OSTaskIdleHook>:
     b44:	08 95       	ret

00000b46 <OSTCBInitHook>:
     b46:	08 95       	ret

00000b48 <OS_TaskIdle>:
     b48:	f8 94       	cli
     b4a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <OSIdleCtr>
     b4e:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <OSIdleCtr+0x1>
     b52:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <OSIdleCtr+0x2>
     b56:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <OSIdleCtr+0x3>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	a1 1d       	adc	r26, r1
     b5e:	b1 1d       	adc	r27, r1
     b60:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <OSIdleCtr>
     b64:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <OSIdleCtr+0x1>
     b68:	a0 93 49 04 	sts	0x0449, r26	; 0x800449 <OSIdleCtr+0x2>
     b6c:	b0 93 4a 04 	sts	0x044A, r27	; 0x80044a <OSIdleCtr+0x3>
     b70:	78 94       	sei
     b72:	0e 94 a2 05 	call	0xb44	; 0xb44 <OSTaskIdleHook>
     b76:	e8 cf       	rjmp	.-48     	; 0xb48 <OS_TaskIdle>

00000b78 <OSIntEnter>:
     b78:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <OSRunning>
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <OSIntEnter+0x16>
     b80:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <OSIntNesting>
     b84:	8f 3f       	cpi	r24, 0xFF	; 255
     b86:	19 f0       	breq	.+6      	; 0xb8e <OSIntEnter+0x16>
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <OSIntNesting>
     b8e:	08 95       	ret

00000b90 <OSIntExit>:
     b90:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <OSRunning>
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	09 f0       	breq	.+2      	; 0xb9a <OSIntExit+0xa>
     b98:	4c c0       	rjmp	.+152    	; 0xc32 <OSIntExit+0xa2>
     b9a:	f8 94       	cli
     b9c:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <OSIntNesting>
     ba0:	88 23       	and	r24, r24
     ba2:	19 f0       	breq	.+6      	; 0xbaa <OSIntExit+0x1a>
     ba4:	81 50       	subi	r24, 0x01	; 1
     ba6:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <OSIntNesting>
     baa:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <OSIntNesting>
     bae:	81 11       	cpse	r24, r1
     bb0:	3f c0       	rjmp	.+126    	; 0xc30 <OSIntExit+0xa0>
     bb2:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <OSLockNesting>
     bb6:	81 11       	cpse	r24, r1
     bb8:	3b c0       	rjmp	.+118    	; 0xc30 <OSIntExit+0xa0>
     bba:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <OSRdyGrp>
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	e0 50       	subi	r30, 0x00	; 0
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	e0 81       	ld	r30, Z
     bc6:	e0 93 5c 04 	sts	0x045C, r30	; 0x80045c <OSIntExitY>
     bca:	ae 2f       	mov	r26, r30
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	a7 5a       	subi	r26, 0xA7	; 167
     bd0:	bb 4f       	sbci	r27, 0xFB	; 251
     bd2:	ac 91       	ld	r26, X
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	a0 50       	subi	r26, 0x00	; 0
     bd8:	bf 4f       	sbci	r27, 0xFF	; 255
     bda:	ee 0f       	add	r30, r30
     bdc:	ee 0f       	add	r30, r30
     bde:	ee 0f       	add	r30, r30
     be0:	8c 91       	ld	r24, X
     be2:	e8 0f       	add	r30, r24
     be4:	e0 93 4b 04 	sts	0x044B, r30	; 0x80044b <OSPrioHighRdy>
     be8:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSPrioCur>
     bec:	e8 17       	cp	r30, r24
     bee:	01 f1       	breq	.+64     	; 0xc30 <OSIntExit+0xa0>
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	e1 56       	subi	r30, 0x61	; 97
     bf8:	fa 4f       	sbci	r31, 0xFA	; 250
     bfa:	80 81       	ld	r24, Z
     bfc:	91 81       	ldd	r25, Z+1	; 0x01
     bfe:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <OSTCBHighRdy+0x1>
     c02:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <OSTCBHighRdy>
     c06:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <OSCtxSwCtr>
     c0a:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <OSCtxSwCtr+0x1>
     c0e:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <OSCtxSwCtr+0x2>
     c12:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <OSCtxSwCtr+0x3>
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	a1 1d       	adc	r26, r1
     c1a:	b1 1d       	adc	r27, r1
     c1c:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <OSCtxSwCtr>
     c20:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <OSCtxSwCtr+0x1>
     c24:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <OSCtxSwCtr+0x2>
     c28:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <OSCtxSwCtr+0x3>
     c2c:	0e 94 bf 04 	call	0x97e	; 0x97e <OSIntCtxSw>
     c30:	78 94       	sei
     c32:	08 95       	ret

00000c34 <OSSchedLock>:
     c34:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <OSRunning>
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	49 f4       	brne	.+18     	; 0xc4e <OSSchedLock+0x1a>
     c3c:	f8 94       	cli
     c3e:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <OSLockNesting>
     c42:	8f 3f       	cpi	r24, 0xFF	; 255
     c44:	19 f0       	breq	.+6      	; 0xc4c <OSSchedLock+0x18>
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <OSLockNesting>
     c4c:	78 94       	sei
     c4e:	08 95       	ret

00000c50 <OSStart>:
     c50:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <OSRunning>
     c54:	81 11       	cpse	r24, r1
     c56:	28 c0       	rjmp	.+80     	; 0xca8 <OSStart+0x58>
     c58:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <OSRdyGrp>
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	e0 50       	subi	r30, 0x00	; 0
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	e0 81       	ld	r30, Z
     c64:	ae 2f       	mov	r26, r30
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	a7 5a       	subi	r26, 0xA7	; 167
     c6a:	bb 4f       	sbci	r27, 0xFB	; 251
     c6c:	ac 91       	ld	r26, X
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	a0 50       	subi	r26, 0x00	; 0
     c72:	bf 4f       	sbci	r27, 0xFF	; 255
     c74:	ee 0f       	add	r30, r30
     c76:	ee 0f       	add	r30, r30
     c78:	ee 0f       	add	r30, r30
     c7a:	8c 91       	ld	r24, X
     c7c:	e8 0f       	add	r30, r24
     c7e:	e0 93 4b 04 	sts	0x044B, r30	; 0x80044b <OSPrioHighRdy>
     c82:	e0 93 4c 04 	sts	0x044C, r30	; 0x80044c <OSPrioCur>
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	e1 56       	subi	r30, 0x61	; 97
     c8e:	fa 4f       	sbci	r31, 0xFA	; 250
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <OSTCBHighRdy+0x1>
     c98:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <OSTCBHighRdy>
     c9c:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <OSTCBCur+0x1>
     ca0:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <OSTCBCur>
     ca4:	0c 94 32 04 	jmp	0x864	; 0x864 <OSStartHighRdy>
     ca8:	08 95       	ret

00000caa <OSTimeTick>:
     caa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <OSTimeTickHook>
     cae:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <OSRunning>
     cb2:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <OSTCBList>
     cb6:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <OSTCBList+0x1>
     cba:	21 e0       	ldi	r18, 0x01	; 1
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	01 f1       	breq	.+64     	; 0xd02 <OSTimeTick+0x58>
     cc2:	08 95       	ret
     cc4:	f8 94       	cli
     cc6:	86 81       	ldd	r24, Z+6	; 0x06
     cc8:	97 81       	ldd	r25, Z+7	; 0x07
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	b1 f0       	breq	.+44     	; 0xcfa <OSTimeTick+0x50>
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	97 83       	std	Z+7, r25	; 0x07
     cd2:	86 83       	std	Z+6, r24	; 0x06
     cd4:	89 2b       	or	r24, r25
     cd6:	89 f4       	brne	.+34     	; 0xcfa <OSTimeTick+0x50>
     cd8:	80 85       	ldd	r24, Z+8	; 0x08
     cda:	83 fd       	sbrc	r24, 3
     cdc:	16 c0       	rjmp	.+44     	; 0xd0a <OSTimeTick+0x60>
     cde:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <OSRdyGrp>
     ce2:	95 85       	ldd	r25, Z+13	; 0x0d
     ce4:	89 2b       	or	r24, r25
     ce6:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <OSRdyGrp>
     cea:	a3 85       	ldd	r26, Z+11	; 0x0b
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	a7 5a       	subi	r26, 0xA7	; 167
     cf0:	bb 4f       	sbci	r27, 0xFB	; 251
     cf2:	8c 91       	ld	r24, X
     cf4:	94 85       	ldd	r25, Z+12	; 0x0c
     cf6:	89 2b       	or	r24, r25
     cf8:	8c 93       	st	X, r24
     cfa:	02 80       	ldd	r0, Z+2	; 0x02
     cfc:	f3 81       	ldd	r31, Z+3	; 0x03
     cfe:	e0 2d       	mov	r30, r0
     d00:	78 94       	sei
     d02:	81 85       	ldd	r24, Z+9	; 0x09
     d04:	80 31       	cpi	r24, 0x10	; 16
     d06:	f1 f6       	brne	.-68     	; 0xcc4 <OSTimeTick+0x1a>
     d08:	dc cf       	rjmp	.-72     	; 0xcc2 <OSTimeTick+0x18>
     d0a:	37 83       	std	Z+7, r19	; 0x07
     d0c:	26 83       	std	Z+6, r18	; 0x06
     d0e:	f5 cf       	rjmp	.-22     	; 0xcfa <OSTimeTick+0x50>

00000d10 <OSVersion>:
     d10:	8c ef       	ldi	r24, 0xFC	; 252
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	08 95       	ret

00000d16 <OS_Dummy>:
     d16:	08 95       	ret

00000d18 <OS_Sched>:
     d18:	f8 94       	cli
     d1a:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <OSIntNesting>
     d1e:	81 11       	cpse	r24, r1
     d20:	3d c0       	rjmp	.+122    	; 0xd9c <OS_Sched+0x84>
     d22:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <OSLockNesting>
     d26:	81 11       	cpse	r24, r1
     d28:	39 c0       	rjmp	.+114    	; 0xd9c <OS_Sched+0x84>
     d2a:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <OSRdyGrp>
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	e0 50       	subi	r30, 0x00	; 0
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	e0 81       	ld	r30, Z
     d36:	ae 2f       	mov	r26, r30
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	a7 5a       	subi	r26, 0xA7	; 167
     d3c:	bb 4f       	sbci	r27, 0xFB	; 251
     d3e:	ac 91       	ld	r26, X
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	a0 50       	subi	r26, 0x00	; 0
     d44:	bf 4f       	sbci	r27, 0xFF	; 255
     d46:	ee 0f       	add	r30, r30
     d48:	ee 0f       	add	r30, r30
     d4a:	ee 0f       	add	r30, r30
     d4c:	8c 91       	ld	r24, X
     d4e:	e8 0f       	add	r30, r24
     d50:	e0 93 4b 04 	sts	0x044B, r30	; 0x80044b <OSPrioHighRdy>
     d54:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <OSPrioCur>
     d58:	e8 17       	cp	r30, r24
     d5a:	01 f1       	breq	.+64     	; 0xd9c <OS_Sched+0x84>
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	e1 56       	subi	r30, 0x61	; 97
     d64:	fa 4f       	sbci	r31, 0xFA	; 250
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <OSTCBHighRdy+0x1>
     d6e:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <OSTCBHighRdy>
     d72:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <OSCtxSwCtr>
     d76:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <OSCtxSwCtr+0x1>
     d7a:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <OSCtxSwCtr+0x2>
     d7e:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <OSCtxSwCtr+0x3>
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	a1 1d       	adc	r26, r1
     d86:	b1 1d       	adc	r27, r1
     d88:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <OSCtxSwCtr>
     d8c:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <OSCtxSwCtr+0x1>
     d90:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <OSCtxSwCtr+0x2>
     d94:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <OSCtxSwCtr+0x3>
     d98:	0e 94 62 04 	call	0x8c4	; 0x8c4 <OSCtxSw>
     d9c:	78 94       	sei
     d9e:	08 95       	ret

00000da0 <OSSchedUnlock>:
     da0:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <OSRunning>
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 f4       	brne	.+36     	; 0xdcc <OSSchedUnlock+0x2c>
     da8:	f8 94       	cli
     daa:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <OSLockNesting>
     dae:	88 23       	and	r24, r24
     db0:	61 f0       	breq	.+24     	; 0xdca <OSSchedUnlock+0x2a>
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <OSLockNesting>
     db8:	81 11       	cpse	r24, r1
     dba:	07 c0       	rjmp	.+14     	; 0xdca <OSSchedUnlock+0x2a>
     dbc:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <OSIntNesting>
     dc0:	81 11       	cpse	r24, r1
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <OSSchedUnlock+0x2a>
     dc4:	78 94       	sei
     dc6:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <OS_Sched>
     dca:	78 94       	sei
     dcc:	08 95       	ret

00000dce <OSTimeDly.part.0>:
     dce:	ac 01       	movw	r20, r24
     dd0:	f8 94       	cli
     dd2:	a0 91 5e 04 	lds	r26, 0x045E	; 0x80045e <OSTCBCur>
     dd6:	b0 91 5f 04 	lds	r27, 0x045F	; 0x80045f <OSTCBCur+0x1>
     dda:	1b 96       	adiw	r26, 0x0b	; 11
     ddc:	ec 91       	ld	r30, X
     dde:	1b 97       	sbiw	r26, 0x0b	; 11
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	1c 96       	adiw	r26, 0x0c	; 12
     de4:	9c 91       	ld	r25, X
     de6:	1c 97       	sbiw	r26, 0x0c	; 12
     de8:	90 95       	com	r25
     dea:	e7 5a       	subi	r30, 0xA7	; 167
     dec:	fb 4f       	sbci	r31, 0xFB	; 251
     dee:	80 81       	ld	r24, Z
     df0:	98 23       	and	r25, r24
     df2:	90 83       	st	Z, r25
     df4:	91 11       	cpse	r25, r1
     df6:	0a c0       	rjmp	.+20     	; 0xe0c <OSTimeDly.part.0+0x3e>
     df8:	1d 96       	adiw	r26, 0x0d	; 13
     dfa:	9c 91       	ld	r25, X
     dfc:	1d 97       	sbiw	r26, 0x0d	; 13
     dfe:	29 2f       	mov	r18, r25
     e00:	20 95       	com	r18
     e02:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <OSRdyGrp>
     e06:	92 23       	and	r25, r18
     e08:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <OSRdyGrp>
     e0c:	17 96       	adiw	r26, 0x07	; 7
     e0e:	5c 93       	st	X, r21
     e10:	4e 93       	st	-X, r20
     e12:	16 97       	sbiw	r26, 0x06	; 6
     e14:	78 94       	sei
     e16:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <OS_Sched>

00000e1a <OS_TCBInit>:
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	f8 94       	cli
     e22:	c0 91 53 04 	lds	r28, 0x0453	; 0x800453 <OSTCBFreeList>
     e26:	d0 91 54 04 	lds	r29, 0x0454	; 0x800454 <OSTCBFreeList+0x1>
     e2a:	20 97       	sbiw	r28, 0x00	; 0
     e2c:	09 f4       	brne	.+2      	; 0xe30 <OS_TCBInit+0x16>
     e2e:	54 c0       	rjmp	.+168    	; 0xed8 <OS_TCBInit+0xbe>
     e30:	18 2f       	mov	r17, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	9b 81       	ldd	r25, Y+3	; 0x03
     e36:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <OSTCBFreeList+0x1>
     e3a:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <OSTCBFreeList>
     e3e:	78 94       	sei
     e40:	79 83       	std	Y+1, r23	; 0x01
     e42:	68 83       	st	Y, r22
     e44:	19 87       	std	Y+9, r17	; 0x09
     e46:	18 86       	std	Y+8, r1	; 0x08
     e48:	1f 82       	std	Y+7, r1	; 0x07
     e4a:	1e 82       	std	Y+6, r1	; 0x06
     e4c:	1e 86       	std	Y+14, r1	; 0x0e
     e4e:	e1 2f       	mov	r30, r17
     e50:	e6 95       	lsr	r30
     e52:	e6 95       	lsr	r30
     e54:	e6 95       	lsr	r30
     e56:	eb 87       	std	Y+11, r30	; 0x0b
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	e0 50       	subi	r30, 0x00	; 0
     e5c:	fe 4f       	sbci	r31, 0xFE	; 254
     e5e:	80 81       	ld	r24, Z
     e60:	8d 87       	std	Y+13, r24	; 0x0d
     e62:	e1 2f       	mov	r30, r17
     e64:	e7 70       	andi	r30, 0x07	; 7
     e66:	ea 87       	std	Y+10, r30	; 0x0a
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	e0 50       	subi	r30, 0x00	; 0
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	80 81       	ld	r24, Z
     e70:	8c 87       	std	Y+12, r24	; 0x0c
     e72:	ce 01       	movw	r24, r28
     e74:	0e 94 a3 05 	call	0xb46	; 0xb46 <OSTCBInitHook>
     e78:	ce 01       	movw	r24, r28
     e7a:	0e 94 9b 05 	call	0xb36	; 0xb36 <OSTaskCreateHook>
     e7e:	f8 94       	cli
     e80:	e1 2f       	mov	r30, r17
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	e1 56       	subi	r30, 0x61	; 97
     e8a:	fa 4f       	sbci	r31, 0xFA	; 250
     e8c:	d1 83       	std	Z+1, r29	; 0x01
     e8e:	c0 83       	st	Z, r28
     e90:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <OSTCBList>
     e94:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <OSTCBList+0x1>
     e98:	fb 83       	std	Y+3, r31	; 0x03
     e9a:	ea 83       	std	Y+2, r30	; 0x02
     e9c:	1d 82       	std	Y+5, r1	; 0x05
     e9e:	1c 82       	std	Y+4, r1	; 0x04
     ea0:	30 97       	sbiw	r30, 0x00	; 0
     ea2:	11 f0       	breq	.+4      	; 0xea8 <OS_TCBInit+0x8e>
     ea4:	d5 83       	std	Z+5, r29	; 0x05
     ea6:	c4 83       	std	Z+4, r28	; 0x04
     ea8:	d0 93 4e 04 	sts	0x044E, r29	; 0x80044e <OSTCBList+0x1>
     eac:	c0 93 4d 04 	sts	0x044D, r28	; 0x80044d <OSTCBList>
     eb0:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <OSRdyGrp>
     eb4:	9d 85       	ldd	r25, Y+13	; 0x0d
     eb6:	89 2b       	or	r24, r25
     eb8:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <OSRdyGrp>
     ebc:	eb 85       	ldd	r30, Y+11	; 0x0b
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	e7 5a       	subi	r30, 0xA7	; 167
     ec2:	fb 4f       	sbci	r31, 0xFB	; 251
     ec4:	80 81       	ld	r24, Z
     ec6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ec8:	89 2b       	or	r24, r25
     eca:	80 83       	st	Z, r24
     ecc:	78 94       	sei
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	08 95       	ret
     ed8:	78 94       	sei
     eda:	86 e4       	ldi	r24, 0x46	; 70
     edc:	f9 cf       	rjmp	.-14     	; 0xed0 <OS_TCBInit+0xb6>

00000ede <OSTaskCreate>:
     ede:	9f 92       	push	r9
     ee0:	af 92       	push	r10
     ee2:	bf 92       	push	r11
     ee4:	cf 92       	push	r12
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	f8 94       	cli
     ef6:	c2 2f       	mov	r28, r18
     ef8:	d0 e0       	ldi	r29, 0x00	; 0
     efa:	cc 0f       	add	r28, r28
     efc:	dd 1f       	adc	r29, r29
     efe:	c1 56       	subi	r28, 0x61	; 97
     f00:	da 4f       	sbci	r29, 0xFA	; 250
     f02:	e8 81       	ld	r30, Y
     f04:	f9 81       	ldd	r31, Y+1	; 0x01
     f06:	ef 2b       	or	r30, r31
     f08:	09 f0       	breq	.+2      	; 0xf0c <OSTaskCreate+0x2e>
     f0a:	3b c0       	rjmp	.+118    	; 0xf82 <OSTaskCreate+0xa4>
     f0c:	92 2e       	mov	r9, r18
     f0e:	21 e0       	ldi	r18, 0x01	; 1
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	39 83       	std	Y+1, r19	; 0x01
     f14:	28 83       	st	Y, r18
     f16:	78 94       	sei
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <OSTaskStkInit>
     f20:	b1 2c       	mov	r11, r1
     f22:	a1 2c       	mov	r10, r1
     f24:	d1 2c       	mov	r13, r1
     f26:	c1 2c       	mov	r12, r1
     f28:	e1 2c       	mov	r14, r1
     f2a:	f1 2c       	mov	r15, r1
     f2c:	87 01       	movw	r16, r14
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	bc 01       	movw	r22, r24
     f38:	89 2d       	mov	r24, r9
     f3a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OS_TCBInit>
     f3e:	18 2f       	mov	r17, r24
     f40:	81 11       	cpse	r24, r1
     f42:	1a c0       	rjmp	.+52     	; 0xf78 <OSTaskCreate+0x9a>
     f44:	f8 94       	cli
     f46:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <OSTaskCtr>
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
     f4c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <OSTaskCtr>
     f50:	78 94       	sei
     f52:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <OSRunning>
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	11 f4       	brne	.+4      	; 0xf5e <OSTaskCreate+0x80>
     f5a:	0e 94 8c 06 	call	0xd18	; 0xd18 <OS_Sched>
     f5e:	81 2f       	mov	r24, r17
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	bf 90       	pop	r11
     f72:	af 90       	pop	r10
     f74:	9f 90       	pop	r9
     f76:	08 95       	ret
     f78:	f8 94       	cli
     f7a:	19 82       	std	Y+1, r1	; 0x01
     f7c:	18 82       	st	Y, r1
     f7e:	78 94       	sei
     f80:	ee cf       	rjmp	.-36     	; 0xf5e <OSTaskCreate+0x80>
     f82:	78 94       	sei
     f84:	18 e2       	ldi	r17, 0x28	; 40
     f86:	eb cf       	rjmp	.-42     	; 0xf5e <OSTaskCreate+0x80>

00000f88 <OSInit>:
     f88:	0e 94 a0 05 	call	0xb40	; 0xb40 <OSInitHookBegin>
     f8c:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <OSIntNesting>
     f90:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <OSLockNesting>
     f94:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <OSTaskCtr>
     f98:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <OSRunning>
     f9c:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <OSCtxSwCtr>
     fa0:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <OSCtxSwCtr+0x1>
     fa4:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <OSCtxSwCtr+0x2>
     fa8:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <OSCtxSwCtr+0x3>
     fac:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <OSIdleCtr>
     fb0:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <OSIdleCtr+0x1>
     fb4:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <OSIdleCtr+0x2>
     fb8:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <OSIdleCtr+0x3>
     fbc:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <OSRdyGrp>
     fc0:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <OSRdyTbl>
     fc4:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <OSRdyTbl+0x1>
     fc8:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <OSRdyTbl+0x2>
     fcc:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <OSPrioCur>
     fd0:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <OSPrioHighRdy>
     fd4:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <OSTCBHighRdy+0x1>
     fd8:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <OSTCBHighRdy>
     fdc:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <OSTCBCur+0x1>
     fe0:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <OSTCBCur>
     fe4:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <OSTCBList+0x1>
     fe8:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <OSTCBList>
     fec:	ef e9       	ldi	r30, 0x9F	; 159
     fee:	f5 e0       	ldi	r31, 0x05	; 5
     ff0:	11 92       	st	Z+, r1
     ff2:	11 92       	st	Z+, r1
     ff4:	85 e0       	ldi	r24, 0x05	; 5
     ff6:	e1 3c       	cpi	r30, 0xC1	; 193
     ff8:	f8 07       	cpc	r31, r24
     ffa:	d1 f7       	brne	.-12     	; 0xff0 <OSInit+0x68>
     ffc:	e0 ea       	ldi	r30, 0xA0	; 160
     ffe:	f4 e0       	ldi	r31, 0x04	; 4
    1000:	cf 01       	movw	r24, r30
    1002:	0f 96       	adiw	r24, 0x0f	; 15
    1004:	93 83       	std	Z+3, r25	; 0x03
    1006:	82 83       	std	Z+2, r24	; 0x02
    1008:	fc 01       	movw	r30, r24
    100a:	85 e0       	ldi	r24, 0x05	; 5
    100c:	e0 39       	cpi	r30, 0x90	; 144
    100e:	f8 07       	cpc	r31, r24
    1010:	b9 f7       	brne	.-18     	; 0x1000 <OSInit+0x78>
    1012:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <OSTCBTbl+0xf3>
    1016:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <OSTCBTbl+0xf2>
    101a:	80 ea       	ldi	r24, 0xA0	; 160
    101c:	94 e0       	ldi	r25, 0x04	; 4
    101e:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <OSTCBFreeList+0x1>
    1022:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <OSTCBFreeList>
    1026:	20 e1       	ldi	r18, 0x10	; 16
    1028:	4f e9       	ldi	r20, 0x9F	; 159
    102a:	54 e0       	ldi	r21, 0x04	; 4
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	84 ea       	ldi	r24, 0xA4	; 164
    1032:	95 e0       	ldi	r25, 0x05	; 5
    1034:	0e 94 6f 07 	call	0xede	; 0xede <OSTaskCreate>
    1038:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <OSInitHookEnd>

0000103c <OSTaskDel>:
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	f0 90 5d 04 	lds	r15, 0x045D	; 0x80045d <OSIntNesting>
    104a:	f1 10       	cpse	r15, r1
    104c:	76 c0       	rjmp	.+236    	; 0x113a <OSTaskDel+0xfe>
    104e:	f8 94       	cli
    1050:	8f 3f       	cpi	r24, 0xFF	; 255
    1052:	29 f4       	brne	.+10     	; 0x105e <OSTaskDel+0x22>
    1054:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <OSTCBCur>
    1058:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <OSTCBCur+0x1>
    105c:	81 85       	ldd	r24, Z+9	; 0x09
    105e:	08 2f       	mov	r16, r24
    1060:	10 e0       	ldi	r17, 0x00	; 0
    1062:	00 0f       	add	r16, r16
    1064:	11 1f       	adc	r17, r17
    1066:	f8 01       	movw	r30, r16
    1068:	e1 56       	subi	r30, 0x61	; 97
    106a:	fa 4f       	sbci	r31, 0xFA	; 250
    106c:	c0 81       	ld	r28, Z
    106e:	d1 81       	ldd	r29, Z+1	; 0x01
    1070:	20 97       	sbiw	r28, 0x00	; 0
    1072:	09 f4       	brne	.+2      	; 0x1076 <OSTaskDel+0x3a>
    1074:	5e c0       	rjmp	.+188    	; 0x1132 <OSTaskDel+0xf6>
    1076:	eb 85       	ldd	r30, Y+11	; 0x0b
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8c 85       	ldd	r24, Y+12	; 0x0c
    107c:	80 95       	com	r24
    107e:	e7 5a       	subi	r30, 0xA7	; 167
    1080:	fb 4f       	sbci	r31, 0xFB	; 251
    1082:	90 81       	ld	r25, Z
    1084:	89 23       	and	r24, r25
    1086:	80 83       	st	Z, r24
    1088:	81 11       	cpse	r24, r1
    108a:	08 c0       	rjmp	.+16     	; 0x109c <OSTaskDel+0x60>
    108c:	8d 85       	ldd	r24, Y+13	; 0x0d
    108e:	98 2f       	mov	r25, r24
    1090:	90 95       	com	r25
    1092:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <OSRdyGrp>
    1096:	89 23       	and	r24, r25
    1098:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <OSRdyGrp>
    109c:	1f 82       	std	Y+7, r1	; 0x07
    109e:	1e 82       	std	Y+6, r1	; 0x06
    10a0:	18 86       	std	Y+8, r1	; 0x08
    10a2:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <OSLockNesting>
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <OSTaskDel+0x74>
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <OSLockNesting>
    10b0:	78 94       	sei
    10b2:	f8 94       	cli
    10b4:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <OSLockNesting>
    10b8:	88 23       	and	r24, r24
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <OSTaskDel+0x86>
    10bc:	81 50       	subi	r24, 0x01	; 1
    10be:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <OSLockNesting>
    10c2:	ce 01       	movw	r24, r28
    10c4:	0e 94 9c 05 	call	0xb38	; 0xb38 <OSTaskDelHook>
    10c8:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <OSTaskCtr>
    10cc:	81 50       	subi	r24, 0x01	; 1
    10ce:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <OSTaskCtr>
    10d2:	f8 01       	movw	r30, r16
    10d4:	e1 56       	subi	r30, 0x61	; 97
    10d6:	fa 4f       	sbci	r31, 0xFA	; 250
    10d8:	11 82       	std	Z+1, r1	; 0x01
    10da:	10 82       	st	Z, r1
    10dc:	ec 81       	ldd	r30, Y+4	; 0x04
    10de:	fd 81       	ldd	r31, Y+5	; 0x05
    10e0:	aa 81       	ldd	r26, Y+2	; 0x02
    10e2:	bb 81       	ldd	r27, Y+3	; 0x03
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	e1 f4       	brne	.+56     	; 0x1120 <OSTaskDel+0xe4>
    10e8:	15 96       	adiw	r26, 0x05	; 5
    10ea:	1c 92       	st	X, r1
    10ec:	1e 92       	st	-X, r1
    10ee:	14 97       	sbiw	r26, 0x04	; 4
    10f0:	b0 93 4e 04 	sts	0x044E, r27	; 0x80044e <OSTCBList+0x1>
    10f4:	a0 93 4d 04 	sts	0x044D, r26	; 0x80044d <OSTCBList>
    10f8:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <OSTCBFreeList>
    10fc:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <OSTCBFreeList+0x1>
    1100:	9b 83       	std	Y+3, r25	; 0x03
    1102:	8a 83       	std	Y+2, r24	; 0x02
    1104:	d0 93 54 04 	sts	0x0454, r29	; 0x800454 <OSTCBFreeList+0x1>
    1108:	c0 93 53 04 	sts	0x0453, r28	; 0x800453 <OSTCBFreeList>
    110c:	78 94       	sei
    110e:	0e 94 8c 06 	call	0xd18	; 0xd18 <OS_Sched>
    1112:	8f 2d       	mov	r24, r15
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	08 95       	ret
    1120:	b3 83       	std	Z+3, r27	; 0x03
    1122:	a2 83       	std	Z+2, r26	; 0x02
    1124:	aa 81       	ldd	r26, Y+2	; 0x02
    1126:	bb 81       	ldd	r27, Y+3	; 0x03
    1128:	15 96       	adiw	r26, 0x05	; 5
    112a:	fc 93       	st	X, r31
    112c:	ee 93       	st	-X, r30
    112e:	14 97       	sbiw	r26, 0x04	; 4
    1130:	e3 cf       	rjmp	.-58     	; 0x10f8 <OSTaskDel+0xbc>
    1132:	78 94       	sei
    1134:	9c e3       	ldi	r25, 0x3C	; 60
    1136:	f9 2e       	mov	r15, r25
    1138:	ec cf       	rjmp	.-40     	; 0x1112 <OSTaskDel+0xd6>
    113a:	8f e3       	ldi	r24, 0x3F	; 63
    113c:	f8 2e       	mov	r15, r24
    113e:	e9 cf       	rjmp	.-46     	; 0x1112 <OSTaskDel+0xd6>

00001140 <OSTaskDelReq>:
    1140:	8f 3f       	cpi	r24, 0xFF	; 255
    1142:	41 f4       	brne	.+16     	; 0x1154 <OSTaskDelReq+0x14>
    1144:	f8 94       	cli
    1146:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <OSTCBCur>
    114a:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <OSTCBCur+0x1>
    114e:	86 85       	ldd	r24, Z+14	; 0x0e
    1150:	78 94       	sei
    1152:	08 95       	ret
    1154:	f8 94       	cli
    1156:	e8 2f       	mov	r30, r24
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	e1 56       	subi	r30, 0x61	; 97
    1160:	fa 4f       	sbci	r31, 0xFA	; 250
    1162:	01 90       	ld	r0, Z+
    1164:	f0 81       	ld	r31, Z
    1166:	e0 2d       	mov	r30, r0
    1168:	8b e0       	ldi	r24, 0x0B	; 11
    116a:	30 97       	sbiw	r30, 0x00	; 0
    116c:	89 f3       	breq	.-30     	; 0x1150 <OSTaskDelReq+0x10>
    116e:	8e e3       	ldi	r24, 0x3E	; 62
    1170:	86 87       	std	Z+14, r24	; 0x0e
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	ed cf       	rjmp	.-38     	; 0x1150 <OSTaskDelReq+0x10>

00001176 <OSTimeDly>:
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	11 f0       	breq	.+4      	; 0x117e <OSTimeDly+0x8>
    117a:	0c 94 e7 06 	jmp	0xdce	; 0xdce <OSTimeDly.part.0>
    117e:	08 95       	ret

00001180 <OSTimeDlyHMSM>:
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	81 11       	cpse	r24, r1
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <OSTimeDlyHMSM+0x26>
    118c:	61 11       	cpse	r22, r1
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <OSTimeDlyHMSM+0x26>
    1190:	41 11       	cpse	r20, r1
    1192:	0c c0       	rjmp	.+24     	; 0x11ac <OSTimeDlyHMSM+0x2c>
    1194:	21 15       	cp	r18, r1
    1196:	31 05       	cpc	r19, r1
    1198:	61 f4       	brne	.+24     	; 0x11b2 <OSTimeDlyHMSM+0x32>
    119a:	84 e5       	ldi	r24, 0x54	; 84
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	08 95       	ret
    11a6:	6c 33       	cpi	r22, 0x3C	; 60
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <OSTimeDlyHMSM+0x2c>
    11aa:	4f c0       	rjmp	.+158    	; 0x124a <OSTimeDlyHMSM+0xca>
    11ac:	4c 33       	cpi	r20, 0x3C	; 60
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <OSTimeDlyHMSM+0x32>
    11b0:	4e c0       	rjmp	.+156    	; 0x124e <OSTimeDlyHMSM+0xce>
    11b2:	28 3e       	cpi	r18, 0xE8	; 232
    11b4:	93 e0       	ldi	r25, 0x03	; 3
    11b6:	39 07       	cpc	r19, r25
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <OSTimeDlyHMSM+0x3c>
    11ba:	4b c0       	rjmp	.+150    	; 0x1252 <OSTimeDlyHMSM+0xd2>
    11bc:	f9 01       	movw	r30, r18
    11be:	58 2f       	mov	r21, r24
    11c0:	26 2f       	mov	r18, r22
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	ac e3       	ldi	r26, 0x3C	; 60
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__umulhisi3>
    11cc:	6b 01       	movw	r12, r22
    11ce:	7c 01       	movw	r14, r24
    11d0:	c4 0e       	add	r12, r20
    11d2:	d1 1c       	adc	r13, r1
    11d4:	e1 1c       	adc	r14, r1
    11d6:	f1 1c       	adc	r15, r1
    11d8:	25 2f       	mov	r18, r21
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	a0 e1       	ldi	r26, 0x10	; 16
    11de:	be e0       	ldi	r27, 0x0E	; 14
    11e0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__umulhisi3>
    11e4:	a7 01       	movw	r20, r14
    11e6:	96 01       	movw	r18, r12
    11e8:	26 0f       	add	r18, r22
    11ea:	37 1f       	adc	r19, r23
    11ec:	48 1f       	adc	r20, r24
    11ee:	59 1f       	adc	r21, r25
    11f0:	a4 e6       	ldi	r26, 0x64	; 100
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__muluhisi3>
    11f8:	6b 01       	movw	r12, r22
    11fa:	7c 01       	movw	r14, r24
    11fc:	9f 01       	movw	r18, r30
    11fe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__umulhisi3>
    1202:	6c 50       	subi	r22, 0x0C	; 12
    1204:	7e 4f       	sbci	r23, 0xFE	; 254
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	28 ee       	ldi	r18, 0xE8	; 232
    120c:	33 e0       	ldi	r19, 0x03	; 3
    120e:	40 e0       	ldi	r20, 0x00	; 0
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	0e 94 bf 09 	call	0x137e	; 0x137e <__udivmodsi4>
    1216:	d7 01       	movw	r26, r14
    1218:	c6 01       	movw	r24, r12
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	a4 1f       	adc	r26, r20
    1220:	b5 1f       	adc	r27, r21
    1222:	7d 01       	movw	r14, r26
    1224:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
    1228:	e1 14       	cp	r14, r1
    122a:	f1 04       	cpc	r15, r1
    122c:	11 f4       	brne	.+4      	; 0x1232 <OSTimeDlyHMSM+0xb2>
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	b5 cf       	rjmp	.-150    	; 0x119c <OSTimeDlyHMSM+0x1c>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e8       	ldi	r25, 0x80	; 128
    1236:	0e 94 e7 06 	call	0xdce	; 0xdce <OSTimeDly.part.0>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e8       	ldi	r25, 0x80	; 128
    123e:	0e 94 e7 06 	call	0xdce	; 0xdce <OSTimeDly.part.0>
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	e8 1a       	sub	r14, r24
    1246:	f1 08       	sbc	r15, r1
    1248:	ef cf       	rjmp	.-34     	; 0x1228 <OSTimeDlyHMSM+0xa8>
    124a:	81 e5       	ldi	r24, 0x51	; 81
    124c:	a7 cf       	rjmp	.-178    	; 0x119c <OSTimeDlyHMSM+0x1c>
    124e:	82 e5       	ldi	r24, 0x52	; 82
    1250:	a5 cf       	rjmp	.-182    	; 0x119c <OSTimeDlyHMSM+0x1c>
    1252:	83 e5       	ldi	r24, 0x53	; 83
    1254:	a3 cf       	rjmp	.-186    	; 0x119c <OSTimeDlyHMSM+0x1c>

00001256 <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    1256:	0e 94 76 03 	call	0x6ec	; 0x6ec <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    125a:	0e 94 c4 07 	call	0xf88	; 0xf88 <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	0e 94 99 02 	call	0x532	; 0x532 <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    126a:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    126e:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    1272:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    1276:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    127a:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
    myrobot.KP = DEFAULT_KP; //0.03
    127e:	8a e9       	ldi	r24, 0x9A	; 154
    1280:	99 e9       	ldi	r25, 0x99	; 153
    1282:	a9 e9       	ldi	r26, 0x99	; 153
    1284:	bd e3       	ldi	r27, 0x3D	; 61
    1286:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <myrobot+0x5>
    128a:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <myrobot+0x6>
    128e:	a0 93 a1 02 	sts	0x02A1, r26	; 0x8002a1 <myrobot+0x7>
    1292:	b0 93 a2 02 	sts	0x02A2, r27	; 0x8002a2 <myrobot+0x8>
    myrobot.KD = DEFAULT_KD; //0.07
    1296:	8f e8       	ldi	r24, 0x8F	; 143
    1298:	92 ec       	ldi	r25, 0xC2	; 194
    129a:	a5 ef       	ldi	r26, 0xF5	; 245
    129c:	bb e3       	ldi	r27, 0x3B	; 59
    129e:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <myrobot+0x9>
    12a2:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <myrobot+0xa>
    12a6:	a0 93 a5 02 	sts	0x02A5, r26	; 0x8002a5 <myrobot+0xb>
    12aa:	b0 93 a6 02 	sts	0x02A6, r27	; 0x8002a6 <myrobot+0xc>
    myrobot.KI = DEFAULT_KI; //0.0004
    12ae:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <myrobot+0xd>
    12b2:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <myrobot+0xe>
    12b6:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <myrobot+0xf>
    12ba:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <myrobot+0x10>
    myrobot.lastError = 0.0;
    12be:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <myrobot+0x11>
    12c2:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <myrobot+0x12>
    12c6:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <myrobot+0x13>
    12ca:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <myrobot+0x14>
    myrobot.integral = 0.0;
    12ce:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <myrobot+0x15>
    12d2:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <myrobot+0x16>
    12d6:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <myrobot+0x17>
    12da:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <myrobot+0x18>
    myrobot.prevLeftSpeed = 0;
    12de:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <myrobot+0x1c>
    12e2:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <myrobot+0x1b>
    myrobot.prevRightSpeed = 0;
    12e6:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <myrobot+0x1e>
    12ea:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <myrobot+0x1d>
    myrobot.inRoundabout = 0;
    12ee:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <myrobot+0x20>
    12f2:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <myrobot+0x1f>
    myrobot.turn = 1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <myrobot+0x22>
    12fe:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <myrobot+0x21>
    myrobot.goal = 1000;                                      /* goal is to follow on the middle sensor */
    1302:	88 ee       	ldi	r24, 0xE8	; 232
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <myrobot+0x1a>
    130a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <myrobot+0x19>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	4c eb       	ldi	r20, 0xBC	; 188
    1312:	53 e0       	ldi	r21, 0x03	; 3
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	87 e7       	ldi	r24, 0x77	; 119
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 6f 07 	call	0xede	; 0xede <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    1320:	0e 94 3c 03 	call	0x678	; 0x678 <robo_Honk>
    1324:	0e 94 62 03 	call	0x6c4	; 0x6c4 <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    1328:	0e 94 28 06 	call	0xc50	; 0xc50 <OSStart>
    132c:	ff cf       	rjmp	.-2      	; 0x132c <main+0xd6>

0000132e <__udivmodhi4>:
    132e:	aa 1b       	sub	r26, r26
    1330:	bb 1b       	sub	r27, r27
    1332:	51 e1       	ldi	r21, 0x11	; 17
    1334:	07 c0       	rjmp	.+14     	; 0x1344 <__udivmodhi4_ep>

00001336 <__udivmodhi4_loop>:
    1336:	aa 1f       	adc	r26, r26
    1338:	bb 1f       	adc	r27, r27
    133a:	a6 17       	cp	r26, r22
    133c:	b7 07       	cpc	r27, r23
    133e:	10 f0       	brcs	.+4      	; 0x1344 <__udivmodhi4_ep>
    1340:	a6 1b       	sub	r26, r22
    1342:	b7 0b       	sbc	r27, r23

00001344 <__udivmodhi4_ep>:
    1344:	88 1f       	adc	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	5a 95       	dec	r21
    134a:	a9 f7       	brne	.-22     	; 0x1336 <__udivmodhi4_loop>
    134c:	80 95       	com	r24
    134e:	90 95       	com	r25
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	08 95       	ret

00001356 <__divmodhi4>:
    1356:	97 fb       	bst	r25, 7
    1358:	07 2e       	mov	r0, r23
    135a:	16 f4       	brtc	.+4      	; 0x1360 <__divmodhi4+0xa>
    135c:	00 94       	com	r0
    135e:	07 d0       	rcall	.+14     	; 0x136e <__divmodhi4_neg1>
    1360:	77 fd       	sbrc	r23, 7
    1362:	09 d0       	rcall	.+18     	; 0x1376 <__divmodhi4_neg2>
    1364:	0e 94 97 09 	call	0x132e	; 0x132e <__udivmodhi4>
    1368:	07 fc       	sbrc	r0, 7
    136a:	05 d0       	rcall	.+10     	; 0x1376 <__divmodhi4_neg2>
    136c:	3e f4       	brtc	.+14     	; 0x137c <__divmodhi4_exit>

0000136e <__divmodhi4_neg1>:
    136e:	90 95       	com	r25
    1370:	81 95       	neg	r24
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	08 95       	ret

00001376 <__divmodhi4_neg2>:
    1376:	70 95       	com	r23
    1378:	61 95       	neg	r22
    137a:	7f 4f       	sbci	r23, 0xFF	; 255

0000137c <__divmodhi4_exit>:
    137c:	08 95       	ret

0000137e <__udivmodsi4>:
    137e:	a1 e2       	ldi	r26, 0x21	; 33
    1380:	1a 2e       	mov	r1, r26
    1382:	aa 1b       	sub	r26, r26
    1384:	bb 1b       	sub	r27, r27
    1386:	fd 01       	movw	r30, r26
    1388:	0d c0       	rjmp	.+26     	; 0x13a4 <__udivmodsi4_ep>

0000138a <__udivmodsi4_loop>:
    138a:	aa 1f       	adc	r26, r26
    138c:	bb 1f       	adc	r27, r27
    138e:	ee 1f       	adc	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	a2 17       	cp	r26, r18
    1394:	b3 07       	cpc	r27, r19
    1396:	e4 07       	cpc	r30, r20
    1398:	f5 07       	cpc	r31, r21
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <__udivmodsi4_ep>
    139c:	a2 1b       	sub	r26, r18
    139e:	b3 0b       	sbc	r27, r19
    13a0:	e4 0b       	sbc	r30, r20
    13a2:	f5 0b       	sbc	r31, r21

000013a4 <__udivmodsi4_ep>:
    13a4:	66 1f       	adc	r22, r22
    13a6:	77 1f       	adc	r23, r23
    13a8:	88 1f       	adc	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	1a 94       	dec	r1
    13ae:	69 f7       	brne	.-38     	; 0x138a <__udivmodsi4_loop>
    13b0:	60 95       	com	r22
    13b2:	70 95       	com	r23
    13b4:	80 95       	com	r24
    13b6:	90 95       	com	r25
    13b8:	9b 01       	movw	r18, r22
    13ba:	ac 01       	movw	r20, r24
    13bc:	bd 01       	movw	r22, r26
    13be:	cf 01       	movw	r24, r30
    13c0:	08 95       	ret

000013c2 <__tablejump2__>:
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	05 90       	lpm	r0, Z+
    13c8:	f4 91       	lpm	r31, Z
    13ca:	e0 2d       	mov	r30, r0
    13cc:	09 94       	ijmp

000013ce <__umulhisi3>:
    13ce:	a2 9f       	mul	r26, r18
    13d0:	b0 01       	movw	r22, r0
    13d2:	b3 9f       	mul	r27, r19
    13d4:	c0 01       	movw	r24, r0
    13d6:	a3 9f       	mul	r26, r19
    13d8:	70 0d       	add	r23, r0
    13da:	81 1d       	adc	r24, r1
    13dc:	11 24       	eor	r1, r1
    13de:	91 1d       	adc	r25, r1
    13e0:	b2 9f       	mul	r27, r18
    13e2:	70 0d       	add	r23, r0
    13e4:	81 1d       	adc	r24, r1
    13e6:	11 24       	eor	r1, r1
    13e8:	91 1d       	adc	r25, r1
    13ea:	08 95       	ret

000013ec <__muluhisi3>:
    13ec:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__umulhisi3>
    13f0:	a5 9f       	mul	r26, r21
    13f2:	90 0d       	add	r25, r0
    13f4:	b4 9f       	mul	r27, r20
    13f6:	90 0d       	add	r25, r0
    13f8:	a4 9f       	mul	r26, r20
    13fa:	80 0d       	add	r24, r0
    13fc:	91 1d       	adc	r25, r1
    13fe:	11 24       	eor	r1, r1
    1400:	08 95       	ret

00001402 <__subsf3>:
    1402:	50 58       	subi	r21, 0x80	; 128

00001404 <__addsf3>:
    1404:	bb 27       	eor	r27, r27
    1406:	aa 27       	eor	r26, r26
    1408:	0e 94 19 0a 	call	0x1432	; 0x1432 <__addsf3x>
    140c:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    1410:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    1414:	38 f0       	brcs	.+14     	; 0x1424 <__addsf3+0x20>
    1416:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    141a:	20 f0       	brcs	.+8      	; 0x1424 <__addsf3+0x20>
    141c:	39 f4       	brne	.+14     	; 0x142c <__addsf3+0x28>
    141e:	9f 3f       	cpi	r25, 0xFF	; 255
    1420:	19 f4       	brne	.+6      	; 0x1428 <__addsf3+0x24>
    1422:	26 f4       	brtc	.+8      	; 0x142c <__addsf3+0x28>
    1424:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_nan>
    1428:	0e f4       	brtc	.+2      	; 0x142c <__addsf3+0x28>
    142a:	e0 95       	com	r30
    142c:	e7 fb       	bst	r30, 7
    142e:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>

00001432 <__addsf3x>:
    1432:	e9 2f       	mov	r30, r25
    1434:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    1438:	58 f3       	brcs	.-42     	; 0x1410 <__addsf3+0xc>
    143a:	ba 17       	cp	r27, r26
    143c:	62 07       	cpc	r22, r18
    143e:	73 07       	cpc	r23, r19
    1440:	84 07       	cpc	r24, r20
    1442:	95 07       	cpc	r25, r21
    1444:	20 f0       	brcs	.+8      	; 0x144e <__addsf3x+0x1c>
    1446:	79 f4       	brne	.+30     	; 0x1466 <__addsf3x+0x34>
    1448:	a6 f5       	brtc	.+104    	; 0x14b2 <__addsf3x+0x80>
    144a:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    144e:	0e f4       	brtc	.+2      	; 0x1452 <__addsf3x+0x20>
    1450:	e0 95       	com	r30
    1452:	0b 2e       	mov	r0, r27
    1454:	ba 2f       	mov	r27, r26
    1456:	a0 2d       	mov	r26, r0
    1458:	0b 01       	movw	r0, r22
    145a:	b9 01       	movw	r22, r18
    145c:	90 01       	movw	r18, r0
    145e:	0c 01       	movw	r0, r24
    1460:	ca 01       	movw	r24, r20
    1462:	a0 01       	movw	r20, r0
    1464:	11 24       	eor	r1, r1
    1466:	ff 27       	eor	r31, r31
    1468:	59 1b       	sub	r21, r25
    146a:	99 f0       	breq	.+38     	; 0x1492 <__addsf3x+0x60>
    146c:	59 3f       	cpi	r21, 0xF9	; 249
    146e:	50 f4       	brcc	.+20     	; 0x1484 <__addsf3x+0x52>
    1470:	50 3e       	cpi	r21, 0xE0	; 224
    1472:	68 f1       	brcs	.+90     	; 0x14ce <__addsf3x+0x9c>
    1474:	1a 16       	cp	r1, r26
    1476:	f0 40       	sbci	r31, 0x00	; 0
    1478:	a2 2f       	mov	r26, r18
    147a:	23 2f       	mov	r18, r19
    147c:	34 2f       	mov	r19, r20
    147e:	44 27       	eor	r20, r20
    1480:	58 5f       	subi	r21, 0xF8	; 248
    1482:	f3 cf       	rjmp	.-26     	; 0x146a <__addsf3x+0x38>
    1484:	46 95       	lsr	r20
    1486:	37 95       	ror	r19
    1488:	27 95       	ror	r18
    148a:	a7 95       	ror	r26
    148c:	f0 40       	sbci	r31, 0x00	; 0
    148e:	53 95       	inc	r21
    1490:	c9 f7       	brne	.-14     	; 0x1484 <__addsf3x+0x52>
    1492:	7e f4       	brtc	.+30     	; 0x14b2 <__addsf3x+0x80>
    1494:	1f 16       	cp	r1, r31
    1496:	ba 0b       	sbc	r27, r26
    1498:	62 0b       	sbc	r22, r18
    149a:	73 0b       	sbc	r23, r19
    149c:	84 0b       	sbc	r24, r20
    149e:	ba f0       	brmi	.+46     	; 0x14ce <__addsf3x+0x9c>
    14a0:	91 50       	subi	r25, 0x01	; 1
    14a2:	a1 f0       	breq	.+40     	; 0x14cc <__addsf3x+0x9a>
    14a4:	ff 0f       	add	r31, r31
    14a6:	bb 1f       	adc	r27, r27
    14a8:	66 1f       	adc	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	c2 f7       	brpl	.-16     	; 0x14a0 <__addsf3x+0x6e>
    14b0:	0e c0       	rjmp	.+28     	; 0x14ce <__addsf3x+0x9c>
    14b2:	ba 0f       	add	r27, r26
    14b4:	62 1f       	adc	r22, r18
    14b6:	73 1f       	adc	r23, r19
    14b8:	84 1f       	adc	r24, r20
    14ba:	48 f4       	brcc	.+18     	; 0x14ce <__addsf3x+0x9c>
    14bc:	87 95       	ror	r24
    14be:	77 95       	ror	r23
    14c0:	67 95       	ror	r22
    14c2:	b7 95       	ror	r27
    14c4:	f7 95       	ror	r31
    14c6:	9e 3f       	cpi	r25, 0xFE	; 254
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <__addsf3x+0x9a>
    14ca:	b0 cf       	rjmp	.-160    	; 0x142c <__addsf3+0x28>
    14cc:	93 95       	inc	r25
    14ce:	88 0f       	add	r24, r24
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <__addsf3x+0xa2>
    14d2:	99 27       	eor	r25, r25
    14d4:	ee 0f       	add	r30, r30
    14d6:	97 95       	ror	r25
    14d8:	87 95       	ror	r24
    14da:	08 95       	ret

000014dc <__fixsfsi>:
    14dc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__fixunssfsi>
    14e0:	68 94       	set
    14e2:	b1 11       	cpse	r27, r1
    14e4:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>
    14e8:	08 95       	ret

000014ea <__fixunssfsi>:
    14ea:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_splitA>
    14ee:	88 f0       	brcs	.+34     	; 0x1512 <__fixunssfsi+0x28>
    14f0:	9f 57       	subi	r25, 0x7F	; 127
    14f2:	98 f0       	brcs	.+38     	; 0x151a <__fixunssfsi+0x30>
    14f4:	b9 2f       	mov	r27, r25
    14f6:	99 27       	eor	r25, r25
    14f8:	b7 51       	subi	r27, 0x17	; 23
    14fa:	b0 f0       	brcs	.+44     	; 0x1528 <__fixunssfsi+0x3e>
    14fc:	e1 f0       	breq	.+56     	; 0x1536 <__fixunssfsi+0x4c>
    14fe:	66 0f       	add	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	88 1f       	adc	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	1a f0       	brmi	.+6      	; 0x150e <__fixunssfsi+0x24>
    1508:	ba 95       	dec	r27
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__fixunssfsi+0x14>
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <__fixunssfsi+0x4c>
    150e:	b1 30       	cpi	r27, 0x01	; 1
    1510:	91 f0       	breq	.+36     	; 0x1536 <__fixunssfsi+0x4c>
    1512:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fp_zero>
    1516:	b1 e0       	ldi	r27, 0x01	; 1
    1518:	08 95       	ret
    151a:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    151e:	67 2f       	mov	r22, r23
    1520:	78 2f       	mov	r23, r24
    1522:	88 27       	eor	r24, r24
    1524:	b8 5f       	subi	r27, 0xF8	; 248
    1526:	39 f0       	breq	.+14     	; 0x1536 <__fixunssfsi+0x4c>
    1528:	b9 3f       	cpi	r27, 0xF9	; 249
    152a:	cc f3       	brlt	.-14     	; 0x151e <__fixunssfsi+0x34>
    152c:	86 95       	lsr	r24
    152e:	77 95       	ror	r23
    1530:	67 95       	ror	r22
    1532:	b3 95       	inc	r27
    1534:	d9 f7       	brne	.-10     	; 0x152c <__fixunssfsi+0x42>
    1536:	3e f4       	brtc	.+14     	; 0x1546 <__fixunssfsi+0x5c>
    1538:	90 95       	com	r25
    153a:	80 95       	com	r24
    153c:	70 95       	com	r23
    153e:	61 95       	neg	r22
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	8f 4f       	sbci	r24, 0xFF	; 255
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	08 95       	ret

00001548 <__floatunsisf>:
    1548:	e8 94       	clt
    154a:	09 c0       	rjmp	.+18     	; 0x155e <__floatsisf+0x12>

0000154c <__floatsisf>:
    154c:	97 fb       	bst	r25, 7
    154e:	3e f4       	brtc	.+14     	; 0x155e <__floatsisf+0x12>
    1550:	90 95       	com	r25
    1552:	80 95       	com	r24
    1554:	70 95       	com	r23
    1556:	61 95       	neg	r22
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	8f 4f       	sbci	r24, 0xFF	; 255
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	99 23       	and	r25, r25
    1560:	a9 f0       	breq	.+42     	; 0x158c <__floatsisf+0x40>
    1562:	f9 2f       	mov	r31, r25
    1564:	96 e9       	ldi	r25, 0x96	; 150
    1566:	bb 27       	eor	r27, r27
    1568:	93 95       	inc	r25
    156a:	f6 95       	lsr	r31
    156c:	87 95       	ror	r24
    156e:	77 95       	ror	r23
    1570:	67 95       	ror	r22
    1572:	b7 95       	ror	r27
    1574:	f1 11       	cpse	r31, r1
    1576:	f8 cf       	rjmp	.-16     	; 0x1568 <__floatsisf+0x1c>
    1578:	fa f4       	brpl	.+62     	; 0x15b8 <__floatsisf+0x6c>
    157a:	bb 0f       	add	r27, r27
    157c:	11 f4       	brne	.+4      	; 0x1582 <__floatsisf+0x36>
    157e:	60 ff       	sbrs	r22, 0
    1580:	1b c0       	rjmp	.+54     	; 0x15b8 <__floatsisf+0x6c>
    1582:	6f 5f       	subi	r22, 0xFF	; 255
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	16 c0       	rjmp	.+44     	; 0x15b8 <__floatsisf+0x6c>
    158c:	88 23       	and	r24, r24
    158e:	11 f0       	breq	.+4      	; 0x1594 <__floatsisf+0x48>
    1590:	96 e9       	ldi	r25, 0x96	; 150
    1592:	11 c0       	rjmp	.+34     	; 0x15b6 <__floatsisf+0x6a>
    1594:	77 23       	and	r23, r23
    1596:	21 f0       	breq	.+8      	; 0x15a0 <__floatsisf+0x54>
    1598:	9e e8       	ldi	r25, 0x8E	; 142
    159a:	87 2f       	mov	r24, r23
    159c:	76 2f       	mov	r23, r22
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <__floatsisf+0x5e>
    15a0:	66 23       	and	r22, r22
    15a2:	71 f0       	breq	.+28     	; 0x15c0 <__floatsisf+0x74>
    15a4:	96 e8       	ldi	r25, 0x86	; 134
    15a6:	86 2f       	mov	r24, r22
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	2a f0       	brmi	.+10     	; 0x15b8 <__floatsisf+0x6c>
    15ae:	9a 95       	dec	r25
    15b0:	66 0f       	add	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 1f       	adc	r24, r24
    15b6:	da f7       	brpl	.-10     	; 0x15ae <__floatsisf+0x62>
    15b8:	88 0f       	add	r24, r24
    15ba:	96 95       	lsr	r25
    15bc:	87 95       	ror	r24
    15be:	97 f9       	bld	r25, 7
    15c0:	08 95       	ret

000015c2 <__fp_inf>:
    15c2:	97 f9       	bld	r25, 7
    15c4:	9f 67       	ori	r25, 0x7F	; 127
    15c6:	80 e8       	ldi	r24, 0x80	; 128
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	08 95       	ret

000015ce <__fp_nan>:
    15ce:	9f ef       	ldi	r25, 0xFF	; 255
    15d0:	80 ec       	ldi	r24, 0xC0	; 192
    15d2:	08 95       	ret

000015d4 <__fp_pscA>:
    15d4:	00 24       	eor	r0, r0
    15d6:	0a 94       	dec	r0
    15d8:	16 16       	cp	r1, r22
    15da:	17 06       	cpc	r1, r23
    15dc:	18 06       	cpc	r1, r24
    15de:	09 06       	cpc	r0, r25
    15e0:	08 95       	ret

000015e2 <__fp_pscB>:
    15e2:	00 24       	eor	r0, r0
    15e4:	0a 94       	dec	r0
    15e6:	12 16       	cp	r1, r18
    15e8:	13 06       	cpc	r1, r19
    15ea:	14 06       	cpc	r1, r20
    15ec:	05 06       	cpc	r0, r21
    15ee:	08 95       	ret

000015f0 <__fp_round>:
    15f0:	09 2e       	mov	r0, r25
    15f2:	03 94       	inc	r0
    15f4:	00 0c       	add	r0, r0
    15f6:	11 f4       	brne	.+4      	; 0x15fc <__fp_round+0xc>
    15f8:	88 23       	and	r24, r24
    15fa:	52 f0       	brmi	.+20     	; 0x1610 <__fp_round+0x20>
    15fc:	bb 0f       	add	r27, r27
    15fe:	40 f4       	brcc	.+16     	; 0x1610 <__fp_round+0x20>
    1600:	bf 2b       	or	r27, r31
    1602:	11 f4       	brne	.+4      	; 0x1608 <__fp_round+0x18>
    1604:	60 ff       	sbrs	r22, 0
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <__fp_round+0x20>
    1608:	6f 5f       	subi	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	08 95       	ret

00001612 <__fp_split3>:
    1612:	57 fd       	sbrc	r21, 7
    1614:	90 58       	subi	r25, 0x80	; 128
    1616:	44 0f       	add	r20, r20
    1618:	55 1f       	adc	r21, r21
    161a:	59 f0       	breq	.+22     	; 0x1632 <__fp_splitA+0x10>
    161c:	5f 3f       	cpi	r21, 0xFF	; 255
    161e:	71 f0       	breq	.+28     	; 0x163c <__fp_splitA+0x1a>
    1620:	47 95       	ror	r20

00001622 <__fp_splitA>:
    1622:	88 0f       	add	r24, r24
    1624:	97 fb       	bst	r25, 7
    1626:	99 1f       	adc	r25, r25
    1628:	61 f0       	breq	.+24     	; 0x1642 <__fp_splitA+0x20>
    162a:	9f 3f       	cpi	r25, 0xFF	; 255
    162c:	79 f0       	breq	.+30     	; 0x164c <__fp_splitA+0x2a>
    162e:	87 95       	ror	r24
    1630:	08 95       	ret
    1632:	12 16       	cp	r1, r18
    1634:	13 06       	cpc	r1, r19
    1636:	14 06       	cpc	r1, r20
    1638:	55 1f       	adc	r21, r21
    163a:	f2 cf       	rjmp	.-28     	; 0x1620 <__fp_split3+0xe>
    163c:	46 95       	lsr	r20
    163e:	f1 df       	rcall	.-30     	; 0x1622 <__fp_splitA>
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <__fp_splitA+0x30>
    1642:	16 16       	cp	r1, r22
    1644:	17 06       	cpc	r1, r23
    1646:	18 06       	cpc	r1, r24
    1648:	99 1f       	adc	r25, r25
    164a:	f1 cf       	rjmp	.-30     	; 0x162e <__fp_splitA+0xc>
    164c:	86 95       	lsr	r24
    164e:	71 05       	cpc	r23, r1
    1650:	61 05       	cpc	r22, r1
    1652:	08 94       	sec
    1654:	08 95       	ret

00001656 <__fp_zero>:
    1656:	e8 94       	clt

00001658 <__fp_szero>:
    1658:	bb 27       	eor	r27, r27
    165a:	66 27       	eor	r22, r22
    165c:	77 27       	eor	r23, r23
    165e:	cb 01       	movw	r24, r22
    1660:	97 f9       	bld	r25, 7
    1662:	08 95       	ret

00001664 <__mulsf3>:
    1664:	0e 94 45 0b 	call	0x168a	; 0x168a <__mulsf3x>
    1668:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    166c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    1670:	38 f0       	brcs	.+14     	; 0x1680 <__mulsf3+0x1c>
    1672:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    1676:	20 f0       	brcs	.+8      	; 0x1680 <__mulsf3+0x1c>
    1678:	95 23       	and	r25, r21
    167a:	11 f0       	breq	.+4      	; 0x1680 <__mulsf3+0x1c>
    167c:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>
    1680:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_nan>
    1684:	11 24       	eor	r1, r1
    1686:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>

0000168a <__mulsf3x>:
    168a:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    168e:	70 f3       	brcs	.-36     	; 0x166c <__mulsf3+0x8>

00001690 <__mulsf3_pse>:
    1690:	95 9f       	mul	r25, r21
    1692:	c1 f3       	breq	.-16     	; 0x1684 <__mulsf3+0x20>
    1694:	95 0f       	add	r25, r21
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	55 1f       	adc	r21, r21
    169a:	62 9f       	mul	r22, r18
    169c:	f0 01       	movw	r30, r0
    169e:	72 9f       	mul	r23, r18
    16a0:	bb 27       	eor	r27, r27
    16a2:	f0 0d       	add	r31, r0
    16a4:	b1 1d       	adc	r27, r1
    16a6:	63 9f       	mul	r22, r19
    16a8:	aa 27       	eor	r26, r26
    16aa:	f0 0d       	add	r31, r0
    16ac:	b1 1d       	adc	r27, r1
    16ae:	aa 1f       	adc	r26, r26
    16b0:	64 9f       	mul	r22, r20
    16b2:	66 27       	eor	r22, r22
    16b4:	b0 0d       	add	r27, r0
    16b6:	a1 1d       	adc	r26, r1
    16b8:	66 1f       	adc	r22, r22
    16ba:	82 9f       	mul	r24, r18
    16bc:	22 27       	eor	r18, r18
    16be:	b0 0d       	add	r27, r0
    16c0:	a1 1d       	adc	r26, r1
    16c2:	62 1f       	adc	r22, r18
    16c4:	73 9f       	mul	r23, r19
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	62 1f       	adc	r22, r18
    16cc:	83 9f       	mul	r24, r19
    16ce:	a0 0d       	add	r26, r0
    16d0:	61 1d       	adc	r22, r1
    16d2:	22 1f       	adc	r18, r18
    16d4:	74 9f       	mul	r23, r20
    16d6:	33 27       	eor	r19, r19
    16d8:	a0 0d       	add	r26, r0
    16da:	61 1d       	adc	r22, r1
    16dc:	23 1f       	adc	r18, r19
    16de:	84 9f       	mul	r24, r20
    16e0:	60 0d       	add	r22, r0
    16e2:	21 1d       	adc	r18, r1
    16e4:	82 2f       	mov	r24, r18
    16e6:	76 2f       	mov	r23, r22
    16e8:	6a 2f       	mov	r22, r26
    16ea:	11 24       	eor	r1, r1
    16ec:	9f 57       	subi	r25, 0x7F	; 127
    16ee:	50 40       	sbci	r21, 0x00	; 0
    16f0:	9a f0       	brmi	.+38     	; 0x1718 <__mulsf3_pse+0x88>
    16f2:	f1 f0       	breq	.+60     	; 0x1730 <__mulsf3_pse+0xa0>
    16f4:	88 23       	and	r24, r24
    16f6:	4a f0       	brmi	.+18     	; 0x170a <__mulsf3_pse+0x7a>
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	bb 1f       	adc	r27, r27
    16fe:	66 1f       	adc	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	91 50       	subi	r25, 0x01	; 1
    1706:	50 40       	sbci	r21, 0x00	; 0
    1708:	a9 f7       	brne	.-22     	; 0x16f4 <__mulsf3_pse+0x64>
    170a:	9e 3f       	cpi	r25, 0xFE	; 254
    170c:	51 05       	cpc	r21, r1
    170e:	80 f0       	brcs	.+32     	; 0x1730 <__mulsf3_pse+0xa0>
    1710:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>
    1714:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>
    1718:	5f 3f       	cpi	r21, 0xFF	; 255
    171a:	e4 f3       	brlt	.-8      	; 0x1714 <__mulsf3_pse+0x84>
    171c:	98 3e       	cpi	r25, 0xE8	; 232
    171e:	d4 f3       	brlt	.-12     	; 0x1714 <__mulsf3_pse+0x84>
    1720:	86 95       	lsr	r24
    1722:	77 95       	ror	r23
    1724:	67 95       	ror	r22
    1726:	b7 95       	ror	r27
    1728:	f7 95       	ror	r31
    172a:	e7 95       	ror	r30
    172c:	9f 5f       	subi	r25, 0xFF	; 255
    172e:	c1 f7       	brne	.-16     	; 0x1720 <__mulsf3_pse+0x90>
    1730:	fe 2b       	or	r31, r30
    1732:	88 0f       	add	r24, r24
    1734:	91 1d       	adc	r25, r1
    1736:	96 95       	lsr	r25
    1738:	87 95       	ror	r24
    173a:	97 f9       	bld	r25, 7
    173c:	08 95       	ret

0000173e <_exit>:
    173e:	f8 94       	cli

00001740 <__stop_program>:
    1740:	ff cf       	rjmp	.-2      	; 0x1740 <__stop_program>
